Index: 1 AxisBot Solana Sniper Main/.prettierrc
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/.prettierrc b/1 AxisBot Solana Sniper Main/.prettierrc
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/.prettierrc	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,5 +0,0 @@
-{
-  "singleQuote": true,
-  "trailingComma": "all",
-  "printWidth": 120
-}
\ No newline at end of file
Index: 1 AxisBot Solana Sniper Main/helpers/constants.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/helpers/constants.ts b/1 AxisBot Solana Sniper Main/helpers/constants.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/helpers/constants.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,67 +0,0 @@
-// 导入所需的模块和库
-import { Logger } from 'pino'; // 日志记录库
-import dotenv from 'dotenv'; // 环境变量加载库
-import { Commitment } from '@solana/web3.js'; // Solana 相关库
-import { logger } from './logger'; // 自定义日志记录器
-
-// 加载环境变量
-dotenv.config();
-
-// 检索环境变量的函数
-const retrieveEnvVariable = (variableName: string, logger: Logger) => {
-  const variable = process.env[variableName] || ''; // 从环境变量中获取值
-  if (!variable) {
-    logger.error(`${variableName} 未设置`); // 记录错误日志
-    process.exit(1); // 退出程序
-  }
-  return variable; // 返回环境变量的值
-};
-
-// 钱包
-export const PRIVATE_KEY = retrieveEnvVariable('PRIVATE_KEY', logger); // 私钥
-
-// 连接配置
-export const NETWORK = 'mainnet-beta'; // 网络
-export const COMMITMENT_LEVEL: Commitment = retrieveEnvVariable('COMMITMENT_LEVEL', logger) as Commitment; // 提交级别
-export const RPC_ENDPOINT = retrieveEnvVariable('RPC_ENDPOINT', logger); // RPC 端点
-export const RPC_WEBSOCKET_ENDPOINT = retrieveEnvVariable('RPC_WEBSOCKET_ENDPOINT', logger); // RPC WebSocket 端点
-
-// 机器人配置
-export const LOG_LEVEL = retrieveEnvVariable('LOG_LEVEL', logger); // 日志级别
-export const ONE_TOKEN_AT_A_TIME = retrieveEnvVariable('ONE_TOKEN_AT_A_TIME', logger) === 'true'; // 一次处理一个代币
-export const COMPUTE_UNIT_LIMIT = Number(retrieveEnvVariable('COMPUTE_UNIT_LIMIT', logger)); // 计算单元限制
-export const COMPUTE_UNIT_PRICE = Number(retrieveEnvVariable('COMPUTE_UNIT_PRICE', logger)); // 计算单元价格
-export const PRE_LOAD_EXISTING_MARKETS = retrieveEnvVariable('PRE_LOAD_EXISTING_MARKETS', logger) === 'true'; // 预加载现有市场
-export const CACHE_NEW_MARKETS = retrieveEnvVariable('CACHE_NEW_MARKETS', logger) === 'true'; // 缓存新市场
-export const TRANSACTION_EXECUTOR = retrieveEnvVariable('TRANSACTION_EXECUTOR', logger); // 交易执行器类型
-export const CUSTOM_FEE = retrieveEnvVariable('CUSTOM_FEE', logger); // 自定义费用
-
-// 购买配置
-export const AUTO_BUY_DELAY = Number(retrieveEnvVariable('AUTO_BUY_DELAY', logger)); // 自动购买延迟
-export const QUOTE_MINT = retrieveEnvVariable('QUOTE_MINT', logger); // 报价代币的 mint
-export const QUOTE_AMOUNT = retrieveEnvVariable('QUOTE_AMOUNT', logger); // 报价金额
-export const MAX_BUY_RETRIES = Number(retrieveEnvVariable('MAX_BUY_RETRIES', logger)); // 最大购买重试次数
-export const BUY_SLIPPAGE = Number(retrieveEnvVariable('BUY_SLIPPAGE', logger)); // 购买滑点
-
-// 出售配置
-export const AUTO_SELL = retrieveEnvVariable('AUTO_SELL', logger) === 'true'; // 是否自动出售
-export const AUTO_SELL_DELAY = Number(retrieveEnvVariable('AUTO_SELL_DELAY', logger)); // 自动出售延迟
-export const MAX_SELL_RETRIES = Number(retrieveEnvVariable('MAX_SELL_RETRIES', logger)); // 最大出售重试次数
-export const TAKE_PROFIT = Number(retrieveEnvVariable('TAKE_PROFIT', logger)); // 止盈设置
-export const STOP_LOSS = Number(retrieveEnvVariable('STOP_LOSS', logger)); // 止损设置
-export const PRICE_CHECK_INTERVAL = Number(retrieveEnvVariable('PRICE_CHECK_INTERVAL', logger)); // 价格检查间隔
-export const PRICE_CHECK_DURATION = Number(retrieveEnvVariable('PRICE_CHECK_DURATION', logger)); // 价格检查持续时间
-export const SELL_SLIPPAGE = Number(retrieveEnvVariable('SELL_SLIPPAGE', logger)); // 出售滑点
-
-// 过滤器配置
-export const FILTER_CHECK_INTERVAL = Number(retrieveEnvVariable('FILTER_CHECK_INTERVAL', logger)); // 过滤器检查间隔
-export const FILTER_CHECK_DURATION = Number(retrieveEnvVariable('FILTER_CHECK_DURATION', logger)); // 过滤器检查持续时间
-export const CONSECUTIVE_FILTER_MATCHES = Number(retrieveEnvVariable('CONSECUTIVE_FILTER_MATCHES', logger)); // 连续过滤器匹配次数
-export const CHECK_IF_MUTABLE = retrieveEnvVariable('CHECK_IF_MUTABLE', logger) === 'true'; // 检查是否可变
-export const CHECK_IF_MINT_IS_RENOUNCED = retrieveEnvVariable('CHECK_IF_MINT_IS_RENOUNCED', logger) === 'true'; // 检查是否被放弃
-export const CHECK_IF_FREEZABLE = retrieveEnvVariable('CHECK_IF_FREEZABLE', logger) === 'true'; // 检查是否可冻结
-export const CHECK_IF_BURNED = retrieveEnvVariable('CHECK_IF_BURNED', logger) === 'true'; // 检查是否已销毁
-export const MIN_POOL_SIZE = retrieveEnvVariable('MIN_POOL_SIZE', logger); // 最小池大小
-export const MAX_POOL_SIZE = retrieveEnvVariable('MAX_POOL_SIZE', logger); // 最大池大小
-export const USE_SNIPE_LIST = retrieveEnvVariable('USE_SNIPE_LIST', logger) === 'true'; // 使用抢购列表
-export const SNIPE_LIST_REFRESH_INTERVAL = Number(retrieveEnvVariable('SNIPE_LIST_REFRESH_INTERVAL', logger)); // 抢购列表刷新间隔
Index: 1 AxisBot Solana Sniper Main/cache/index.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/cache/index.ts b/1 AxisBot Solana Sniper Main/cache/index.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/cache/index.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,3 +0,0 @@
-export * from './market.cache';
-export * from './pool.cache';
-export * from './snipe-list.cache';
Index: 1 AxisBot Solana Sniper Main/helpers/wallet.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/helpers/wallet.ts b/1 AxisBot Solana Sniper Main/helpers/wallet.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/helpers/wallet.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,23 +0,0 @@
-// 导入所需的模块和库
-import { Keypair } from '@solana/web3.js'; // Solana 相关库
-import bs58 from 'bs58'; // Base58 编码库
-import { mnemonicToSeedSync } from 'bip39'; // 处理助记词的库
-import { derivePath } from 'ed25519-hd-key'; // HD 钱包路径推导库
-
-// 获取钱包的函数
-export function getWallet(wallet: string): Keypair {
-  // 如果钱包字符串以 "[" 开头，表示可能是二进制格式的私钥
-  if (wallet.startsWith('[')) {
-    return Keypair.fromSecretKey(JSON.parse(wallet)); // 解析并返回密钥对
-  }
-
-  // 如果钱包字符串包含空格，表示可能是助记词
-  if (wallet.split(' ').length > 1) {
-    const seed = mnemonicToSeedSync(wallet, ''); // 将助记词转换为种子
-    const path = `m/44'/501'/0'/0'`; // 假设使用第一个路径
-    return Keypair.fromSeed(derivePath(path, seed.toString('hex')).key); // 从种子生成密钥对
-  }
-
-  // 如果钱包字符串是 Base58 编码的私钥
-  return Keypair.fromSecretKey(bs58.decode(wallet)); // 解码并返回密钥对
-}
Index: .idea/AxisBot(汉化).iml
===================================================================
diff --git a/.idea/AxisBot(汉化).iml b/.idea/AxisBot(汉化).iml
deleted file mode 100644
--- a/.idea/AxisBot(汉化).iml	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="WEB_MODULE" version="4">
-  <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$">
-      <excludeFolder url="file://$MODULE_DIR$/.tmp" />
-      <excludeFolder url="file://$MODULE_DIR$/temp" />
-      <excludeFolder url="file://$MODULE_DIR$/tmp" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
Index: 1 AxisBot Solana Sniper Main/helpers/market.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/helpers/market.ts b/1 AxisBot Solana Sniper Main/helpers/market.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/helpers/market.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,33 +0,0 @@
-// 导入所需的模块和库
-import { Commitment, Connection, PublicKey } from '@solana/web3.js'; // Solana 相关库
-import { GetStructureSchema, MARKET_STATE_LAYOUT_V3, publicKey, struct } from '@raydium-io/raydium-sdk'; // Raydium SDK
-
-// 定义最小市场状态布局 V3
-export const MINIMAL_MARKET_STATE_LAYOUT_V3 = struct([
-  publicKey('eventQueue'), // 事件队列的公钥
-  publicKey('bids'), // 买入订单的公钥
-  publicKey('asks'), // 卖出订单的公钥
-]);
-
-// 定义类型
-export type MinimalMarketStateLayoutV3 = typeof MINIMAL_MARKET_STATE_LAYOUT_V3; // 最小市场状态布局类型
-export type MinimalMarketLayoutV3 = GetStructureSchema<MinimalMarketStateLayoutV3>; // 获取最小市场布局的结构类型
-
-// 获取最小市场 V3 的异步函数
-export async function getMinimalMarketV3(
-  connection: Connection, // Solana 连接
-  marketId: PublicKey, // 市场 ID
-  commitment?: Commitment, // 提交级别（可选）
-): Promise<MinimalMarketLayoutV3> { // 返回最小市场布局 V3
-                                    // 从区块链获取市场信息
-  const marketInfo = await connection.getAccountInfo(marketId, {
-    commitment, // 提交级别
-    dataSlice: { // 数据切片
-      offset: MARKET_STATE_LAYOUT_V3.offsetOf('eventQueue'), // 从事件队列开始的偏移
-      length: 32 * 3, // 读取的长度
-    },
-  });
-
-  // 解码并返回市场信息
-  return MINIMAL_MARKET_STATE_LAYOUT_V3.decode(marketInfo!.data);
-}
Index: 1 AxisBot Solana Sniper Main/listeners/listeners.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/listeners/listeners.ts b/1 AxisBot Solana Sniper Main/listeners/listeners.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/listeners/listeners.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,122 +0,0 @@
-// 导入所需的模块和库
-import { LIQUIDITY_STATE_LAYOUT_V4, MAINNET_PROGRAM_ID, MARKET_STATE_LAYOUT_V3, Token } from '@raydium-io/raydium-sdk'; // Raydium SDK
-import bs58 from 'bs58'; // Base58 编码库
-import { Connection, PublicKey } from '@solana/web3.js'; // Solana 相关库
-import { TOKEN_PROGRAM_ID } from '@solana/spl-token'; // 代币程序 ID
-import { EventEmitter } from 'events'; // 事件发射器
-
-// 监听器类，扩展自 EventEmitter
-export class Listeners extends EventEmitter {
-  private subscriptions: number[] = []; // 存储订阅 ID
-
-  constructor(private readonly connection: Connection) {
-    super(); // 调用父类构造函数
-  }
-
-  // 启动监听器，接受配置参数
-  public async start(config: {
-    walletPublicKey: PublicKey; // 钱包公钥
-    quoteToken: Token; // 报价代币
-    autoSell: boolean; // 是否自动出售
-    cacheNewMarkets: boolean; // 是否缓存新市场
-  }) {
-    // 如果配置了缓存新市场，则订阅开放市场变化
-    if (config.cacheNewMarkets) {
-      const openBookSubscription = await this.subscribeToOpenBookMarkets(config);
-      this.subscriptions.push(openBookSubscription); // 存储订阅 ID
-    }
-
-    // 订阅 Raydium 池变化
-    const raydiumSubscription = await this.subscribeToRaydiumPools(config);
-    this.subscriptions.push(raydiumSubscription); // 存储订阅 ID
-
-    // 如果配置了自动出售，则订阅钱包变化
-    if (config.autoSell) {
-      const walletSubscription = await this.subscribeToWalletChanges(config);
-      this.subscriptions.push(walletSubscription); // 存储订阅 ID
-    }
-  }
-
-  // 订阅开放书市场的变化
-  private async subscribeToOpenBookMarkets(config: { quoteToken: Token }) {
-    return this.connection.onProgramAccountChange(
-      MAINNET_PROGRAM_ID.OPENBOOK_MARKET, // 订阅的程序 ID
-      async (updatedAccountInfo) => {
-        this.emit('market', updatedAccountInfo); // 触发市场更新事件
-      },
-      this.connection.commitment, // 提交级别
-      [
-        { dataSize: MARKET_STATE_LAYOUT_V3.span }, // 数据大小过滤
-        {
-          memcmp: { // 根据报价代币的 mint 过滤
-            offset: MARKET_STATE_LAYOUT_V3.offsetOf('quoteMint'),
-            bytes: config.quoteToken.mint.toBase58(),
-          },
-        },
-      ],
-    );
-  }
-
-  // 订阅 Raydium 池的变化
-  private async subscribeToRaydiumPools(config: { quoteToken: Token }) {
-    return this.connection.onProgramAccountChange(
-      MAINNET_PROGRAM_ID.AmmV4, // 订阅的程序 ID
-      async (updatedAccountInfo) => {
-        this.emit('pool', updatedAccountInfo); // 触发池更新事件
-      },
-      this.connection.commitment, // 提交级别
-      [
-        { dataSize: LIQUIDITY_STATE_LAYOUT_V4.span }, // 数据大小过滤
-        {
-          memcmp: { // 根据报价代币的 mint 过滤
-            offset: LIQUIDITY_STATE_LAYOUT_V4.offsetOf('quoteMint'),
-            bytes: config.quoteToken.mint.toBase58(),
-          },
-        },
-        {
-          memcmp: { // 根据市场程序 ID 过滤
-            offset: LIQUIDITY_STATE_LAYOUT_V4.offsetOf('marketProgramId'),
-            bytes: MAINNET_PROGRAM_ID.OPENBOOK_MARKET.toBase58(),
-          },
-        },
-        {
-          memcmp: { // 根据状态过滤
-            offset: LIQUIDITY_STATE_LAYOUT_V4.offsetOf('status'),
-            bytes: bs58.encode([6, 0, 0, 0, 0, 0, 0, 0]),
-          },
-        },
-      ],
-    );
-  }
-
-  // 订阅钱包变化
-  private async subscribeToWalletChanges(config: { walletPublicKey: PublicKey }) {
-    return this.connection.onProgramAccountChange(
-      TOKEN_PROGRAM_ID, // 订阅的程序 ID
-      async (updatedAccountInfo) => {
-        this.emit('wallet', updatedAccountInfo); // 触发钱包更新事件
-      },
-      this.connection.commitment, // 提交级别
-      [
-        {
-          dataSize: 165, // 数据大小过滤
-        },
-        {
-          memcmp: { // 根据钱包公钥过滤
-            offset: 32, // 偏移量
-            bytes: config.walletPublicKey.toBase58(),
-          },
-        },
-      ],
-    );
-  }
-
-  // 停止所有订阅
-  public async stop() {
-    for (let i = this.subscriptions.length; i >= 0; --i) {
-      const subscription = this.subscriptions[i];
-      await this.connection.removeAccountChangeListener(subscription); // 移除账户变化监听
-      this.subscriptions.splice(i, 1); // 从订阅列表中删除
-    }
-  }
-}
Index: 2 AxisBot Spam Sniper/strategy2/start2.js
===================================================================
diff --git a/2 AxisBot Spam Sniper/strategy2/start2.js b/2 AxisBot Spam Sniper/strategy2/start2.js
deleted file mode 100644
--- a/2 AxisBot Spam Sniper/strategy2/start2.js	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,83 +0,0 @@
-const web3 = require('@solana/web3.js');
-const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
-const WebSocket = require('ws');
-const derivePoolKeys = require('./derivePoolKeys.js');
-const swap = require('./swap2.js');
-const config = require('../utils/config.js');
-
-const connection = config.connection;
-
-const ws = new WebSocket(config.websocketConnection)
-    ws.onopen = () => {
-        ws.send(
-            JSON.stringify({
-                jsonrpc: '2.0',
-                id: 1,
-                method: 'blockSubscribe',
-                params: [{"mentionsAccountOrProgram": "srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX"}, {"commitment": "confirmed", "maxSupportedTransactionVersion": 0, "encoding": "jsonParsed"}]
-            })
-        )
-    }
-
-ws.on('message', (evt) => {
-    try {
-        const buffer = evt.toString('utf8');
-        parseTxs(JSON.parse(buffer));
-        return;
-    } catch (e) {
-        console.log(e)
-    }
-})
-
-function parseTxs(txsFromBlock){
-    if(txsFromBlock.params === undefined){
-        return;
-    }
-    const allTx = txsFromBlock.params.result.value.block.transactions;
-    for(const tx of allTx){
-        if(parseLogs(tx.meta.logMessages) && tx.transaction.message.accountKeys.length === 13 && tx.transaction.message.instructions.length === 6){
-            ws.close();
-            console.log(tx.transaction.signatures)
-            parseAccountKeys(tx.transaction.message.accountKeys, tx.transaction.signatures);
-        }
-    }
-}
-
-function parseLogs(logs){
-    let invoke = 0;
-    let consumed = 0;
-    let success = 0;
-    for(const log of logs){
-        if(log.includes("Program srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX invoke")){
-            invoke += 1;
-        }
-        if(log.includes("Program srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX consumed")){
-            consumed += 1;
-        }
-        if(log.includes("Program srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX success")){
-            success += 1;
-        }
-    }
-    if(invoke === 1 && consumed === 1 && success === 1){
-        return true;
-    } else{
-        return false;
-    }
-}
-
-async function parseAccountKeys(keys, signature){
-    let marketId = null;
-    for(const key of keys){
-        console.log(key);
-        const keyData = await connection.getAccountInfo(new web3.PublicKey(key.pubkey));
-        if(keyData !== null && keyData.data.length === 388){
-            marketId = key.pubkey;
-        }
-    }
-    if(marketId === null){
-        parseAccountKeys(keys);
-    } else{
-        const poolKeys = await derivePoolKeys.derivePoolKeys(marketId);
-        swap.swap(poolKeys, signature);
-    }
-}
\ No newline at end of file
Index: 1 AxisBot Solana Sniper Main/README.md
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/README.md b/1 AxisBot Solana Sniper Main/README.md
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/README.md	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,86 +0,0 @@
-# AxisBot Solana Sniper v1.0
-
-## 概述
-AxisBot 是一个高速狙击和出售 SPL 代币的工具，旨在帮助用户在保持较高安全性的同时，提供最快的狙击速度。由交易者为交易者打造。
-
-## 设置步骤
-
-要运行脚本，你需要：
-
-- 创建一个新的空 Solana 钱包
-- 向其转入一些 SOL
-- 将部分 SOL 转换为 USDC 或 WSOL（取决于配置）
-  - 根据下面的配置选择 USDC 或 WSOL
-- 通过更新 `.env.copy` 文件来配置脚本（完成后移除 `.copy` 后缀）
-  - 参考下方的 [配置](#configuration) 部分
-- 在终端中输入 `npm install` 安装依赖
-- 输入 `npm run start` 运行脚本
-
-### 配置
-
-#### 钱包
-- `PRIVATE_KEY`：你钱包的私钥。
-
-#### 连接
-- `RPC_ENDPOINT`：与 Solana 网络交互的 HTTPS RPC 端点。
-- `RPC_WEBSOCKET_ENDPOINT`：从 Solana 网络实时接收更新的 WebSocket RPC 端点。
-- `COMMITMENT_LEVEL`：交易的承诺级别（如“finalized”表示最高安全级别）。
-
-#### 机器人配置
-- `LOG_LEVEL`：设置日志级别，如 `info`、`debug`、`trace` 等。
-- `ONE_TOKEN_AT_A_TIME`：设为 `true` 表示一次只处理一个代币的购买。
-- `COMPUTE_UNIT_LIMIT` 和 `COMPUTE_UNIT_PRICE`：用于计算交易费用。
-- `PRE_LOAD_EXISTING_MARKETS`：启动时预加载所有现有市场（不适用于公共 RPC）。
-- `CACHE_NEW_MARKETS`：设为 `true` 以缓存新市场（不适用于公共 RPC）。
-- `TRANSACTION_EXECUTOR`：设为 `jito` 以使用 JSON-RPC jito 执行器。
-- `CUSTOM_FEE`：如果使用 warp 或 jito 执行器，将使用此值作为交易费用，而不是 `COMPUTE_UNIT_LIMIT` 和 `COMPUTE_UNIT_PRICE`。
-  - 最小值为 0.0001 SOL，建议使用 0.01 SOL 或以上。
-  - 此费用之外，还会应用 Solana 网络的最低费用。
-
-#### 买入配置
-- `QUOTE_MINT`：设置狙击的池子类型（USDC 或 WSOL）。
-- `QUOTE_AMOUNT`：每次买入的金额。
-- `AUTO_BUY_DELAY`：在买入代币前的延迟时间（以毫秒为单位）。
-- `MAX_BUY_RETRIES`：买入代币的最大重试次数。
-- `BUY_SLIPPAGE`：买入时的滑点百分比。
-
-#### 卖出配置
-- `AUTO_SELL`：设为 `true` 以启用自动卖出代币。如果你想手动卖出，请禁用此选项。
-- `MAX_SELL_RETRIES`：卖出代币的最大重试次数。
-- `AUTO_SELL_DELAY`：自动卖出代币前的延迟时间（以毫秒为单位）。
-- `PRICE_CHECK_INTERVAL`：检查止盈和止损条件的时间间隔（以毫秒为单位）。
-  - 设置为 0 可禁用止盈和止损功能。
-- `PRICE_CHECK_DURATION`：等待止盈/止损条件的时间（以毫秒为单位）。如果未达到预期的利润或亏损，机器人将在此时间后自动卖出。
-  - 设置为 0 以禁用该功能。
-- `TAKE_PROFIT`：达到该百分比利润时进行止盈。
-  - 利润基于报价资产（如 USDC 或 WSOL）计算。
-- `STOP_LOSS`：达到该百分比亏损时止损。
-  - 亏损基于报价资产计算。
-- `SELL_SLIPPAGE`：卖出时的滑点百分比。
-
-#### 狙击列表
-- `USE_SNIPE_LIST`：设为 `true` 以启用只购买 `snipe-list.txt` 中列出的代币。
-  - 该池子在机器人启动前不得存在。
-  - 如果在机器人启动前可以交易该代币，则不会执行购买。
-- `SNIPE_LIST_REFRESH_INTERVAL`：刷新狙击列表的时间间隔（以毫秒为单位）。你可以在机器人运行期间更新列表，它将在每次刷新时应用更改。
-
-#### 过滤器
-- `FILTER_CHECK_INTERVAL` 和 `FILTER_CHECK_DURATION`：设置检查池子是否符合过滤条件的时间间隔和持续时间。
-- `CONSECUTIVE_FILTER_MATCHES`：连续多少次满足过滤条件时才购买。
-- `CHECK_IF_MUTABLE`：设置为 `true` 仅购买不可修改的代币。
-- `CHECK_IF_MINT_IS_RENOUNCED`：设置为 `true` 仅购买铸币已放弃的代币。
-- `CHECK_IF_FREEZABLE` 和 `CHECK_IF_BURNED`：设置为 `true` 仅购买不可冻结或未被销毁的流动性池。
-- `MIN_POOL_SIZE` 和 `MAX_POOL_SIZE`：设置池子大小范围以确定是否进行购买。
-
-## 常见问题
-如果遇到未列出的问题，请在此仓库中创建新的问题。为获取更多调试信息，可以将 `LOG_LEVEL` 设置为 `debug`。
-
-### 没有代币账户
-- 如果日志中显示如下错误：  
-  `Error: No SOL token account found in wallet:`  
-  这意味着你提供的钱包中没有 USDC/WSOL 代币账户。  
-  - **解决方法**：前往去中心化交易所，将一些 SOL 转换为 USDC/WSOL。例如，转换后的 WSOL 应在钱包中显示。  
-
-## 免责声明
-AxisBot Solana Sniper 是一款简化许多常规交易任务的代码工具，整合了多种实用工具。  
-加密货币交易存在巨大风险，包括可能的本金损失。该机器人不保证盈利或特定结果。用户需自行承担使用此工具的风险。
\ No newline at end of file
Index: 1 AxisBot Solana Sniper Main/filters/index.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/filters/index.ts b/1 AxisBot Solana Sniper Main/filters/index.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/filters/index.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,5 +0,0 @@
-export * from './burn.filter';
-export * from './mutable.filter';
-export * from './pool-filters';
-export * from './pool-size.filter';
-export * from './renounced.filter';
Index: 1 AxisBot Solana Sniper Main/filters/pool-filters.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/filters/pool-filters.ts b/1 AxisBot Solana Sniper Main/filters/pool-filters.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/filters/pool-filters.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,78 +0,0 @@
-// 导入所需的模块和库
-import { Connection } from '@solana/web3.js'; // Solana 相关库
-import { LiquidityPoolKeysV4, Token, TokenAmount } from '@raydium-io/raydium-sdk'; // Raydium SDK
-import { getMetadataAccountDataSerializer } from '@metaplex-foundation/mpl-token-metadata'; // Metaplex 相关库
-import { BurnFilter } from './burn.filter'; // 引入销毁过滤器
-import { MutableFilter } from './mutable.filter'; // 引入可变性过滤器
-import { RenouncedFreezeFilter } from './renounced.filter'; // 引入放弃冻结过滤器
-import { PoolSizeFilter } from './pool-size.filter'; // 引入池大小过滤器
-import { CHECK_IF_BURNED, CHECK_IF_FREEZABLE, CHECK_IF_MINT_IS_RENOUNCED, CHECK_IF_MUTABLE, logger } from '../helpers'; // 引入辅助函数和常量
-
-// 过滤器接口
-export interface Filter {
-  execute(poolKeysV4: LiquidityPoolKeysV4): Promise<FilterResult>; // 执行过滤器的方法
-}
-
-// 过滤器结果接口
-export interface FilterResult {
-  ok: boolean; // 过滤器是否通过
-  message?: string; // 可选的消息
-}
-
-// 池过滤器参数接口
-export interface PoolFilterArgs {
-  minPoolSize: TokenAmount; // 最小池大小
-  maxPoolSize: TokenAmount; // 最大池大小
-  quoteToken: Token; // 报价代币
-}
-
-// 池过滤器类
-export class PoolFilters {
-  private readonly filters: Filter[] = []; // 存储过滤器数组
-
-  constructor(
-    readonly connection: Connection, // Solana 连接
-    readonly args: PoolFilterArgs, // 过滤器参数
-  ) {
-    // 根据配置条件添加相应的过滤器
-    if (CHECK_IF_BURNED) {
-      this.filters.push(new BurnFilter(connection)); // 添加销毁过滤器
-    }
-
-    if (CHECK_IF_MINT_IS_RENOUNCED || CHECK_IF_FREEZABLE) {
-      this.filters.push(new RenouncedFreezeFilter(connection, CHECK_IF_MINT_IS_RENOUNCED, CHECK_IF_FREEZABLE)); // 添加放弃冻结过滤器
-    }
-
-    if (CHECK_IF_MUTABLE) {
-      this.filters.push(new MutableFilter(connection, getMetadataAccountDataSerializer())); // 添加可变性过滤器
-    }
-
-    // 如果最小或最大池大小不为零，添加池大小过滤器
-    if (!args.minPoolSize.isZero() || !args.maxPoolSize.isZero()) {
-      this.filters.push(new PoolSizeFilter(connection, args.quoteToken, args.minPoolSize, args.maxPoolSize));
-    }
-  }
-
-  // 执行所有过滤器的方法
-  public async execute(poolKeys: LiquidityPoolKeysV4): Promise<boolean> {
-    // 如果没有过滤器，则通过
-    if (this.filters.length === 0) {
-      return true;
-    }
-
-    // 并行执行所有过滤器
-    const result = await Promise.all(this.filters.map((f) => f.execute(poolKeys)));
-    const pass = result.every((r) => r.ok); // 检查是否所有过滤器都通过
-
-    if (pass) {
-      return true; // 如果所有过滤器都通过，返回 true
-    }
-
-    // 记录未通过过滤器的消息
-    for (const filterResult of result.filter((r) => !r.ok)) {
-      logger.trace(filterResult.message);
-    }
-
-    return false; // 返回 false，表示未通过
-  }
-}
Index: 2 AxisBot Spam Sniper/package-lock.json
===================================================================
diff --git a/2 AxisBot Spam Sniper/package-lock.json b/2 AxisBot Spam Sniper/package-lock.json
deleted file mode 100644
--- a/2 AxisBot Spam Sniper/package-lock.json	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,1751 +0,0 @@
-{
-  "name": "solana",
-  "version": "1.0.0",
-  "lockfileVersion": 2,
-  "requires": true,
-  "packages": {
-    "": {
-      "name": "solana",
-      "version": "1.0.0",
-      "license": "ISC",
-      "dependencies": {
-        "@openbook-dex/openbook": "^0.0.9",
-        "@raydium-io/raydium-sdk": "^1.3.1-beta.46",
-        "@solana/spl-token": "^0.3.11",
-        "@solana/web3.js": "^1.87.6",
-        "borsh": "^2.0.0",
-        "bs64": "^0.1.0",
-        "node": "^21.2.0"
-      }
-    },
-    "node_modules/@babel/runtime": {
-      "version": "7.23.7",
-      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.23.7.tgz",
-      "integrity": "sha512-w06OXVOFso7LcbzMiDGt+3X7Rh7Ho8MmgPoWU3rarH+8upf+wSU/grlGbWzQyr3DkdN6ZeuMFjpdwW0Q+HxobA==",
-      "dependencies": {
-        "regenerator-runtime": "^0.14.0"
-      },
-      "engines": {
-        "node": ">=6.9.0"
-      }
-    },
-    "node_modules/@noble/curves": {
-      "version": "1.3.0",
-      "resolved": "https://registry.npmjs.org/@noble/curves/-/curves-1.3.0.tgz",
-      "integrity": "sha512-t01iSXPuN+Eqzb4eBX0S5oubSqXbK/xXa1Ne18Hj8f9pStxztHCE2gfboSp/dZRLSqfuLpRK2nDXDK+W9puocA==",
-      "dependencies": {
-        "@noble/hashes": "1.3.3"
-      },
-      "funding": {
-        "url": "https://paulmillr.com/funding/"
-      }
-    },
-    "node_modules/@noble/hashes": {
-      "version": "1.3.3",
-      "resolved": "https://registry.npmjs.org/@noble/hashes/-/hashes-1.3.3.tgz",
-      "integrity": "sha512-V7/fPHgl+jsVPXqqeOzT8egNj2iBIVt+ECeMMG8TdcnTikP3oaBtUVqpT/gYCR68aEBJSF+XbYUxStjbFMqIIA==",
-      "engines": {
-        "node": ">= 16"
-      },
-      "funding": {
-        "url": "https://paulmillr.com/funding/"
-      }
-    },
-    "node_modules/@openbook-dex/openbook": {
-      "version": "0.0.9",
-      "resolved": "https://registry.npmjs.org/@openbook-dex/openbook/-/openbook-0.0.9.tgz",
-      "integrity": "sha512-tJPqHS7Tp/Gu3MC/MAZQBUm62WhdBPLzCcId3p62eHV6cRwNqflr0j+eKDh0Lfd5CAnkB1a9wZoVte074+zB5A==",
-      "dependencies": {
-        "@project-serum/anchor": "^0.11.1",
-        "@solana/spl-token": "^0.1.6",
-        "@solana/web3.js": "^1.70.0",
-        "bn.js": "^5.2.1",
-        "buffer-layout": "^1.2.0"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/@openbook-dex/openbook/node_modules/@solana/spl-token": {
-      "version": "0.1.8",
-      "resolved": "https://registry.npmjs.org/@solana/spl-token/-/spl-token-0.1.8.tgz",
-      "integrity": "sha512-LZmYCKcPQDtJgecvWOgT/cnoIQPWjdH+QVyzPcFvyDUiT0DiRjZaam4aqNUyvchLFhzgunv3d9xOoyE34ofdoQ==",
-      "dependencies": {
-        "@babel/runtime": "^7.10.5",
-        "@solana/web3.js": "^1.21.0",
-        "bn.js": "^5.1.0",
-        "buffer": "6.0.3",
-        "buffer-layout": "^1.2.0",
-        "dotenv": "10.0.0"
-      },
-      "engines": {
-        "node": ">= 10"
-      }
-    },
-    "node_modules/@project-serum/anchor": {
-      "version": "0.11.1",
-      "resolved": "https://registry.npmjs.org/@project-serum/anchor/-/anchor-0.11.1.tgz",
-      "integrity": "sha512-oIdm4vTJkUy6GmE6JgqDAuQPKI7XM4TPJkjtoIzp69RZe0iAD9JP2XHx7lV1jLdYXeYHqDXfBt3zcq7W91K6PA==",
-      "dependencies": {
-        "@project-serum/borsh": "^0.2.2",
-        "@solana/web3.js": "^1.17.0",
-        "base64-js": "^1.5.1",
-        "bn.js": "^5.1.2",
-        "bs58": "^4.0.1",
-        "buffer-layout": "^1.2.0",
-        "camelcase": "^5.3.1",
-        "crypto-hash": "^1.3.0",
-        "eventemitter3": "^4.0.7",
-        "find": "^0.3.0",
-        "js-sha256": "^0.9.0",
-        "pako": "^2.0.3",
-        "snake-case": "^3.0.4",
-        "toml": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=11"
-      }
-    },
-    "node_modules/@project-serum/borsh": {
-      "version": "0.2.5",
-      "resolved": "https://registry.npmjs.org/@project-serum/borsh/-/borsh-0.2.5.tgz",
-      "integrity": "sha512-UmeUkUoKdQ7rhx6Leve1SssMR/Ghv8qrEiyywyxSWg7ooV7StdpPBhciiy5eB3T0qU1BXvdRNC8TdrkxK7WC5Q==",
-      "dependencies": {
-        "bn.js": "^5.1.2",
-        "buffer-layout": "^1.2.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "peerDependencies": {
-        "@solana/web3.js": "^1.2.0"
-      }
-    },
-    "node_modules/@raydium-io/raydium-sdk": {
-      "version": "1.3.1-beta.46",
-      "resolved": "https://registry.npmjs.org/@raydium-io/raydium-sdk/-/raydium-sdk-1.3.1-beta.46.tgz",
-      "integrity": "sha512-hGieqaCeqszEJGRBbNNveXlZk8EIsjV9PTwodx8SWABu1ZZODE8SGRe5Vuq9Jtv1LZzL7jY3+P5UnQxrdQLQUA==",
-      "dependencies": {
-        "@solana/buffer-layout": "^4.0.1",
-        "@solana/spl-token": "^0.3.9",
-        "axios": "^1.6.2",
-        "big.js": "^6.2.1",
-        "bn.js": "^5.2.1",
-        "decimal.js": "^10.4.3",
-        "decimal.js-light": "^2.5.1",
-        "fecha": "^4.2.3",
-        "lodash": "^4.17.21",
-        "toformat": "^2.0.0"
-      },
-      "peerDependencies": {
-        "@solana/web3.js": "^1.73.0"
-      }
-    },
-    "node_modules/@solana/buffer-layout": {
-      "version": "4.0.1",
-      "resolved": "https://registry.npmjs.org/@solana/buffer-layout/-/buffer-layout-4.0.1.tgz",
-      "integrity": "sha512-E1ImOIAD1tBZFRdjeM4/pzTiTApC0AOBGwyAMS4fwIodCWArzJ3DWdoh8cKxeFM2fElkxBh2Aqts1BPC373rHA==",
-      "dependencies": {
-        "buffer": "~6.0.3"
-      },
-      "engines": {
-        "node": ">=5.10"
-      }
-    },
-    "node_modules/@solana/buffer-layout-utils": {
-      "version": "0.2.0",
-      "resolved": "https://registry.npmjs.org/@solana/buffer-layout-utils/-/buffer-layout-utils-0.2.0.tgz",
-      "integrity": "sha512-szG4sxgJGktbuZYDg2FfNmkMi0DYQoVjN2h7ta1W1hPrwzarcFLBq9UpX1UjNXsNpT9dn+chgprtWGioUAr4/g==",
-      "dependencies": {
-        "@solana/buffer-layout": "^4.0.0",
-        "@solana/web3.js": "^1.32.0",
-        "bigint-buffer": "^1.1.5",
-        "bignumber.js": "^9.0.1"
-      },
-      "engines": {
-        "node": ">= 10"
-      }
-    },
-    "node_modules/@solana/codecs-core": {
-      "version": "2.0.0-experimental.8618508",
-      "resolved": "https://registry.npmjs.org/@solana/codecs-core/-/codecs-core-2.0.0-experimental.8618508.tgz",
-      "integrity": "sha512-JCz7mKjVKtfZxkuDtwMAUgA7YvJcA2BwpZaA1NOLcted4OMC4Prwa3DUe3f3181ixPYaRyptbF0Ikq2MbDkYEA=="
-    },
-    "node_modules/@solana/codecs-data-structures": {
-      "version": "2.0.0-experimental.8618508",
-      "resolved": "https://registry.npmjs.org/@solana/codecs-data-structures/-/codecs-data-structures-2.0.0-experimental.8618508.tgz",
-      "integrity": "sha512-sLpjL9sqzaDdkloBPV61Rht1tgaKq98BCtIKRuyscIrmVPu3wu0Bavk2n/QekmUzaTsj7K1pVSniM0YqCdnEBw==",
-      "dependencies": {
-        "@solana/codecs-core": "2.0.0-experimental.8618508",
-        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
-      }
-    },
-    "node_modules/@solana/codecs-numbers": {
-      "version": "2.0.0-experimental.8618508",
-      "resolved": "https://registry.npmjs.org/@solana/codecs-numbers/-/codecs-numbers-2.0.0-experimental.8618508.tgz",
-      "integrity": "sha512-EXQKfzFr3CkKKNzKSZPOOOzchXsFe90TVONWsSnVkonO9z+nGKALE0/L9uBmIFGgdzhhU9QQVFvxBMclIDJo2Q==",
-      "dependencies": {
-        "@solana/codecs-core": "2.0.0-experimental.8618508"
-      }
-    },
-    "node_modules/@solana/codecs-strings": {
-      "version": "2.0.0-experimental.8618508",
-      "resolved": "https://registry.npmjs.org/@solana/codecs-strings/-/codecs-strings-2.0.0-experimental.8618508.tgz",
-      "integrity": "sha512-b2yhinr1+oe+JDmnnsV0641KQqqDG8AQ16Z/x7GVWO+AWHMpRlHWVXOq8U1yhPMA4VXxl7i+D+C6ql0VGFp0GA==",
-      "dependencies": {
-        "@solana/codecs-core": "2.0.0-experimental.8618508",
-        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
-      },
-      "peerDependencies": {
-        "fastestsmallesttextencoderdecoder": "^1.0.22"
-      }
-    },
-    "node_modules/@solana/options": {
-      "version": "2.0.0-experimental.8618508",
-      "resolved": "https://registry.npmjs.org/@solana/options/-/options-2.0.0-experimental.8618508.tgz",
-      "integrity": "sha512-fy/nIRAMC3QHvnKi63KEd86Xr/zFBVxNW4nEpVEU2OT0gCEKwHY4Z55YHf7XujhyuM3PNpiBKg/YYw5QlRU4vg==",
-      "dependencies": {
-        "@solana/codecs-core": "2.0.0-experimental.8618508",
-        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
-      }
-    },
-    "node_modules/@solana/spl-token": {
-      "version": "0.3.11",
-      "resolved": "https://registry.npmjs.org/@solana/spl-token/-/spl-token-0.3.11.tgz",
-      "integrity": "sha512-bvohO3rIMSVL24Pb+I4EYTJ6cL82eFpInEXD/I8K8upOGjpqHsKUoAempR/RnUlI1qSFNyFlWJfu6MNUgfbCQQ==",
-      "dependencies": {
-        "@solana/buffer-layout": "^4.0.0",
-        "@solana/buffer-layout-utils": "^0.2.0",
-        "@solana/spl-token-metadata": "^0.1.2",
-        "buffer": "^6.0.3"
-      },
-      "engines": {
-        "node": ">=16"
-      },
-      "peerDependencies": {
-        "@solana/web3.js": "^1.88.0"
-      }
-    },
-    "node_modules/@solana/spl-token-metadata": {
-      "version": "0.1.2",
-      "resolved": "https://registry.npmjs.org/@solana/spl-token-metadata/-/spl-token-metadata-0.1.2.tgz",
-      "integrity": "sha512-hJYnAJNkDrtkE2Q41YZhCpeOGU/0JgRFXbtrtOuGGeKc3pkEUHB9DDoxZAxx+XRno13GozUleyBi0qypz4c3bw==",
-      "dependencies": {
-        "@solana/codecs-core": "2.0.0-experimental.8618508",
-        "@solana/codecs-data-structures": "2.0.0-experimental.8618508",
-        "@solana/codecs-numbers": "2.0.0-experimental.8618508",
-        "@solana/codecs-strings": "2.0.0-experimental.8618508",
-        "@solana/options": "2.0.0-experimental.8618508",
-        "@solana/spl-type-length-value": "0.1.0"
-      },
-      "engines": {
-        "node": ">=16"
-      },
-      "peerDependencies": {
-        "@solana/web3.js": "^1.87.6"
-      }
-    },
-    "node_modules/@solana/spl-type-length-value": {
-      "version": "0.1.0",
-      "resolved": "https://registry.npmjs.org/@solana/spl-type-length-value/-/spl-type-length-value-0.1.0.tgz",
-      "integrity": "sha512-JBMGB0oR4lPttOZ5XiUGyvylwLQjt1CPJa6qQ5oM+MBCndfjz2TKKkw0eATlLLcYmq1jBVsNlJ2cD6ns2GR7lA==",
-      "dependencies": {
-        "buffer": "^6.0.3"
-      },
-      "engines": {
-        "node": ">=16"
-      }
-    },
-    "node_modules/@solana/web3.js": {
-      "version": "1.89.1",
-      "resolved": "https://registry.npmjs.org/@solana/web3.js/-/web3.js-1.89.1.tgz",
-      "integrity": "sha512-t9TTLtPQxtQB3SAf/5E8xPXfVDsC6WGOsgKY02l2cbe0HLymT7ynE8Hu48Lk5qynHCquj6nhISfEHcjMkYpu/A==",
-      "dependencies": {
-        "@babel/runtime": "^7.23.4",
-        "@noble/curves": "^1.2.0",
-        "@noble/hashes": "^1.3.2",
-        "@solana/buffer-layout": "^4.0.1",
-        "agentkeepalive": "^4.5.0",
-        "bigint-buffer": "^1.1.5",
-        "bn.js": "^5.2.1",
-        "borsh": "^0.7.0",
-        "bs58": "^4.0.1",
-        "buffer": "6.0.3",
-        "fast-stable-stringify": "^1.0.0",
-        "jayson": "^4.1.0",
-        "node-fetch": "^2.7.0",
-        "rpc-websockets": "^7.5.1",
-        "superstruct": "^0.14.2"
-      }
-    },
-    "node_modules/@solana/web3.js/node_modules/borsh": {
-      "version": "0.7.0",
-      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.7.0.tgz",
-      "integrity": "sha512-CLCsZGIBCFnPtkNnieW/a8wmreDmfUtjU2m9yHrzPXIlNbqVs0AQrSatSG6vdNYUqdc83tkQi2eHfF98ubzQLA==",
-      "dependencies": {
-        "bn.js": "^5.2.0",
-        "bs58": "^4.0.0",
-        "text-encoding-utf-8": "^1.0.2"
-      }
-    },
-    "node_modules/@types/connect": {
-      "version": "3.4.38",
-      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
-      "integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
-      "dependencies": {
-        "@types/node": "*"
-      }
-    },
-    "node_modules/@types/node": {
-      "version": "12.20.55",
-      "resolved": "https://registry.npmjs.org/@types/node/-/node-12.20.55.tgz",
-      "integrity": "sha512-J8xLz7q2OFulZ2cyGTLE1TbbZcjpno7FaN6zdJNrgAdrJ+DZzh/uFR6YrTb4C+nXakvud8Q4+rbhoIWlYQbUFQ=="
-    },
-    "node_modules/@types/ws": {
-      "version": "7.4.7",
-      "resolved": "https://registry.npmjs.org/@types/ws/-/ws-7.4.7.tgz",
-      "integrity": "sha512-JQbbmxZTZehdc2iszGKs5oC3NFnjeay7mtAWrdt7qNtAVK0g19muApzAy4bm9byz79xa2ZnO/BOBC2R8RC5Lww==",
-      "dependencies": {
-        "@types/node": "*"
-      }
-    },
-    "node_modules/agentkeepalive": {
-      "version": "4.5.0",
-      "resolved": "https://registry.npmjs.org/agentkeepalive/-/agentkeepalive-4.5.0.tgz",
-      "integrity": "sha512-5GG/5IbQQpC9FpkRGsSvZI5QYeSCzlJHdpBQntCsuTOxhKD8lqKhrleg2Yi7yvMIf82Ycmmqln9U8V9qwEiJew==",
-      "dependencies": {
-        "humanize-ms": "^1.2.1"
-      },
-      "engines": {
-        "node": ">= 8.0.0"
-      }
-    },
-    "node_modules/asynckit": {
-      "version": "0.4.0",
-      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
-      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="
-    },
-    "node_modules/axios": {
-      "version": "1.6.4",
-      "resolved": "https://registry.npmjs.org/axios/-/axios-1.6.4.tgz",
-      "integrity": "sha512-heJnIs6N4aa1eSthhN9M5ioILu8Wi8vmQW9iHQ9NUvfkJb0lEEDUiIdQNAuBtfUt3FxReaKdpQA5DbmMOqzF/A==",
-      "dependencies": {
-        "follow-redirects": "^1.15.4",
-        "form-data": "^4.0.0",
-        "proxy-from-env": "^1.1.0"
-      }
-    },
-    "node_modules/base-x": {
-      "version": "3.0.9",
-      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
-      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
-      "dependencies": {
-        "safe-buffer": "^5.0.1"
-      }
-    },
-    "node_modules/base64-js": {
-      "version": "1.5.1",
-      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
-      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ]
-    },
-    "node_modules/big.js": {
-      "version": "6.2.1",
-      "resolved": "https://registry.npmjs.org/big.js/-/big.js-6.2.1.tgz",
-      "integrity": "sha512-bCtHMwL9LeDIozFn+oNhhFoq+yQ3BNdnsLSASUxLciOb1vgvpHsIO1dsENiGMgbb4SkP5TrzWzRiLddn8ahVOQ==",
-      "engines": {
-        "node": "*"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/bigjs"
-      }
-    },
-    "node_modules/bigint-buffer": {
-      "version": "1.1.5",
-      "resolved": "https://registry.npmjs.org/bigint-buffer/-/bigint-buffer-1.1.5.tgz",
-      "integrity": "sha512-trfYco6AoZ+rKhKnxA0hgX0HAbVP/s808/EuDSe2JDzUnCp/xAsli35Orvk67UrTEcwuxZqYZDmfA2RXJgxVvA==",
-      "hasInstallScript": true,
-      "dependencies": {
-        "bindings": "^1.3.0"
-      },
-      "engines": {
-        "node": ">= 10.0.0"
-      }
-    },
-    "node_modules/bignumber.js": {
-      "version": "9.1.2",
-      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.1.2.tgz",
-      "integrity": "sha512-2/mKyZH9K85bzOEfhXDBFZTGd1CTs+5IHpeFQo9luiBG7hghdC851Pj2WAhb6E3R6b9tZj/XKhbg4fum+Kepug==",
-      "engines": {
-        "node": "*"
-      }
-    },
-    "node_modules/bindings": {
-      "version": "1.5.0",
-      "resolved": "https://registry.npmjs.org/bindings/-/bindings-1.5.0.tgz",
-      "integrity": "sha512-p2q/t/mhvuOj/UeLlV6566GD/guowlr0hHxClI0W9m7MWYkL1F0hLo+0Aexs9HSPCtR1SXQ0TD3MMKrXZajbiQ==",
-      "dependencies": {
-        "file-uri-to-path": "1.0.0"
-      }
-    },
-    "node_modules/bn.js": {
-      "version": "5.2.1",
-      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.1.tgz",
-      "integrity": "sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ=="
-    },
-    "node_modules/borsh": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/borsh/-/borsh-2.0.0.tgz",
-      "integrity": "sha512-kc9+BgR3zz9+cjbwM8ODoUB4fs3X3I5A/HtX7LZKxCLaMrEeDFoBpnhZY//DTS1VZBSs6S5v46RZRbZjRFspEg=="
-    },
-    "node_modules/bs58": {
-      "version": "4.0.1",
-      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
-      "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
-      "dependencies": {
-        "base-x": "^3.0.2"
-      }
-    },
-    "node_modules/bs64": {
-      "version": "0.1.0",
-      "resolved": "https://registry.npmjs.org/bs64/-/bs64-0.1.0.tgz",
-      "integrity": "sha512-0rK20fzECR6FFR2VRhvDOUTlPmWFS8PddRtk9KNqsfj9S8++WHSDKzf0f9S/89sthwBg+bEgFitRLEC6COTi8Q==",
-      "dependencies": {
-        "convert-string": "~0.1.0"
-      }
-    },
-    "node_modules/buffer": {
-      "version": "6.0.3",
-      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
-      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ],
-      "dependencies": {
-        "base64-js": "^1.3.1",
-        "ieee754": "^1.2.1"
-      }
-    },
-    "node_modules/buffer-layout": {
-      "version": "1.2.2",
-      "resolved": "https://registry.npmjs.org/buffer-layout/-/buffer-layout-1.2.2.tgz",
-      "integrity": "sha512-kWSuLN694+KTk8SrYvCqwP2WcgQjoRCiF5b4QDvkkz8EmgD+aWAIceGFKMIAdmF/pH+vpgNV3d3kAKorcdAmWA==",
-      "engines": {
-        "node": ">=4.5"
-      }
-    },
-    "node_modules/bufferutil": {
-      "version": "4.0.8",
-      "resolved": "https://registry.npmjs.org/bufferutil/-/bufferutil-4.0.8.tgz",
-      "integrity": "sha512-4T53u4PdgsXqKaIctwF8ifXlRTTmEPJ8iEPWFdGZvcf7sbwYo6FKFEX9eNNAnzFZ7EzJAQ3CJeOtCRA4rDp7Pw==",
-      "hasInstallScript": true,
-      "optional": true,
-      "dependencies": {
-        "node-gyp-build": "^4.3.0"
-      },
-      "engines": {
-        "node": ">=6.14.2"
-      }
-    },
-    "node_modules/camelcase": {
-      "version": "5.3.1",
-      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
-      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/combined-stream": {
-      "version": "1.0.8",
-      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
-      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
-      "dependencies": {
-        "delayed-stream": "~1.0.0"
-      },
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
-    "node_modules/commander": {
-      "version": "2.20.3",
-      "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
-      "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ=="
-    },
-    "node_modules/convert-string": {
-      "version": "0.1.0",
-      "resolved": "https://registry.npmjs.org/convert-string/-/convert-string-0.1.0.tgz",
-      "integrity": "sha512-1KX9ESmtl8xpT2LN2tFnKSbV4NiarbVi8DVb39ZriijvtTklyrT+4dT1wsGMHKD3CJUjXgvJzstm9qL9ICojGA=="
-    },
-    "node_modules/crypto-hash": {
-      "version": "1.3.0",
-      "resolved": "https://registry.npmjs.org/crypto-hash/-/crypto-hash-1.3.0.tgz",
-      "integrity": "sha512-lyAZ0EMyjDkVvz8WOeVnuCPvKVBXcMv1l5SVqO1yC7PzTwrD/pPje/BIRbWhMoPe436U+Y2nD7f5bFx0kt+Sbg==",
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/decimal.js": {
-      "version": "10.4.3",
-      "resolved": "https://registry.npmjs.org/decimal.js/-/decimal.js-10.4.3.tgz",
-      "integrity": "sha512-VBBaLc1MgL5XpzgIP7ny5Z6Nx3UrRkIViUkPUdtl9aya5amy3De1gsUUSB1g3+3sExYNjCAsAznmukyxCb1GRA=="
-    },
-    "node_modules/decimal.js-light": {
-      "version": "2.5.1",
-      "resolved": "https://registry.npmjs.org/decimal.js-light/-/decimal.js-light-2.5.1.tgz",
-      "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg=="
-    },
-    "node_modules/delay": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/delay/-/delay-5.0.0.tgz",
-      "integrity": "sha512-ReEBKkIfe4ya47wlPYf/gu5ib6yUG0/Aez0JQZQz94kiWtRQvZIQbTiehsnwHvLSWJnQdhVeqYue7Id1dKr0qw==",
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/delayed-stream": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
-      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
-      "engines": {
-        "node": ">=0.4.0"
-      }
-    },
-    "node_modules/dot-case": {
-      "version": "3.0.4",
-      "resolved": "https://registry.npmjs.org/dot-case/-/dot-case-3.0.4.tgz",
-      "integrity": "sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w==",
-      "dependencies": {
-        "no-case": "^3.0.4",
-        "tslib": "^2.0.3"
-      }
-    },
-    "node_modules/dotenv": {
-      "version": "10.0.0",
-      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-10.0.0.tgz",
-      "integrity": "sha512-rlBi9d8jpv9Sf1klPjNfFAuWDjKLwTIJJ/VxtoTwIR6hnZxcEOQCZg2oIL3MWBYw5GpUDKOEnND7LXTbIpQ03Q==",
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/es6-promise": {
-      "version": "4.2.8",
-      "resolved": "https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz",
-      "integrity": "sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w=="
-    },
-    "node_modules/es6-promisify": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/es6-promisify/-/es6-promisify-5.0.0.tgz",
-      "integrity": "sha512-C+d6UdsYDk0lMebHNR4S2NybQMMngAOnOwYBQjTOiv0MkoJMP0Myw2mgpDLBcpfCmRLxyFqYhS/CfOENq4SJhQ==",
-      "dependencies": {
-        "es6-promise": "^4.0.3"
-      }
-    },
-    "node_modules/eventemitter3": {
-      "version": "4.0.7",
-      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
-      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw=="
-    },
-    "node_modules/eyes": {
-      "version": "0.1.8",
-      "resolved": "https://registry.npmjs.org/eyes/-/eyes-0.1.8.tgz",
-      "integrity": "sha512-GipyPsXO1anza0AOZdy69Im7hGFCNB7Y/NGjDlZGJ3GJJLtwNSb2vrzYrTYJRrRloVx7pl+bhUaTB8yiccPvFQ==",
-      "engines": {
-        "node": "> 0.1.90"
-      }
-    },
-    "node_modules/fast-stable-stringify": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/fast-stable-stringify/-/fast-stable-stringify-1.0.0.tgz",
-      "integrity": "sha512-wpYMUmFu5f00Sm0cj2pfivpmawLZ0NKdviQ4w9zJeR8JVtOpOxHmLaJuj0vxvGqMJQWyP/COUkF75/57OKyRag=="
-    },
-    "node_modules/fastestsmallesttextencoderdecoder": {
-      "version": "1.0.22",
-      "resolved": "https://registry.npmjs.org/fastestsmallesttextencoderdecoder/-/fastestsmallesttextencoderdecoder-1.0.22.tgz",
-      "integrity": "sha512-Pb8d48e+oIuY4MaM64Cd7OW1gt4nxCHs7/ddPPZ/Ic3sg8yVGM7O9wDvZ7us6ScaUupzM+pfBolwtYhN1IxBIw==",
-      "peer": true
-    },
-    "node_modules/fecha": {
-      "version": "4.2.3",
-      "resolved": "https://registry.npmjs.org/fecha/-/fecha-4.2.3.tgz",
-      "integrity": "sha512-OP2IUU6HeYKJi3i0z4A19kHMQoLVs4Hc+DPqqxI2h/DPZHTm/vjsfC6P0b4jCMy14XizLBqvndQ+UilD7707Jw=="
-    },
-    "node_modules/file-uri-to-path": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/file-uri-to-path/-/file-uri-to-path-1.0.0.tgz",
-      "integrity": "sha512-0Zt+s3L7Vf1biwWZ29aARiVYLx7iMGnEUl9x33fbB/j3jR81u/O2LbqK+Bm1CDSNDKVtJ/YjwY7TUd5SkeLQLw=="
-    },
-    "node_modules/find": {
-      "version": "0.3.0",
-      "resolved": "https://registry.npmjs.org/find/-/find-0.3.0.tgz",
-      "integrity": "sha512-iSd+O4OEYV/I36Zl8MdYJO0xD82wH528SaCieTVHhclgiYNe9y+yPKSwK+A7/WsmHL1EZ+pYUJBXWTL5qofksw==",
-      "dependencies": {
-        "traverse-chain": "~0.1.0"
-      }
-    },
-    "node_modules/follow-redirects": {
-      "version": "1.15.4",
-      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.4.tgz",
-      "integrity": "sha512-Cr4D/5wlrb0z9dgERpUL3LrmPKVDsETIJhaCMeDfuFYcqa5bldGV6wBsAN6X/vxlXQtFBMrXdXxdL8CbDTGniw==",
-      "funding": [
-        {
-          "type": "individual",
-          "url": "https://github.com/sponsors/RubenVerborgh"
-        }
-      ],
-      "engines": {
-        "node": ">=4.0"
-      },
-      "peerDependenciesMeta": {
-        "debug": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/form-data": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
-      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
-      "dependencies": {
-        "asynckit": "^0.4.0",
-        "combined-stream": "^1.0.8",
-        "mime-types": "^2.1.12"
-      },
-      "engines": {
-        "node": ">= 6"
-      }
-    },
-    "node_modules/humanize-ms": {
-      "version": "1.2.1",
-      "resolved": "https://registry.npmjs.org/humanize-ms/-/humanize-ms-1.2.1.tgz",
-      "integrity": "sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==",
-      "dependencies": {
-        "ms": "^2.0.0"
-      }
-    },
-    "node_modules/ieee754": {
-      "version": "1.2.1",
-      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
-      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ]
-    },
-    "node_modules/isomorphic-ws": {
-      "version": "4.0.1",
-      "resolved": "https://registry.npmjs.org/isomorphic-ws/-/isomorphic-ws-4.0.1.tgz",
-      "integrity": "sha512-BhBvN2MBpWTaSHdWRb/bwdZJ1WaehQ2L1KngkCkfLUGF0mAWAT1sQUQacEmQ0jXkFw/czDXPNQSL5u2/Krsz1w==",
-      "peerDependencies": {
-        "ws": "*"
-      }
-    },
-    "node_modules/jayson": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/jayson/-/jayson-4.1.0.tgz",
-      "integrity": "sha512-R6JlbyLN53Mjku329XoRT2zJAE6ZgOQ8f91ucYdMCD4nkGCF9kZSrcGXpHIU4jeKj58zUZke2p+cdQchU7Ly7A==",
-      "dependencies": {
-        "@types/connect": "^3.4.33",
-        "@types/node": "^12.12.54",
-        "@types/ws": "^7.4.4",
-        "commander": "^2.20.3",
-        "delay": "^5.0.0",
-        "es6-promisify": "^5.0.0",
-        "eyes": "^0.1.8",
-        "isomorphic-ws": "^4.0.1",
-        "json-stringify-safe": "^5.0.1",
-        "JSONStream": "^1.3.5",
-        "uuid": "^8.3.2",
-        "ws": "^7.4.5"
-      },
-      "bin": {
-        "jayson": "bin/jayson.js"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/js-sha256": {
-      "version": "0.9.0",
-      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
-      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
-    },
-    "node_modules/json-stringify-safe": {
-      "version": "5.0.1",
-      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
-      "integrity": "sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA=="
-    },
-    "node_modules/jsonparse": {
-      "version": "1.3.1",
-      "resolved": "https://registry.npmjs.org/jsonparse/-/jsonparse-1.3.1.tgz",
-      "integrity": "sha512-POQXvpdL69+CluYsillJ7SUhKvytYjW9vG/GKpnf+xP8UWgYEM/RaMzHHofbALDiKbbP1W8UEYmgGl39WkPZsg==",
-      "engines": [
-        "node >= 0.2.0"
-      ]
-    },
-    "node_modules/JSONStream": {
-      "version": "1.3.5",
-      "resolved": "https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.5.tgz",
-      "integrity": "sha512-E+iruNOY8VV9s4JEbe1aNEm6MiszPRr/UfcHMz0TQh1BXSxHK+ASV1R6W4HpjBhSeS+54PIsAMCBmwD06LLsqQ==",
-      "dependencies": {
-        "jsonparse": "^1.2.0",
-        "through": ">=2.2.7 <3"
-      },
-      "bin": {
-        "JSONStream": "bin.js"
-      },
-      "engines": {
-        "node": "*"
-      }
-    },
-    "node_modules/lodash": {
-      "version": "4.17.21",
-      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
-      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
-    },
-    "node_modules/lower-case": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/lower-case/-/lower-case-2.0.2.tgz",
-      "integrity": "sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==",
-      "dependencies": {
-        "tslib": "^2.0.3"
-      }
-    },
-    "node_modules/mime-db": {
-      "version": "1.52.0",
-      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
-      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/mime-types": {
-      "version": "2.1.35",
-      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
-      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
-      "dependencies": {
-        "mime-db": "1.52.0"
-      },
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/ms": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
-    },
-    "node_modules/no-case": {
-      "version": "3.0.4",
-      "resolved": "https://registry.npmjs.org/no-case/-/no-case-3.0.4.tgz",
-      "integrity": "sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==",
-      "dependencies": {
-        "lower-case": "^2.0.2",
-        "tslib": "^2.0.3"
-      }
-    },
-    "node_modules/node": {
-      "version": "21.2.0",
-      "resolved": "https://registry.npmjs.org/node/-/node-21.2.0.tgz",
-      "integrity": "sha512-oiHX7SXGdO1wyg0/lZ1ZMy1iS7GgumsT5Ptt5BOye1WniC8OJ2TtYRuWfqNoKrUlYzI4+Bv1+NH5eDgxuThU2A==",
-      "hasInstallScript": true,
-      "dependencies": {
-        "node-bin-setup": "^1.0.0"
-      },
-      "bin": {
-        "node": "bin/node"
-      },
-      "engines": {
-        "npm": ">=5.0.0"
-      }
-    },
-    "node_modules/node-bin-setup": {
-      "version": "1.1.3",
-      "resolved": "https://registry.npmjs.org/node-bin-setup/-/node-bin-setup-1.1.3.tgz",
-      "integrity": "sha512-opgw9iSCAzT2+6wJOETCpeRYAQxSopqQ2z+N6BXwIMsQQ7Zj5M8MaafQY8JMlolRR6R1UXg2WmhKp0p9lSOivg=="
-    },
-    "node_modules/node-fetch": {
-      "version": "2.7.0",
-      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
-      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
-      "dependencies": {
-        "whatwg-url": "^5.0.0"
-      },
-      "engines": {
-        "node": "4.x || >=6.0.0"
-      },
-      "peerDependencies": {
-        "encoding": "^0.1.0"
-      },
-      "peerDependenciesMeta": {
-        "encoding": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/node-gyp-build": {
-      "version": "4.7.1",
-      "resolved": "https://registry.npmjs.org/node-gyp-build/-/node-gyp-build-4.7.1.tgz",
-      "integrity": "sha512-wTSrZ+8lsRRa3I3H8Xr65dLWSgCvY2l4AOnaeKdPA9TB/WYMPaTcrzf3rXvFoVvjKNVnu0CcWSx54qq9GKRUYg==",
-      "optional": true,
-      "bin": {
-        "node-gyp-build": "bin.js",
-        "node-gyp-build-optional": "optional.js",
-        "node-gyp-build-test": "build-test.js"
-      }
-    },
-    "node_modules/pako": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/pako/-/pako-2.1.0.tgz",
-      "integrity": "sha512-w+eufiZ1WuJYgPXbV/PO3NCMEc3xqylkKHzp8bxp1uW4qaSNQUkwmLLEc3kKsfz8lpV1F8Ht3U1Cm+9Srog2ug=="
-    },
-    "node_modules/proxy-from-env": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
-      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
-    },
-    "node_modules/regenerator-runtime": {
-      "version": "0.14.1",
-      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.14.1.tgz",
-      "integrity": "sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw=="
-    },
-    "node_modules/rpc-websockets": {
-      "version": "7.9.0",
-      "resolved": "https://registry.npmjs.org/rpc-websockets/-/rpc-websockets-7.9.0.tgz",
-      "integrity": "sha512-DwKewQz1IUA5wfLvgM8wDpPRcr+nWSxuFxx5CbrI2z/MyyZ4nXLM86TvIA+cI1ZAdqC8JIBR1mZR55dzaLU+Hw==",
-      "dependencies": {
-        "@babel/runtime": "^7.17.2",
-        "eventemitter3": "^4.0.7",
-        "uuid": "^8.3.2",
-        "ws": "^8.5.0"
-      },
-      "funding": {
-        "type": "paypal",
-        "url": "https://paypal.me/kozjak"
-      },
-      "optionalDependencies": {
-        "bufferutil": "^4.0.1",
-        "utf-8-validate": "^5.0.2"
-      }
-    },
-    "node_modules/rpc-websockets/node_modules/ws": {
-      "version": "8.16.0",
-      "resolved": "https://registry.npmjs.org/ws/-/ws-8.16.0.tgz",
-      "integrity": "sha512-HS0c//TP7Ina87TfiPUz1rQzMhHrl/SG2guqRcTOIUYD2q8uhUdNHZYJUaQ8aTGPzCh+c6oawMKW35nFl1dxyQ==",
-      "engines": {
-        "node": ">=10.0.0"
-      },
-      "peerDependencies": {
-        "bufferutil": "^4.0.1",
-        "utf-8-validate": ">=5.0.2"
-      },
-      "peerDependenciesMeta": {
-        "bufferutil": {
-          "optional": true
-        },
-        "utf-8-validate": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/safe-buffer": {
-      "version": "5.2.1",
-      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
-      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ]
-    },
-    "node_modules/snake-case": {
-      "version": "3.0.4",
-      "resolved": "https://registry.npmjs.org/snake-case/-/snake-case-3.0.4.tgz",
-      "integrity": "sha512-LAOh4z89bGQvl9pFfNF8V146i7o7/CqFPbqzYgP+yYzDIDeS9HaNFtXABamRW+AQzEVODcvE79ljJ+8a9YSdMg==",
-      "dependencies": {
-        "dot-case": "^3.0.4",
-        "tslib": "^2.0.3"
-      }
-    },
-    "node_modules/superstruct": {
-      "version": "0.14.2",
-      "resolved": "https://registry.npmjs.org/superstruct/-/superstruct-0.14.2.tgz",
-      "integrity": "sha512-nPewA6m9mR3d6k7WkZ8N8zpTWfenFH3q9pA2PkuiZxINr9DKB2+40wEQf0ixn8VaGuJ78AB6iWOtStI+/4FKZQ=="
-    },
-    "node_modules/text-encoding-utf-8": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
-      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
-    },
-    "node_modules/through": {
-      "version": "2.3.8",
-      "resolved": "https://registry.npmjs.org/through/-/through-2.3.8.tgz",
-      "integrity": "sha512-w89qg7PI8wAdvX60bMDP+bFoD5Dvhm9oLheFp5O4a2QF0cSBGsBX4qZmadPMvVqlLJBBci+WqGGOAPvcDeNSVg=="
-    },
-    "node_modules/toformat": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/toformat/-/toformat-2.0.0.tgz",
-      "integrity": "sha512-03SWBVop6nU8bpyZCx7SodpYznbZF5R4ljwNLBcTQzKOD9xuihRo/psX58llS1BMFhhAI08H3luot5GoXJz2pQ=="
-    },
-    "node_modules/toml": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/toml/-/toml-3.0.0.tgz",
-      "integrity": "sha512-y/mWCZinnvxjTKYhJ+pYxwD0mRLVvOtdS2Awbgxln6iEnt4rk0yBxeSBHkGJcPucRiG0e55mwWp+g/05rsrd6w=="
-    },
-    "node_modules/tr46": {
-      "version": "0.0.3",
-      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
-      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
-    },
-    "node_modules/traverse-chain": {
-      "version": "0.1.0",
-      "resolved": "https://registry.npmjs.org/traverse-chain/-/traverse-chain-0.1.0.tgz",
-      "integrity": "sha512-up6Yvai4PYKhpNp5PkYtx50m3KbwQrqDwbuZP/ItyL64YEWHAvH6Md83LFLV/GRSk/BoUVwwgUzX6SOQSbsfAg=="
-    },
-    "node_modules/tslib": {
-      "version": "2.6.2",
-      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.6.2.tgz",
-      "integrity": "sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q=="
-    },
-    "node_modules/utf-8-validate": {
-      "version": "5.0.10",
-      "resolved": "https://registry.npmjs.org/utf-8-validate/-/utf-8-validate-5.0.10.tgz",
-      "integrity": "sha512-Z6czzLq4u8fPOyx7TU6X3dvUZVvoJmxSQ+IcrlmagKhilxlhZgxPK6C5Jqbkw1IDUmFTM+cz9QDnnLTwDz/2gQ==",
-      "hasInstallScript": true,
-      "optional": true,
-      "dependencies": {
-        "node-gyp-build": "^4.3.0"
-      },
-      "engines": {
-        "node": ">=6.14.2"
-      }
-    },
-    "node_modules/uuid": {
-      "version": "8.3.2",
-      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
-      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
-      "bin": {
-        "uuid": "dist/bin/uuid"
-      }
-    },
-    "node_modules/webidl-conversions": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
-      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
-    },
-    "node_modules/whatwg-url": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
-      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
-      "dependencies": {
-        "tr46": "~0.0.3",
-        "webidl-conversions": "^3.0.0"
-      }
-    },
-    "node_modules/ws": {
-      "version": "7.5.9",
-      "resolved": "https://registry.npmjs.org/ws/-/ws-7.5.9.tgz",
-      "integrity": "sha512-F+P9Jil7UiSKSkppIiD94dN07AwvFixvLIj1Og1Rl9GGMuNipJnV9JzjD6XuqmAeiswGvUmNLjr5cFuXwNS77Q==",
-      "engines": {
-        "node": ">=8.3.0"
-      },
-      "peerDependencies": {
-        "bufferutil": "^4.0.1",
-        "utf-8-validate": "^5.0.2"
-      },
-      "peerDependenciesMeta": {
-        "bufferutil": {
-          "optional": true
-        },
-        "utf-8-validate": {
-          "optional": true
-        }
-      }
-    }
-  },
-  "dependencies": {
-    "@babel/runtime": {
-      "version": "7.23.7",
-      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.23.7.tgz",
-      "integrity": "sha512-w06OXVOFso7LcbzMiDGt+3X7Rh7Ho8MmgPoWU3rarH+8upf+wSU/grlGbWzQyr3DkdN6ZeuMFjpdwW0Q+HxobA==",
-      "requires": {
-        "regenerator-runtime": "^0.14.0"
-      }
-    },
-    "@noble/curves": {
-      "version": "1.3.0",
-      "resolved": "https://registry.npmjs.org/@noble/curves/-/curves-1.3.0.tgz",
-      "integrity": "sha512-t01iSXPuN+Eqzb4eBX0S5oubSqXbK/xXa1Ne18Hj8f9pStxztHCE2gfboSp/dZRLSqfuLpRK2nDXDK+W9puocA==",
-      "requires": {
-        "@noble/hashes": "1.3.3"
-      }
-    },
-    "@noble/hashes": {
-      "version": "1.3.3",
-      "resolved": "https://registry.npmjs.org/@noble/hashes/-/hashes-1.3.3.tgz",
-      "integrity": "sha512-V7/fPHgl+jsVPXqqeOzT8egNj2iBIVt+ECeMMG8TdcnTikP3oaBtUVqpT/gYCR68aEBJSF+XbYUxStjbFMqIIA=="
-    },
-    "@openbook-dex/openbook": {
-      "version": "0.0.9",
-      "resolved": "https://registry.npmjs.org/@openbook-dex/openbook/-/openbook-0.0.9.tgz",
-      "integrity": "sha512-tJPqHS7Tp/Gu3MC/MAZQBUm62WhdBPLzCcId3p62eHV6cRwNqflr0j+eKDh0Lfd5CAnkB1a9wZoVte074+zB5A==",
-      "requires": {
-        "@project-serum/anchor": "^0.11.1",
-        "@solana/spl-token": "^0.1.6",
-        "@solana/web3.js": "^1.70.0",
-        "bn.js": "^5.2.1",
-        "buffer-layout": "^1.2.0"
-      },
-      "dependencies": {
-        "@solana/spl-token": {
-          "version": "0.1.8",
-          "resolved": "https://registry.npmjs.org/@solana/spl-token/-/spl-token-0.1.8.tgz",
-          "integrity": "sha512-LZmYCKcPQDtJgecvWOgT/cnoIQPWjdH+QVyzPcFvyDUiT0DiRjZaam4aqNUyvchLFhzgunv3d9xOoyE34ofdoQ==",
-          "requires": {
-            "@babel/runtime": "^7.10.5",
-            "@solana/web3.js": "^1.21.0",
-            "bn.js": "^5.1.0",
-            "buffer": "6.0.3",
-            "buffer-layout": "^1.2.0",
-            "dotenv": "10.0.0"
-          }
-        }
-      }
-    },
-    "@project-serum/anchor": {
-      "version": "0.11.1",
-      "resolved": "https://registry.npmjs.org/@project-serum/anchor/-/anchor-0.11.1.tgz",
-      "integrity": "sha512-oIdm4vTJkUy6GmE6JgqDAuQPKI7XM4TPJkjtoIzp69RZe0iAD9JP2XHx7lV1jLdYXeYHqDXfBt3zcq7W91K6PA==",
-      "requires": {
-        "@project-serum/borsh": "^0.2.2",
-        "@solana/web3.js": "^1.17.0",
-        "base64-js": "^1.5.1",
-        "bn.js": "^5.1.2",
-        "bs58": "^4.0.1",
-        "buffer-layout": "^1.2.0",
-        "camelcase": "^5.3.1",
-        "crypto-hash": "^1.3.0",
-        "eventemitter3": "^4.0.7",
-        "find": "^0.3.0",
-        "js-sha256": "^0.9.0",
-        "pako": "^2.0.3",
-        "snake-case": "^3.0.4",
-        "toml": "^3.0.0"
-      }
-    },
-    "@project-serum/borsh": {
-      "version": "0.2.5",
-      "resolved": "https://registry.npmjs.org/@project-serum/borsh/-/borsh-0.2.5.tgz",
-      "integrity": "sha512-UmeUkUoKdQ7rhx6Leve1SssMR/Ghv8qrEiyywyxSWg7ooV7StdpPBhciiy5eB3T0qU1BXvdRNC8TdrkxK7WC5Q==",
-      "requires": {
-        "bn.js": "^5.1.2",
-        "buffer-layout": "^1.2.0"
-      }
-    },
-    "@raydium-io/raydium-sdk": {
-      "version": "1.3.1-beta.46",
-      "resolved": "https://registry.npmjs.org/@raydium-io/raydium-sdk/-/raydium-sdk-1.3.1-beta.46.tgz",
-      "integrity": "sha512-hGieqaCeqszEJGRBbNNveXlZk8EIsjV9PTwodx8SWABu1ZZODE8SGRe5Vuq9Jtv1LZzL7jY3+P5UnQxrdQLQUA==",
-      "requires": {
-        "@solana/buffer-layout": "^4.0.1",
-        "@solana/spl-token": "^0.3.9",
-        "axios": "^1.6.2",
-        "big.js": "^6.2.1",
-        "bn.js": "^5.2.1",
-        "decimal.js": "^10.4.3",
-        "decimal.js-light": "^2.5.1",
-        "fecha": "^4.2.3",
-        "lodash": "^4.17.21",
-        "toformat": "^2.0.0"
-      }
-    },
-    "@solana/buffer-layout": {
-      "version": "4.0.1",
-      "resolved": "https://registry.npmjs.org/@solana/buffer-layout/-/buffer-layout-4.0.1.tgz",
-      "integrity": "sha512-E1ImOIAD1tBZFRdjeM4/pzTiTApC0AOBGwyAMS4fwIodCWArzJ3DWdoh8cKxeFM2fElkxBh2Aqts1BPC373rHA==",
-      "requires": {
-        "buffer": "~6.0.3"
-      }
-    },
-    "@solana/buffer-layout-utils": {
-      "version": "0.2.0",
-      "resolved": "https://registry.npmjs.org/@solana/buffer-layout-utils/-/buffer-layout-utils-0.2.0.tgz",
-      "integrity": "sha512-szG4sxgJGktbuZYDg2FfNmkMi0DYQoVjN2h7ta1W1hPrwzarcFLBq9UpX1UjNXsNpT9dn+chgprtWGioUAr4/g==",
-      "requires": {
-        "@solana/buffer-layout": "^4.0.0",
-        "@solana/web3.js": "^1.32.0",
-        "bigint-buffer": "^1.1.5",
-        "bignumber.js": "^9.0.1"
-      }
-    },
-    "@solana/codecs-core": {
-      "version": "2.0.0-experimental.8618508",
-      "resolved": "https://registry.npmjs.org/@solana/codecs-core/-/codecs-core-2.0.0-experimental.8618508.tgz",
-      "integrity": "sha512-JCz7mKjVKtfZxkuDtwMAUgA7YvJcA2BwpZaA1NOLcted4OMC4Prwa3DUe3f3181ixPYaRyptbF0Ikq2MbDkYEA=="
-    },
-    "@solana/codecs-data-structures": {
-      "version": "2.0.0-experimental.8618508",
-      "resolved": "https://registry.npmjs.org/@solana/codecs-data-structures/-/codecs-data-structures-2.0.0-experimental.8618508.tgz",
-      "integrity": "sha512-sLpjL9sqzaDdkloBPV61Rht1tgaKq98BCtIKRuyscIrmVPu3wu0Bavk2n/QekmUzaTsj7K1pVSniM0YqCdnEBw==",
-      "requires": {
-        "@solana/codecs-core": "2.0.0-experimental.8618508",
-        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
-      }
-    },
-    "@solana/codecs-numbers": {
-      "version": "2.0.0-experimental.8618508",
-      "resolved": "https://registry.npmjs.org/@solana/codecs-numbers/-/codecs-numbers-2.0.0-experimental.8618508.tgz",
-      "integrity": "sha512-EXQKfzFr3CkKKNzKSZPOOOzchXsFe90TVONWsSnVkonO9z+nGKALE0/L9uBmIFGgdzhhU9QQVFvxBMclIDJo2Q==",
-      "requires": {
-        "@solana/codecs-core": "2.0.0-experimental.8618508"
-      }
-    },
-    "@solana/codecs-strings": {
-      "version": "2.0.0-experimental.8618508",
-      "resolved": "https://registry.npmjs.org/@solana/codecs-strings/-/codecs-strings-2.0.0-experimental.8618508.tgz",
-      "integrity": "sha512-b2yhinr1+oe+JDmnnsV0641KQqqDG8AQ16Z/x7GVWO+AWHMpRlHWVXOq8U1yhPMA4VXxl7i+D+C6ql0VGFp0GA==",
-      "requires": {
-        "@solana/codecs-core": "2.0.0-experimental.8618508",
-        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
-      }
-    },
-    "@solana/options": {
-      "version": "2.0.0-experimental.8618508",
-      "resolved": "https://registry.npmjs.org/@solana/options/-/options-2.0.0-experimental.8618508.tgz",
-      "integrity": "sha512-fy/nIRAMC3QHvnKi63KEd86Xr/zFBVxNW4nEpVEU2OT0gCEKwHY4Z55YHf7XujhyuM3PNpiBKg/YYw5QlRU4vg==",
-      "requires": {
-        "@solana/codecs-core": "2.0.0-experimental.8618508",
-        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
-      }
-    },
-    "@solana/spl-token": {
-      "version": "0.3.11",
-      "resolved": "https://registry.npmjs.org/@solana/spl-token/-/spl-token-0.3.11.tgz",
-      "integrity": "sha512-bvohO3rIMSVL24Pb+I4EYTJ6cL82eFpInEXD/I8K8upOGjpqHsKUoAempR/RnUlI1qSFNyFlWJfu6MNUgfbCQQ==",
-      "requires": {
-        "@solana/buffer-layout": "^4.0.0",
-        "@solana/buffer-layout-utils": "^0.2.0",
-        "@solana/spl-token-metadata": "^0.1.2",
-        "buffer": "^6.0.3"
-      }
-    },
-    "@solana/spl-token-metadata": {
-      "version": "0.1.2",
-      "resolved": "https://registry.npmjs.org/@solana/spl-token-metadata/-/spl-token-metadata-0.1.2.tgz",
-      "integrity": "sha512-hJYnAJNkDrtkE2Q41YZhCpeOGU/0JgRFXbtrtOuGGeKc3pkEUHB9DDoxZAxx+XRno13GozUleyBi0qypz4c3bw==",
-      "requires": {
-        "@solana/codecs-core": "2.0.0-experimental.8618508",
-        "@solana/codecs-data-structures": "2.0.0-experimental.8618508",
-        "@solana/codecs-numbers": "2.0.0-experimental.8618508",
-        "@solana/codecs-strings": "2.0.0-experimental.8618508",
-        "@solana/options": "2.0.0-experimental.8618508",
-        "@solana/spl-type-length-value": "0.1.0"
-      }
-    },
-    "@solana/spl-type-length-value": {
-      "version": "0.1.0",
-      "resolved": "https://registry.npmjs.org/@solana/spl-type-length-value/-/spl-type-length-value-0.1.0.tgz",
-      "integrity": "sha512-JBMGB0oR4lPttOZ5XiUGyvylwLQjt1CPJa6qQ5oM+MBCndfjz2TKKkw0eATlLLcYmq1jBVsNlJ2cD6ns2GR7lA==",
-      "requires": {
-        "buffer": "^6.0.3"
-      }
-    },
-    "@solana/web3.js": {
-      "version": "1.89.1",
-      "resolved": "https://registry.npmjs.org/@solana/web3.js/-/web3.js-1.89.1.tgz",
-      "integrity": "sha512-t9TTLtPQxtQB3SAf/5E8xPXfVDsC6WGOsgKY02l2cbe0HLymT7ynE8Hu48Lk5qynHCquj6nhISfEHcjMkYpu/A==",
-      "requires": {
-        "@babel/runtime": "^7.23.4",
-        "@noble/curves": "^1.2.0",
-        "@noble/hashes": "^1.3.2",
-        "@solana/buffer-layout": "^4.0.1",
-        "agentkeepalive": "^4.5.0",
-        "bigint-buffer": "^1.1.5",
-        "bn.js": "^5.2.1",
-        "borsh": "^0.7.0",
-        "bs58": "^4.0.1",
-        "buffer": "6.0.3",
-        "fast-stable-stringify": "^1.0.0",
-        "jayson": "^4.1.0",
-        "node-fetch": "^2.7.0",
-        "rpc-websockets": "^7.5.1",
-        "superstruct": "^0.14.2"
-      },
-      "dependencies": {
-        "borsh": {
-          "version": "0.7.0",
-          "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.7.0.tgz",
-          "integrity": "sha512-CLCsZGIBCFnPtkNnieW/a8wmreDmfUtjU2m9yHrzPXIlNbqVs0AQrSatSG6vdNYUqdc83tkQi2eHfF98ubzQLA==",
-          "requires": {
-            "bn.js": "^5.2.0",
-            "bs58": "^4.0.0",
-            "text-encoding-utf-8": "^1.0.2"
-          }
-        }
-      }
-    },
-    "@types/connect": {
-      "version": "3.4.38",
-      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
-      "integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
-      "requires": {
-        "@types/node": "*"
-      }
-    },
-    "@types/node": {
-      "version": "12.20.55",
-      "resolved": "https://registry.npmjs.org/@types/node/-/node-12.20.55.tgz",
-      "integrity": "sha512-J8xLz7q2OFulZ2cyGTLE1TbbZcjpno7FaN6zdJNrgAdrJ+DZzh/uFR6YrTb4C+nXakvud8Q4+rbhoIWlYQbUFQ=="
-    },
-    "@types/ws": {
-      "version": "7.4.7",
-      "resolved": "https://registry.npmjs.org/@types/ws/-/ws-7.4.7.tgz",
-      "integrity": "sha512-JQbbmxZTZehdc2iszGKs5oC3NFnjeay7mtAWrdt7qNtAVK0g19muApzAy4bm9byz79xa2ZnO/BOBC2R8RC5Lww==",
-      "requires": {
-        "@types/node": "*"
-      }
-    },
-    "agentkeepalive": {
-      "version": "4.5.0",
-      "resolved": "https://registry.npmjs.org/agentkeepalive/-/agentkeepalive-4.5.0.tgz",
-      "integrity": "sha512-5GG/5IbQQpC9FpkRGsSvZI5QYeSCzlJHdpBQntCsuTOxhKD8lqKhrleg2Yi7yvMIf82Ycmmqln9U8V9qwEiJew==",
-      "requires": {
-        "humanize-ms": "^1.2.1"
-      }
-    },
-    "asynckit": {
-      "version": "0.4.0",
-      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
-      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="
-    },
-    "axios": {
-      "version": "1.6.4",
-      "resolved": "https://registry.npmjs.org/axios/-/axios-1.6.4.tgz",
-      "integrity": "sha512-heJnIs6N4aa1eSthhN9M5ioILu8Wi8vmQW9iHQ9NUvfkJb0lEEDUiIdQNAuBtfUt3FxReaKdpQA5DbmMOqzF/A==",
-      "requires": {
-        "follow-redirects": "^1.15.4",
-        "form-data": "^4.0.0",
-        "proxy-from-env": "^1.1.0"
-      }
-    },
-    "base-x": {
-      "version": "3.0.9",
-      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
-      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
-      "requires": {
-        "safe-buffer": "^5.0.1"
-      }
-    },
-    "base64-js": {
-      "version": "1.5.1",
-      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
-      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA=="
-    },
-    "big.js": {
-      "version": "6.2.1",
-      "resolved": "https://registry.npmjs.org/big.js/-/big.js-6.2.1.tgz",
-      "integrity": "sha512-bCtHMwL9LeDIozFn+oNhhFoq+yQ3BNdnsLSASUxLciOb1vgvpHsIO1dsENiGMgbb4SkP5TrzWzRiLddn8ahVOQ=="
-    },
-    "bigint-buffer": {
-      "version": "1.1.5",
-      "resolved": "https://registry.npmjs.org/bigint-buffer/-/bigint-buffer-1.1.5.tgz",
-      "integrity": "sha512-trfYco6AoZ+rKhKnxA0hgX0HAbVP/s808/EuDSe2JDzUnCp/xAsli35Orvk67UrTEcwuxZqYZDmfA2RXJgxVvA==",
-      "requires": {
-        "bindings": "^1.3.0"
-      }
-    },
-    "bignumber.js": {
-      "version": "9.1.2",
-      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.1.2.tgz",
-      "integrity": "sha512-2/mKyZH9K85bzOEfhXDBFZTGd1CTs+5IHpeFQo9luiBG7hghdC851Pj2WAhb6E3R6b9tZj/XKhbg4fum+Kepug=="
-    },
-    "bindings": {
-      "version": "1.5.0",
-      "resolved": "https://registry.npmjs.org/bindings/-/bindings-1.5.0.tgz",
-      "integrity": "sha512-p2q/t/mhvuOj/UeLlV6566GD/guowlr0hHxClI0W9m7MWYkL1F0hLo+0Aexs9HSPCtR1SXQ0TD3MMKrXZajbiQ==",
-      "requires": {
-        "file-uri-to-path": "1.0.0"
-      }
-    },
-    "bn.js": {
-      "version": "5.2.1",
-      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.1.tgz",
-      "integrity": "sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ=="
-    },
-    "borsh": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/borsh/-/borsh-2.0.0.tgz",
-      "integrity": "sha512-kc9+BgR3zz9+cjbwM8ODoUB4fs3X3I5A/HtX7LZKxCLaMrEeDFoBpnhZY//DTS1VZBSs6S5v46RZRbZjRFspEg=="
-    },
-    "bs58": {
-      "version": "4.0.1",
-      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
-      "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
-      "requires": {
-        "base-x": "^3.0.2"
-      }
-    },
-    "bs64": {
-      "version": "0.1.0",
-      "resolved": "https://registry.npmjs.org/bs64/-/bs64-0.1.0.tgz",
-      "integrity": "sha512-0rK20fzECR6FFR2VRhvDOUTlPmWFS8PddRtk9KNqsfj9S8++WHSDKzf0f9S/89sthwBg+bEgFitRLEC6COTi8Q==",
-      "requires": {
-        "convert-string": "~0.1.0"
-      }
-    },
-    "buffer": {
-      "version": "6.0.3",
-      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
-      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
-      "requires": {
-        "base64-js": "^1.3.1",
-        "ieee754": "^1.2.1"
-      }
-    },
-    "buffer-layout": {
-      "version": "1.2.2",
-      "resolved": "https://registry.npmjs.org/buffer-layout/-/buffer-layout-1.2.2.tgz",
-      "integrity": "sha512-kWSuLN694+KTk8SrYvCqwP2WcgQjoRCiF5b4QDvkkz8EmgD+aWAIceGFKMIAdmF/pH+vpgNV3d3kAKorcdAmWA=="
-    },
-    "bufferutil": {
-      "version": "4.0.8",
-      "resolved": "https://registry.npmjs.org/bufferutil/-/bufferutil-4.0.8.tgz",
-      "integrity": "sha512-4T53u4PdgsXqKaIctwF8ifXlRTTmEPJ8iEPWFdGZvcf7sbwYo6FKFEX9eNNAnzFZ7EzJAQ3CJeOtCRA4rDp7Pw==",
-      "optional": true,
-      "requires": {
-        "node-gyp-build": "^4.3.0"
-      }
-    },
-    "camelcase": {
-      "version": "5.3.1",
-      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
-      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg=="
-    },
-    "combined-stream": {
-      "version": "1.0.8",
-      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
-      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
-      "requires": {
-        "delayed-stream": "~1.0.0"
-      }
-    },
-    "commander": {
-      "version": "2.20.3",
-      "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
-      "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ=="
-    },
-    "convert-string": {
-      "version": "0.1.0",
-      "resolved": "https://registry.npmjs.org/convert-string/-/convert-string-0.1.0.tgz",
-      "integrity": "sha512-1KX9ESmtl8xpT2LN2tFnKSbV4NiarbVi8DVb39ZriijvtTklyrT+4dT1wsGMHKD3CJUjXgvJzstm9qL9ICojGA=="
-    },
-    "crypto-hash": {
-      "version": "1.3.0",
-      "resolved": "https://registry.npmjs.org/crypto-hash/-/crypto-hash-1.3.0.tgz",
-      "integrity": "sha512-lyAZ0EMyjDkVvz8WOeVnuCPvKVBXcMv1l5SVqO1yC7PzTwrD/pPje/BIRbWhMoPe436U+Y2nD7f5bFx0kt+Sbg=="
-    },
-    "decimal.js": {
-      "version": "10.4.3",
-      "resolved": "https://registry.npmjs.org/decimal.js/-/decimal.js-10.4.3.tgz",
-      "integrity": "sha512-VBBaLc1MgL5XpzgIP7ny5Z6Nx3UrRkIViUkPUdtl9aya5amy3De1gsUUSB1g3+3sExYNjCAsAznmukyxCb1GRA=="
-    },
-    "decimal.js-light": {
-      "version": "2.5.1",
-      "resolved": "https://registry.npmjs.org/decimal.js-light/-/decimal.js-light-2.5.1.tgz",
-      "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg=="
-    },
-    "delay": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/delay/-/delay-5.0.0.tgz",
-      "integrity": "sha512-ReEBKkIfe4ya47wlPYf/gu5ib6yUG0/Aez0JQZQz94kiWtRQvZIQbTiehsnwHvLSWJnQdhVeqYue7Id1dKr0qw=="
-    },
-    "delayed-stream": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
-      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ=="
-    },
-    "dot-case": {
-      "version": "3.0.4",
-      "resolved": "https://registry.npmjs.org/dot-case/-/dot-case-3.0.4.tgz",
-      "integrity": "sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w==",
-      "requires": {
-        "no-case": "^3.0.4",
-        "tslib": "^2.0.3"
-      }
-    },
-    "dotenv": {
-      "version": "10.0.0",
-      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-10.0.0.tgz",
-      "integrity": "sha512-rlBi9d8jpv9Sf1klPjNfFAuWDjKLwTIJJ/VxtoTwIR6hnZxcEOQCZg2oIL3MWBYw5GpUDKOEnND7LXTbIpQ03Q=="
-    },
-    "es6-promise": {
-      "version": "4.2.8",
-      "resolved": "https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz",
-      "integrity": "sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w=="
-    },
-    "es6-promisify": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/es6-promisify/-/es6-promisify-5.0.0.tgz",
-      "integrity": "sha512-C+d6UdsYDk0lMebHNR4S2NybQMMngAOnOwYBQjTOiv0MkoJMP0Myw2mgpDLBcpfCmRLxyFqYhS/CfOENq4SJhQ==",
-      "requires": {
-        "es6-promise": "^4.0.3"
-      }
-    },
-    "eventemitter3": {
-      "version": "4.0.7",
-      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
-      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw=="
-    },
-    "eyes": {
-      "version": "0.1.8",
-      "resolved": "https://registry.npmjs.org/eyes/-/eyes-0.1.8.tgz",
-      "integrity": "sha512-GipyPsXO1anza0AOZdy69Im7hGFCNB7Y/NGjDlZGJ3GJJLtwNSb2vrzYrTYJRrRloVx7pl+bhUaTB8yiccPvFQ=="
-    },
-    "fast-stable-stringify": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/fast-stable-stringify/-/fast-stable-stringify-1.0.0.tgz",
-      "integrity": "sha512-wpYMUmFu5f00Sm0cj2pfivpmawLZ0NKdviQ4w9zJeR8JVtOpOxHmLaJuj0vxvGqMJQWyP/COUkF75/57OKyRag=="
-    },
-    "fastestsmallesttextencoderdecoder": {
-      "version": "1.0.22",
-      "resolved": "https://registry.npmjs.org/fastestsmallesttextencoderdecoder/-/fastestsmallesttextencoderdecoder-1.0.22.tgz",
-      "integrity": "sha512-Pb8d48e+oIuY4MaM64Cd7OW1gt4nxCHs7/ddPPZ/Ic3sg8yVGM7O9wDvZ7us6ScaUupzM+pfBolwtYhN1IxBIw==",
-      "peer": true
-    },
-    "fecha": {
-      "version": "4.2.3",
-      "resolved": "https://registry.npmjs.org/fecha/-/fecha-4.2.3.tgz",
-      "integrity": "sha512-OP2IUU6HeYKJi3i0z4A19kHMQoLVs4Hc+DPqqxI2h/DPZHTm/vjsfC6P0b4jCMy14XizLBqvndQ+UilD7707Jw=="
-    },
-    "file-uri-to-path": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/file-uri-to-path/-/file-uri-to-path-1.0.0.tgz",
-      "integrity": "sha512-0Zt+s3L7Vf1biwWZ29aARiVYLx7iMGnEUl9x33fbB/j3jR81u/O2LbqK+Bm1CDSNDKVtJ/YjwY7TUd5SkeLQLw=="
-    },
-    "find": {
-      "version": "0.3.0",
-      "resolved": "https://registry.npmjs.org/find/-/find-0.3.0.tgz",
-      "integrity": "sha512-iSd+O4OEYV/I36Zl8MdYJO0xD82wH528SaCieTVHhclgiYNe9y+yPKSwK+A7/WsmHL1EZ+pYUJBXWTL5qofksw==",
-      "requires": {
-        "traverse-chain": "~0.1.0"
-      }
-    },
-    "follow-redirects": {
-      "version": "1.15.4",
-      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.4.tgz",
-      "integrity": "sha512-Cr4D/5wlrb0z9dgERpUL3LrmPKVDsETIJhaCMeDfuFYcqa5bldGV6wBsAN6X/vxlXQtFBMrXdXxdL8CbDTGniw=="
-    },
-    "form-data": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
-      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
-      "requires": {
-        "asynckit": "^0.4.0",
-        "combined-stream": "^1.0.8",
-        "mime-types": "^2.1.12"
-      }
-    },
-    "humanize-ms": {
-      "version": "1.2.1",
-      "resolved": "https://registry.npmjs.org/humanize-ms/-/humanize-ms-1.2.1.tgz",
-      "integrity": "sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==",
-      "requires": {
-        "ms": "^2.0.0"
-      }
-    },
-    "ieee754": {
-      "version": "1.2.1",
-      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
-      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA=="
-    },
-    "isomorphic-ws": {
-      "version": "4.0.1",
-      "resolved": "https://registry.npmjs.org/isomorphic-ws/-/isomorphic-ws-4.0.1.tgz",
-      "integrity": "sha512-BhBvN2MBpWTaSHdWRb/bwdZJ1WaehQ2L1KngkCkfLUGF0mAWAT1sQUQacEmQ0jXkFw/czDXPNQSL5u2/Krsz1w==",
-      "requires": {}
-    },
-    "jayson": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/jayson/-/jayson-4.1.0.tgz",
-      "integrity": "sha512-R6JlbyLN53Mjku329XoRT2zJAE6ZgOQ8f91ucYdMCD4nkGCF9kZSrcGXpHIU4jeKj58zUZke2p+cdQchU7Ly7A==",
-      "requires": {
-        "@types/connect": "^3.4.33",
-        "@types/node": "^12.12.54",
-        "@types/ws": "^7.4.4",
-        "commander": "^2.20.3",
-        "delay": "^5.0.0",
-        "es6-promisify": "^5.0.0",
-        "eyes": "^0.1.8",
-        "isomorphic-ws": "^4.0.1",
-        "json-stringify-safe": "^5.0.1",
-        "JSONStream": "^1.3.5",
-        "uuid": "^8.3.2",
-        "ws": "^7.4.5"
-      }
-    },
-    "js-sha256": {
-      "version": "0.9.0",
-      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
-      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
-    },
-    "json-stringify-safe": {
-      "version": "5.0.1",
-      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
-      "integrity": "sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA=="
-    },
-    "jsonparse": {
-      "version": "1.3.1",
-      "resolved": "https://registry.npmjs.org/jsonparse/-/jsonparse-1.3.1.tgz",
-      "integrity": "sha512-POQXvpdL69+CluYsillJ7SUhKvytYjW9vG/GKpnf+xP8UWgYEM/RaMzHHofbALDiKbbP1W8UEYmgGl39WkPZsg=="
-    },
-    "JSONStream": {
-      "version": "1.3.5",
-      "resolved": "https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.5.tgz",
-      "integrity": "sha512-E+iruNOY8VV9s4JEbe1aNEm6MiszPRr/UfcHMz0TQh1BXSxHK+ASV1R6W4HpjBhSeS+54PIsAMCBmwD06LLsqQ==",
-      "requires": {
-        "jsonparse": "^1.2.0",
-        "through": ">=2.2.7 <3"
-      }
-    },
-    "lodash": {
-      "version": "4.17.21",
-      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
-      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
-    },
-    "lower-case": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/lower-case/-/lower-case-2.0.2.tgz",
-      "integrity": "sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==",
-      "requires": {
-        "tslib": "^2.0.3"
-      }
-    },
-    "mime-db": {
-      "version": "1.52.0",
-      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
-      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg=="
-    },
-    "mime-types": {
-      "version": "2.1.35",
-      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
-      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
-      "requires": {
-        "mime-db": "1.52.0"
-      }
-    },
-    "ms": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
-    },
-    "no-case": {
-      "version": "3.0.4",
-      "resolved": "https://registry.npmjs.org/no-case/-/no-case-3.0.4.tgz",
-      "integrity": "sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==",
-      "requires": {
-        "lower-case": "^2.0.2",
-        "tslib": "^2.0.3"
-      }
-    },
-    "node": {
-      "version": "21.2.0",
-      "resolved": "https://registry.npmjs.org/node/-/node-21.2.0.tgz",
-      "integrity": "sha512-oiHX7SXGdO1wyg0/lZ1ZMy1iS7GgumsT5Ptt5BOye1WniC8OJ2TtYRuWfqNoKrUlYzI4+Bv1+NH5eDgxuThU2A==",
-      "requires": {
-        "node-bin-setup": "^1.0.0"
-      }
-    },
-    "node-bin-setup": {
-      "version": "1.1.3",
-      "resolved": "https://registry.npmjs.org/node-bin-setup/-/node-bin-setup-1.1.3.tgz",
-      "integrity": "sha512-opgw9iSCAzT2+6wJOETCpeRYAQxSopqQ2z+N6BXwIMsQQ7Zj5M8MaafQY8JMlolRR6R1UXg2WmhKp0p9lSOivg=="
-    },
-    "node-fetch": {
-      "version": "2.7.0",
-      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
-      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
-      "requires": {
-        "whatwg-url": "^5.0.0"
-      }
-    },
-    "node-gyp-build": {
-      "version": "4.7.1",
-      "resolved": "https://registry.npmjs.org/node-gyp-build/-/node-gyp-build-4.7.1.tgz",
-      "integrity": "sha512-wTSrZ+8lsRRa3I3H8Xr65dLWSgCvY2l4AOnaeKdPA9TB/WYMPaTcrzf3rXvFoVvjKNVnu0CcWSx54qq9GKRUYg==",
-      "optional": true
-    },
-    "pako": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/pako/-/pako-2.1.0.tgz",
-      "integrity": "sha512-w+eufiZ1WuJYgPXbV/PO3NCMEc3xqylkKHzp8bxp1uW4qaSNQUkwmLLEc3kKsfz8lpV1F8Ht3U1Cm+9Srog2ug=="
-    },
-    "proxy-from-env": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
-      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
-    },
-    "regenerator-runtime": {
-      "version": "0.14.1",
-      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.14.1.tgz",
-      "integrity": "sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw=="
-    },
-    "rpc-websockets": {
-      "version": "7.9.0",
-      "resolved": "https://registry.npmjs.org/rpc-websockets/-/rpc-websockets-7.9.0.tgz",
-      "integrity": "sha512-DwKewQz1IUA5wfLvgM8wDpPRcr+nWSxuFxx5CbrI2z/MyyZ4nXLM86TvIA+cI1ZAdqC8JIBR1mZR55dzaLU+Hw==",
-      "requires": {
-        "@babel/runtime": "^7.17.2",
-        "bufferutil": "^4.0.1",
-        "eventemitter3": "^4.0.7",
-        "utf-8-validate": "^5.0.2",
-        "uuid": "^8.3.2",
-        "ws": "^8.5.0"
-      },
-      "dependencies": {
-        "ws": {
-          "version": "8.16.0",
-          "resolved": "https://registry.npmjs.org/ws/-/ws-8.16.0.tgz",
-          "integrity": "sha512-HS0c//TP7Ina87TfiPUz1rQzMhHrl/SG2guqRcTOIUYD2q8uhUdNHZYJUaQ8aTGPzCh+c6oawMKW35nFl1dxyQ==",
-          "requires": {}
-        }
-      }
-    },
-    "safe-buffer": {
-      "version": "5.2.1",
-      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
-      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ=="
-    },
-    "snake-case": {
-      "version": "3.0.4",
-      "resolved": "https://registry.npmjs.org/snake-case/-/snake-case-3.0.4.tgz",
-      "integrity": "sha512-LAOh4z89bGQvl9pFfNF8V146i7o7/CqFPbqzYgP+yYzDIDeS9HaNFtXABamRW+AQzEVODcvE79ljJ+8a9YSdMg==",
-      "requires": {
-        "dot-case": "^3.0.4",
-        "tslib": "^2.0.3"
-      }
-    },
-    "superstruct": {
-      "version": "0.14.2",
-      "resolved": "https://registry.npmjs.org/superstruct/-/superstruct-0.14.2.tgz",
-      "integrity": "sha512-nPewA6m9mR3d6k7WkZ8N8zpTWfenFH3q9pA2PkuiZxINr9DKB2+40wEQf0ixn8VaGuJ78AB6iWOtStI+/4FKZQ=="
-    },
-    "text-encoding-utf-8": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
-      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
-    },
-    "through": {
-      "version": "2.3.8",
-      "resolved": "https://registry.npmjs.org/through/-/through-2.3.8.tgz",
-      "integrity": "sha512-w89qg7PI8wAdvX60bMDP+bFoD5Dvhm9oLheFp5O4a2QF0cSBGsBX4qZmadPMvVqlLJBBci+WqGGOAPvcDeNSVg=="
-    },
-    "toformat": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/toformat/-/toformat-2.0.0.tgz",
-      "integrity": "sha512-03SWBVop6nU8bpyZCx7SodpYznbZF5R4ljwNLBcTQzKOD9xuihRo/psX58llS1BMFhhAI08H3luot5GoXJz2pQ=="
-    },
-    "toml": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/toml/-/toml-3.0.0.tgz",
-      "integrity": "sha512-y/mWCZinnvxjTKYhJ+pYxwD0mRLVvOtdS2Awbgxln6iEnt4rk0yBxeSBHkGJcPucRiG0e55mwWp+g/05rsrd6w=="
-    },
-    "tr46": {
-      "version": "0.0.3",
-      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
-      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
-    },
-    "traverse-chain": {
-      "version": "0.1.0",
-      "resolved": "https://registry.npmjs.org/traverse-chain/-/traverse-chain-0.1.0.tgz",
-      "integrity": "sha512-up6Yvai4PYKhpNp5PkYtx50m3KbwQrqDwbuZP/ItyL64YEWHAvH6Md83LFLV/GRSk/BoUVwwgUzX6SOQSbsfAg=="
-    },
-    "tslib": {
-      "version": "2.6.2",
-      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.6.2.tgz",
-      "integrity": "sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q=="
-    },
-    "utf-8-validate": {
-      "version": "5.0.10",
-      "resolved": "https://registry.npmjs.org/utf-8-validate/-/utf-8-validate-5.0.10.tgz",
-      "integrity": "sha512-Z6czzLq4u8fPOyx7TU6X3dvUZVvoJmxSQ+IcrlmagKhilxlhZgxPK6C5Jqbkw1IDUmFTM+cz9QDnnLTwDz/2gQ==",
-      "optional": true,
-      "requires": {
-        "node-gyp-build": "^4.3.0"
-      }
-    },
-    "uuid": {
-      "version": "8.3.2",
-      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
-      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg=="
-    },
-    "webidl-conversions": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
-      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
-    },
-    "whatwg-url": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
-      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
-      "requires": {
-        "tr46": "~0.0.3",
-        "webidl-conversions": "^3.0.0"
-      }
-    },
-    "ws": {
-      "version": "7.5.9",
-      "resolved": "https://registry.npmjs.org/ws/-/ws-7.5.9.tgz",
-      "integrity": "sha512-F+P9Jil7UiSKSkppIiD94dN07AwvFixvLIj1Og1Rl9GGMuNipJnV9JzjD6XuqmAeiswGvUmNLjr5cFuXwNS77Q==",
-      "requires": {}
-    }
-  }
-}
Index: 2 AxisBot Spam Sniper/utils/config.js
===================================================================
diff --git a/2 AxisBot Spam Sniper/utils/config.js b/2 AxisBot Spam Sniper/utils/config.js
deleted file mode 100644
--- a/2 AxisBot Spam Sniper/utils/config.js	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,16 +0,0 @@
-const bs58 = require('bs58');
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.DEFAULT_TOKEN = exports.addLookupTableInfo = exports.makeTxVersion = exports.RAYDIUM_MAINNET_API = exports.ENDPOINT = exports.PROGRAMIDS = exports.connection = exports.wallet = exports.rpcToken = exports.rpcUrl = void 0;
-const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
-const web3_js_1 = require("@solana/web3.js");
-exports.ownerAddress = '<YOUR WALLET PUBLIC KEY>';
-exports.wallet = web3_js_1.Keypair.fromSecretKey(bs58.decode('<YOUR PRIVATE KEY>'));
-exports.connection = new web3_js_1.Connection('<YOUR RPC CONNECTION URL>');
-exports.websocketConnection = '<YOUR WEBSOCKET CONNECTION URL>';
-exports.amtBuySol = '<INTEGER AMOUNT OF SOL TO USER PER SWAP, EX. 0.001>';
-exports.PROGRAMIDS = raydium_sdk_1.MAINNET_PROGRAM_ID;
-exports.ENDPOINT = raydium_sdk_1.ENDPOINT;
-exports.RAYDIUM_MAINNET_API = raydium_sdk_1.RAYDIUM_MAINNET;
-exports.makeTxVersion = raydium_sdk_1.TxVersion.V0; // LEGACY
-exports.addLookupTableInfo = raydium_sdk_1.LOOKUP_TABLE_CACHE;
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,5 +0,0 @@
-# 默认忽略的文件
-/shelf/
-/workspace.xml
-# 基于编辑器的 HTTP 客户端请求
-/httpRequests/
Index: 1 AxisBot Solana Sniper Main/helpers/token.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/helpers/token.ts b/1 AxisBot Solana Sniper Main/helpers/token.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/helpers/token.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,26 +0,0 @@
-// 导入所需的模块和库
-import { Token } from '@raydium-io/raydium-sdk'; // Raydium SDK 的 Token 类
-import { TOKEN_PROGRAM_ID } from '@solana/spl-token'; // Solana 代币程序 ID
-import { PublicKey } from '@solana/web3.js'; // Solana 相关库
-
-// 获取代币的函数
-export function getToken(token: string) {
-  // 根据代币类型返回相应的 Token 对象
-  switch (token) {
-    case 'WSOL': { // 如果代币是 WSOL
-      return Token.WSOL; // 返回 WSOL 代币对象
-    }
-    case 'USDC': { // 如果代币是 USDC
-      return new Token(
-        TOKEN_PROGRAM_ID, // 代币程序 ID
-        new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'), // USDC 的公钥
-        6, // USDC 的小数位数
-        'USDC', // 代币符号
-        'USDC', // 代币名称
-      );
-    }
-    default: { // 处理不支持的代币类型
-      throw new Error(`不支持的报价代币 "${token}"。支持的值为 USDC 和 WSOL`); // 抛出错误
-    }
-  }
-}
Index: 2 AxisBot Spam Sniper/strategy1/formatAmmKeysById.js
===================================================================
diff --git a/2 AxisBot Spam Sniper/strategy1/formatAmmKeysById.js b/2 AxisBot Spam Sniper/strategy1/formatAmmKeysById.js
deleted file mode 100644
--- a/2 AxisBot Spam Sniper/strategy1/formatAmmKeysById.js	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,63 +0,0 @@
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.formatAmmKeysById = void 0;
-const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
-const web3_js_1 = require("@solana/web3.js");
-const config_1 = require("../utils/config.js");
-function formatAmmKeysById(id) {
-    return __awaiter(this, void 0, void 0, function* () {
-        const account = yield config_1.connection.getAccountInfo(new web3_js_1.PublicKey(id));
-        if (account === null)
-            throw Error(' get id info error ');
-        const info = raydium_sdk_1.LIQUIDITY_STATE_LAYOUT_V4.decode(account.data);
-        const marketId = info.marketId;
-        const marketAccount = yield config_1.connection.getAccountInfo(marketId);
-        if (marketAccount === null)
-            throw Error(' get market info error');
-        const marketInfo = raydium_sdk_1.MARKET_STATE_LAYOUT_V3.decode(marketAccount.data);
-        const lpMint = info.lpMint;
-        const lpMintAccount = yield config_1.connection.getAccountInfo(lpMint);
-        if (lpMintAccount === null)
-            throw Error(' get lp mint info error');
-        const lpMintInfo = raydium_sdk_1.SPL_MINT_LAYOUT.decode(lpMintAccount.data);
-        return {
-            id,
-            baseMint: info.baseMint.toString(),
-            quoteMint: info.quoteMint.toString(),
-            lpMint: info.lpMint.toString(),
-            baseDecimals: info.baseDecimal.toNumber(),
-            quoteDecimals: info.quoteDecimal.toNumber(),
-            // lpDecimals: lpMintInfo.decimals,
-            lpDecimals: info.baseDecimal.toNumber(),
-            version: 4,
-            programId: account.owner.toString(),
-            authority: raydium_sdk_1.Liquidity.getAssociatedAuthority({ programId: account.owner }).publicKey.toString(),
-            openOrders: info.openOrders.toString(),
-            targetOrders: info.targetOrders.toString(),
-            baseVault: info.baseVault.toString(),
-            quoteVault: info.quoteVault.toString(),
-            withdrawQueue: info.withdrawQueue.toString(),
-            lpVault: info.lpVault.toString(),
-            marketVersion: 3,
-            marketProgramId: info.marketProgramId.toString(),
-            marketId: info.marketId.toString(),
-            marketAuthority: raydium_sdk_1.Market.getAssociatedAuthority({ programId: info.marketProgramId, marketId: info.marketId }).publicKey.toString(),
-            marketBaseVault: marketInfo.baseVault.toString(),
-            marketQuoteVault: marketInfo.quoteVault.toString(),
-            marketBids: marketInfo.bids.toString(),
-            marketAsks: marketInfo.asks.toString(),
-            marketEventQueue: marketInfo.eventQueue.toString(),
-            lookupTableAccount: web3_js_1.PublicKey.default.toString()
-        };
-    });
-}
-exports.formatAmmKeysById = formatAmmKeysById;
\ No newline at end of file
Index: 2 AxisBot Spam Sniper/utils/decoderaylog.js
===================================================================
diff --git a/2 AxisBot Spam Sniper/utils/decoderaylog.js b/2 AxisBot Spam Sniper/utils/decoderaylog.js
deleted file mode 100644
--- a/2 AxisBot Spam Sniper/utils/decoderaylog.js	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,53 +0,0 @@
-const web3 = require('@solana/web3.js');
-const WebSocket = require('ws');
-const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
-const bs64 = require('bs64');
-const config = require('./config');
-
-const connection = config.connection;
-
-const feeAddress = '7YttLkHDoNj9wyDur5pM1ejNaAvT9X4eqaYcHQqtj2G5'
-const rayProgram = new web3.PublicKey('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8');
-
-const ws = new WebSocket(config.websocketConnection)
-    ws.onopen = () => {
-        ws.send(
-            JSON.stringify({
-                jsonrpc: '2.0',
-                id: 1,
-                method: 'logsSubscribe',
-                params: [{"mentions": [feeAddress]}, {"commitment": "processed"}]
-            })
-        )
-    }
-
-ws.on('message', (evt) => {
-    try {
-        const buffer = evt.toString('utf8');
-        parseLogs(JSON.parse(buffer));
-        return;
-    } catch (e) {
-        console.log(e)
-    }
-})
-
-function parseLogs(buffer){
-    if(buffer.params === undefined){
-        return;
-    }
-    let now = new Date();
-    let utcString = now.toUTCString();
-    console.log(utcString);
-    const allLogs = buffer.params.result.value.logs;
-    for(const log of allLogs){
-        if(log.includes("ray_log")){
-            const rayLogSplit = log.split(" ");
-            const rayLog = rayLogSplit[3];
-            const logData = Buffer.from(rayLog, "base64");
-            const market = new web3.PublicKey(logData.subarray(75 - 32), 75);
-            console.log(market)
-            const pool = raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), market.toBuffer(), Buffer.from('amm_associated_seed', 'utf-8')], rayProgram)['publicKey'];
-            console.log(pool);
-        }
-    }
-}
\ No newline at end of file
Index: 2 AxisBot Spam Sniper/strategy2/swap2.js
===================================================================
diff --git a/2 AxisBot Spam Sniper/strategy2/swap2.js b/2 AxisBot Spam Sniper/strategy2/swap2.js
deleted file mode 100644
--- a/2 AxisBot Spam Sniper/strategy2/swap2.js	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,113 +0,0 @@
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-const assert_1 = __importDefault(require("assert"));
-const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
-const config_1 = require("../utils/config.js");
-const util_1 = require("../utils/util.js");
-const { LAMPORTS_PER_SOL } = require("@solana/web3.js");
-const web3 = require("@solana/web3.js");
-const connection = config_1.connection;
-function swapOnlyAmm(input) {
-    return __awaiter(this, void 0, void 0, function* () {
-        const outputToken = new raydium_sdk_1.Token(raydium_sdk_1.TOKEN_PROGRAM_ID, new web3.PublicKey(input.tokenAddress), input.poolKeys.lpDecimals);
-        const { innerTransactions } = yield raydium_sdk_1.Liquidity.makeSwapInstructionSimple({
-            connection: config_1.connection,
-            poolKeys: input.poolKeys,
-            userKeys: {
-                tokenAccounts: input.walletTokenAccounts,
-                owner: input.wallet.publicKey,
-            },
-            amountIn: input.inputTokenAmount,
-            amountOut: new raydium_sdk_1.TokenAmount(outputToken, 1),
-            fixedSide: 'in',
-            makeTxVersion: config_1.makeTxVersion,
-        });
-        return { txids: yield (0, util_1.buildAndSendTx)(innerTransactions) };
-    });
-}
-
-const buyAmtSol = config_1.amtBuySol;
-function swap(poolKeys, signature) {
-    return __awaiter(this, void 0, void 0, function* () {
-        const ownerAddress = config_1.ownerAddress;
-        const inputToken = new raydium_sdk_1.Token(raydium_sdk_1.TOKEN_PROGRAM_ID, new web3_js_1.PublicKey('So11111111111111111111111111111111111111112'), 9, 'WSOL', 'WSOL'); // WSOL
-        const inputTokenAmount = new raydium_sdk_1.TokenAmount(inputToken, LAMPORTS_PER_SOL * buyAmtSol);
-        const slippage = new raydium_sdk_1.Percent(1, 100);
-        const walletTokenAccounts = yield (0, util_1.getWalletTokenAccount)(config_1.connection, config_1.wallet.publicKey);
-        swapOnlyAmm({
-            poolKeys,
-            tokenAddress: poolKeys.baseMint.toString(), 
-            inputTokenAmount,
-            slippage,
-            walletTokenAccounts,
-            wallet: config_1.wallet,
-        }).then(({ txids }) => {
-            /** continue with txids */
-            console.log('txids', txids);
-            if(txids.length === 1){
-                monitorTokenSell(txids[0], poolKeys.baseMint.toString(), ownerAddress, poolKeys.baseVault.toString(), poolKeys.quoteVault.toString());
-            }
-        }).catch(error => {
-            console.log(signature);
-            console.log(error);
-            swap(poolKeys, poolKeys.baseMint.toString());
-        })
-    });
-}
-exports.swap = swap
-
-async function getTx(tx){
-    return await connection.getTransaction(tx, {
-        maxSupportedTransactionVersion: 0,
-        commitment: "confirmed"
-    })
-}
-
-async function getBalances(tx, tokenAddress, ownerAddress){
-    let validTx = await getTx(tx);
-    while(validTx === null){
-        validTx = await getTx(tx);
-        if(validTx !== null){
-            for(const account of validTx.meta.postTokenBalances){
-                if(account.mint === tokenAddress && account.owner === ownerAddress){
-                    return account.uiTokenAmount.uiAmount;
-                }
-            }
-        }
-    }
-}
-
-async function getTokenPriceInSol(baseVault, quoteVault){
-    const baseVaultAccount = await connection.getTokenAccountBalance(new web3.PublicKey(baseVault));
-    const quoteVaultAccount = await connection.getTokenAccountBalance(new web3.PublicKey(quoteVault));
-    const baseVaultAccountAmount = baseVaultAccount.value.uiAmount;
-    const quoteVaultAccountAmount = quoteVaultAccount.value.uiAmount;
-    return (quoteVaultAccountAmount / baseVaultAccountAmount);
-}
-
-async function monitorTokenSell(tx, tokenAddress, ownerAddress, baseVault, quoteVault){
-    const tokenBalance = await getBalances(tx, tokenAddress, ownerAddress);
-    const buyPrice = (buyAmtSol / tokenBalance);
-    monitorToken(buyPrice, baseVault, quoteVault);
-}
-
-async function monitorToken(buyPrice, baseVault, quoteVault){
-    let interval = setInterval(async () => {
-        const currentPrice = await getTokenPriceInSol(baseVault, quoteVault);
-        console.log("buy price: " + buyPrice + " current price: " + currentPrice);
-        const percentIncrease = ((buyPrice - currentPrice) / buyPrice) * 100;
-        console.log("percent increase: " + percentIncrease);
-    }, 500)
-}
\ No newline at end of file
Index: 2 AxisBot Spam Sniper/package.json
===================================================================
diff --git a/2 AxisBot Spam Sniper/package.json b/2 AxisBot Spam Sniper/package.json
deleted file mode 100644
--- a/2 AxisBot Spam Sniper/package.json	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,20 +0,0 @@
-{
-  "dependencies": {
-    "@openbook-dex/openbook": "^0.0.9",
-    "@raydium-io/raydium-sdk": "^1.3.1-beta.46",
-    "@solana/spl-token": "^0.3.11",
-    "@solana/web3.js": "^1.87.6",
-    "borsh": "^2.0.0",
-    "bs64": "^0.1.0",
-    "node": "^21.2.0"
-  },
-  "name": "solana",
-  "version": "1.0.0",
-  "main": "tx.js",
-  "scripts": {
-    "test": "echo \"Error: no test specified\" && exit 1"
-  },
-  "author": "",
-  "license": "ISC",
-  "description": ""
-}
Index: 1 AxisBot Solana Sniper Main/cache/market.cache.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/cache/market.cache.ts b/1 AxisBot Solana Sniper Main/cache/market.cache.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/cache/market.cache.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,66 +0,0 @@
-// 导入所需的模块和库
-import { Connection, PublicKey } from '@solana/web3.js'; // Solana 相关库
-import { getMinimalMarketV3, logger, MINIMAL_MARKET_STATE_LAYOUT_V3, MinimalMarketLayoutV3 } from '../helpers'; // 辅助函数和类型
-import { MAINNET_PROGRAM_ID, MARKET_STATE_LAYOUT_V3, Token } from '@raydium-io/raydium-sdk'; // Raydium SDK
-
-// 创建市场缓存类
-export class MarketCache {
-  private readonly keys: Map<string, MinimalMarketLayoutV3> = new Map<string, MinimalMarketLayoutV3>(); // 存储市场的 Map
-  constructor(private readonly connection: Connection) {} // 构造函数，接受 Solana 连接
-
-  // 初始化缓存的方法
-  async init(config: { quoteToken: Token }) {
-    logger.debug({}, `正在获取所有现有的 ${config.quoteToken.symbol} 市场...`); // 记录调试信息
-
-    // 获取程序账户
-    const accounts = await this.connection.getProgramAccounts(MAINNET_PROGRAM_ID.OPENBOOK_MARKET, {
-      commitment: this.connection.commitment, // 提交级别
-      dataSlice: {
-        offset: MARKET_STATE_LAYOUT_V3.offsetOf('eventQueue'), // 数据偏移
-        length: MINIMAL_MARKET_STATE_LAYOUT_V3.span, // 数据长度
-      },
-      filters: [
-        { dataSize: MARKET_STATE_LAYOUT_V3.span }, // 数据大小过滤
-        {
-          memcmp: { // 根据报价代币的 mint 过滤
-            offset: MARKET_STATE_LAYOUT_V3.offsetOf('quoteMint'),
-            bytes: config.quoteToken.mint.toBase58(),
-          },
-        },
-      ],
-    });
-
-    // 遍历账户并缓存市场信息
-    for (const account of accounts) {
-      const market = MINIMAL_MARKET_STATE_LAYOUT_V3.decode(account.account.data); // 解码市场信息
-      this.keys.set(account.pubkey.toString(), market); // 将市场信息存入缓存
-    }
-
-    logger.debug({}, `缓存了 ${this.keys.size} 个市场`); // 记录缓存市场的数量
-  }
-
-  // 保存市场信息的方法
-  public save(marketId: string, keys: MinimalMarketLayoutV3) {
-    if (!this.keys.has(marketId)) { // 如果市场 ID 不在缓存中
-      logger.trace({}, `缓存新市场: ${marketId}`); // 记录缓存新市场的信息
-      this.keys.set(marketId, keys); // 将市场信息存入缓存
-    }
-  }
-
-  // 获取市场信息的方法
-  public async get(marketId: string): Promise<MinimalMarketLayoutV3> {
-    if (this.keys.has(marketId)) { // 如果市场 ID 在缓存中
-      return this.keys.get(marketId)!; // 返回缓存的市场信息
-    }
-
-    logger.trace({}, `获取市场 ${marketId} 的新密钥`); // 记录获取新市场信息的日志
-    const market = await this.fetch(marketId); // 从区块链获取市场信息
-    this.keys.set(marketId, market); // 将获取的市场信息存入缓存
-    return market; // 返回市场信息
-  }
-
-  // 私有方法：从区块链获取市场信息
-  private fetch(marketId: string): Promise<MinimalMarketLayoutV3> {
-    return getMinimalMarketV3(this.connection, new PublicKey(marketId), this.connection.commitment); // 获取市场信息
-  }
-}
Index: 1 AxisBot Solana Sniper Main/helpers/index.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/helpers/index.ts b/1 AxisBot Solana Sniper Main/helpers/index.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/helpers/index.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,7 +0,0 @@
-export * from './market';
-export * from './liquidity';
-export * from './logger';
-export * from './constants';
-export * from './token';
-export * from './wallet';
-export * from './promises'
Index: 1 AxisBot Solana Sniper Main/package.json
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/package.json b/1 AxisBot Solana Sniper Main/package.json
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/package.json	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,35 +0,0 @@
-{
-  "name": "axisbot-solana-sniper",
-  "author": "AxisBot",
-  "homepage": "https://axisbot.xyz",
-  "version": "1.0.1",
-  "scripts": {
-    "start": "ts-node index.ts",
-    "tsc": "tsc --noEmit"
-  },
-  "dependencies": {
-    "@metaplex-foundation/mpl-token-metadata": "^3.2.1",
-    "@raydium-io/raydium-sdk": "^1.3.1-beta.47",
-    "@solana/spl-token": "^0.4.0",
-    "@solana/web3.js": "^1.89.1",
-    "async-mutex": "^0.5.0",
-    "axios": "^1.6.8",
-    "bigint-buffer": "^1.1.5",
-    "bip39": "^3.1.0",
-    "bn.js": "^5.2.1",
-    "bs58": "^5.0.0",
-    "dotenv": "^16.4.1",
-    "ed25519-hd-key": "^1.3.0",
-    "i": "^0.3.7",
-    "npm": "^10.5.2",
-    "pino": "^8.18.0",
-    "pino-pretty": "^10.3.1",
-    "pino-std-serializers": "^6.2.2"
-  },
-  "devDependencies": {
-    "@types/bn.js": "^5.1.5",
-    "prettier": "^3.2.4",
-    "ts-node": "^10.9.2",
-    "typescript": "^5.3.3"
-  }
-}
Index: 2 AxisBot Spam Sniper/README.md
===================================================================
diff --git a/2 AxisBot Spam Sniper/README.md b/2 AxisBot Spam Sniper/README.md
deleted file mode 100644
--- a/2 AxisBot Spam Sniper/README.md	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,34 +0,0 @@
-# AxisBot Solana Spam Sniper
-
-## 概述：
-此项目是一个 Solana SPL 代币的狙击程序，旨在通过扫描 Solana 区块链上的交易，尽早在 Raydium 新流动性对的第一根价格蜡烛内完成代币交换（购买）。
-
-## 程序工作原理：
-- 扫描 Solana 区块链，寻找“初始化市场”交易，并解码以获取所有必要的流动性池密钥和相关信息。
-- 在流动性池上线之前，不断发送和重试“交换”交易，最小化交易与流动性池创建之间的时间差。
-- 当发送有效交易后，开始跟踪用户的位置，扫描并解码链上流动性池信息以获取当前最准确的价格/百分比增益。
-
-## 环境要求：
-需要 npm 版本 18.17.0 或更低。
-
-## 设置步骤：
-按以下说明安装并运行程序（假设已安装 Node.js）：
-1. 创建一个 Solana 钱包，并获取公钥和私钥（推荐使用 Phantom 钱包）。
-2. 获取 Solana RPC/WebSocket 连接，例如 `https://solana-mainnet.rpc.extrnode.com/5b667693-6518-4921-8ea1-4f65ff09c463` 和 `wss://solana-mainnet.rpc.extrnode.com/5b667693-6518-4921-8ea1-4f65ff09c463` 以进行测试。
-3. 运行 `npm install` 来安装依赖项。
-4. 在 `utils/config.js` 文件中，输入公钥、私钥及上述两个 RPC 连接。同时，设置每次交换使用的 SOL 数量。
-
-## 运行脚本：
-该项目包含两种不同的策略用于狙击新流动性对：
-
-### **策略 #1：**
-- 第一种策略从创建流动性池的交易中获取所需的流动性池密钥。运行脚本使用 `node strategy1/start1.js`。由于 Solana 的某些 RPC 节点可能会丢弃交易，因此交易可能会失败多次后才成功。
-- **注意：** 此脚本较慢，必须等待“添加流动性”交易达到“已确认”状态才能获取池数据，这导致从池创建到交换交易之间约有 30 秒的延迟。
-
-### **策略 #2：**
-- 第二种策略从“初始化市场”交易中获取流动性池密钥，该交易通常发生在流动性池上线前大约 2 分钟。这使得所有池密钥可以提前计算。该脚本每秒多次重试交换交易，允许在“添加流动性”交易的“处理中”状态发送交换交易，而非等待“已确认”，大大减少了流动性池创建与交换交易之间的时间差。运行此脚本使用 `node strategy2/start2.js`。
-- **注意：** 两个脚本都使用相同的交换/仓位管理系统，存放于 `./swap/swap1.js` 和 `/swap/swap2.js` 中。
-
-### **附加说明：**
-- 程序启动后，只有在找到新的市场 ID/池时才会显示输出。
-- 关于“amm 账户所有者不匹配该程序 + 错误 0x1b”：此错误发生在程序向尚未有流动性的池发送交换交易时。交易的频繁发送是狙击策略的一部分，直到池子有流动性并成功进行交换，错误会持续出现。
\ No newline at end of file
Index: 2 AxisBot Spam Sniper/utils/util.js
===================================================================
diff --git a/2 AxisBot Spam Sniper/utils/util.js b/2 AxisBot Spam Sniper/utils/util.js
deleted file mode 100644
--- a/2 AxisBot Spam Sniper/utils/util.js	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,70 +0,0 @@
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.sleepTime = exports.getATAAddress = exports.buildAndSendTx = exports.getWalletTokenAccount = exports.sendTx = void 0;
-const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
-const web3_js_1 = require("@solana/web3.js");
-const config_1 = require("./config");
-function sendTx(connection, payer, txs, options) {
-    return __awaiter(this, void 0, void 0, function* () {
-        const txids = [];
-        for (const iTx of txs) {
-            if (iTx instanceof web3_js_1.VersionedTransaction) {
-                iTx.sign([payer]);
-                txids.push(yield connection.sendTransaction(iTx, options));
-            }
-            else {
-                txids.push(yield connection.sendTransaction(iTx, [payer], options));
-            }
-        }
-        return txids;
-    });
-}
-exports.sendTx = sendTx;
-function getWalletTokenAccount(connection, wallet) {
-    return __awaiter(this, void 0, void 0, function* () {
-        const walletTokenAccount = yield connection.getTokenAccountsByOwner(wallet, {
-            programId: raydium_sdk_1.TOKEN_PROGRAM_ID,
-        });
-        return walletTokenAccount.value.map((i) => ({
-            pubkey: i.pubkey,
-            programId: i.account.owner,
-            accountInfo: raydium_sdk_1.SPL_ACCOUNT_LAYOUT.decode(i.account.data),
-        }));
-    });
-}
-exports.getWalletTokenAccount = getWalletTokenAccount;
-function buildAndSendTx(innerSimpleV0Transaction, options) {
-    return __awaiter(this, void 0, void 0, function* () {
-        const willSendTx = yield (0, raydium_sdk_1.buildSimpleTransaction)({
-            connection: config_1.connection,
-            makeTxVersion: config_1.makeTxVersion,
-            payer: config_1.wallet.publicKey,
-            innerTransactions: innerSimpleV0Transaction,
-            addLookupTableInfo: config_1.addLookupTableInfo,
-        });
-        return yield sendTx(config_1.connection, config_1.wallet, willSendTx, options);
-    });
-}
-exports.buildAndSendTx = buildAndSendTx;
-function getATAAddress(programId, owner, mint) {
-    const { publicKey, nonce } = (0, raydium_sdk_1.findProgramAddress)([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], new web3_js_1.PublicKey("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"));
-    return { publicKey, nonce };
-}
-exports.getATAAddress = getATAAddress;
-function sleepTime(ms) {
-    return __awaiter(this, void 0, void 0, function* () {
-        console.log((new Date()).toLocaleString(), 'sleepTime', ms);
-        return new Promise(resolve => setTimeout(resolve, ms));
-    });
-}
-exports.sleepTime = sleepTime;
-//# sourceMappingURL=util.js.map
\ No newline at end of file
Index: .idea/modules.xml
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
deleted file mode 100644
--- a/.idea/modules.xml	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/.idea/AxisBot(汉化).iml" filepath="$PROJECT_DIR$/.idea/AxisBot(汉化).iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
Index: 2 AxisBot Spam Sniper/strategy2/derivePoolKeys.js
===================================================================
diff --git a/2 AxisBot Spam Sniper/strategy2/derivePoolKeys.js b/2 AxisBot Spam Sniper/strategy2/derivePoolKeys.js
deleted file mode 100644
--- a/2 AxisBot Spam Sniper/strategy2/derivePoolKeys.js	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,100 +0,0 @@
-const web3 = require('@solana/web3.js');
-const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
-const spl = require('@solana/spl-token');
-const {Market} = require('@openbook-dex/openbook');
-const config = require('../utils/config.js');
-
-const connection = config.connection;
-
-const wsolAddress = 'So11111111111111111111111111111111111111112';
-const openbookProgramId = new web3.PublicKey('srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX');
-
-const rayProgram = new web3.PublicKey('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8');
-const myAccount = new web3.PublicKey(config.ownerAddress);
-
-async function derivePoolKeys(id){
-    console.log(id);
-    const marketId = new web3.PublicKey(id);
-
-    const marketInfo = await getMarketInfo(marketId);
-    const marketDeco = await getDecodedData(marketInfo);
-
-    const baseMint = marketDeco.baseMint;
-    const baseMintData = await getMintData(baseMint);
-    const baseDecimals = await getDecimals(baseMintData);
-    const ownerBaseAta = await getOwnerAta(baseMint, myAccount);
-    
-    const quoteMint = marketDeco.quoteMint;
-    const quoteMintData = await getMintData(quoteMint);
-    const quoteDecimals = await getDecimals(quoteMintData);
-    const ownerQuoteAta = await getOwnerAta(quoteMint, myAccount);
-
-    const authority = (raydium_sdk_1.findProgramAddress([Buffer.from([97, 109, 109, 32, 97, 117, 116, 104, 111, 114, 105, 116, 121])], rayProgram))['publicKey'];
-    // const marketAuthority = getVaultSigner(marketId, marketDeco);
-
-    const poolKeys = {
-        id: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('amm_associated_seed', 'utf-8')], rayProgram)['publicKey'],
-        baseMint: baseMint,
-        quoteMint, quoteMint,
-        lpMint: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('lp_mint_associated_seed', 'utf-8')], rayProgram)['publicKey'],
-        baseDecimals: baseDecimals,
-        quoteDecimals: quoteDecimals,
-        lpDecimals: baseDecimals,
-        version: 4,
-        programId: rayProgram,
-        authority: authority,
-        openOrders: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('open_order_associated_seed', 'utf-8')], rayProgram)['publicKey'],
-        targetOrders: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('target_associated_seed', 'utf-8')], rayProgram)['publicKey'],
-        baseVault: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('coin_vault_associated_seed', 'utf-8')], rayProgram)['publicKey'],
-        quoteVault: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('pc_vault_associated_seed', 'utf-8')], rayProgram)['publicKey'],
-        // withdrawQueue: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('withdraw_associated_seed', 'utf-8')], rayProgram)['publicKey'],
-        // lpVault: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('temp_lp_token_associated_seed', 'utf-8')], rayProgram)['publicKey'],
-        withdrawQueue: new web3.PublicKey('11111111111111111111111111111111'),
-        lpVault: new web3.PublicKey('11111111111111111111111111111111'),
-        marketVersion: 3,
-        marketProgramId: openbookProgramId,
-        // marketProgramId: new web3.PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'),
-        marketId: marketId,
-        marketAuthority: raydium_sdk_1.Market.getAssociatedAuthority({ programId: new web3.PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'), marketId: marketId }).publicKey,
-        marketBaseVault: marketDeco.baseVault,
-        marketQuoteVault: marketDeco.quoteVault,
-        marketBids: marketDeco.bids,
-        marketAsks: marketDeco.asks,
-        marketEventQueue: marketDeco.eventQueue,
-        // ownerBaseAta: ownerBaseAta,
-        // ownerQuoteAta: ownerQuoteAta,
-        // marketAuthority: marketAuthority,
-        // coinVault: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('pc_vault_associated_seed', 'utf-8')], rayProgram)['publicKey'],
-        lookupTableAccount: web3.PublicKey.default
-    };
-    return poolKeys;
-}
-exports.derivePoolKeys = derivePoolKeys;
-
-async function getMarketInfo(marketId){
-    const marketInfo = await connection.getAccountInfo(marketId);
-    return marketInfo;
-}
-
-async function getDecodedData(marketInfo){
-    return await Market.getLayout(openbookProgramId).decode(marketInfo.data);
-}
-
-async function getMintData(mint){
-    return await connection.getAccountInfo(mint);
-}
-
-async function getDecimals(mintData){
-    return raydium_sdk_1.SPL_MINT_LAYOUT.decode(mintData.data).decimals;
-}
-
-async function getOwnerAta(mint, publicKey){
-    const foundAta = web3.PublicKey.findProgramAddressSync([publicKey.toBuffer(), spl.TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], spl.ASSOCIATED_TOKEN_PROGRAM_ID)[0];
-    return foundAta;
-}
-
-function getVaultSigner(marketId, marketDeco){
-    const seeds = [marketId.toBuffer()];
-    const seedsWithNonce = seeds.concat(Buffer.from([Number(marketDeco.vaultSignerNonce.toString())]), Buffer.alloc(7));
-    return web3.PublicKey.createProgramAddressSync(seedsWithNonce, openbookProgramId);
-}
\ No newline at end of file
Index: 1 AxisBot Solana Sniper Main/helpers/liquidity.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/helpers/liquidity.ts b/1 AxisBot Solana Sniper Main/helpers/liquidity.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/helpers/liquidity.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,45 +0,0 @@
-// 导入所需的模块和库
-import { PublicKey } from '@solana/web3.js'; // Solana 相关库
-import { Liquidity, LiquidityPoolKeys, LiquidityStateV4, MAINNET_PROGRAM_ID, Market } from '@raydium-io/raydium-sdk'; // Raydium SDK
-import { MinimalMarketLayoutV3 } from './market'; // 最小市场布局
-
-// 创建流动池密钥的函数
-export function createPoolKeys(
-  id: PublicKey, // 流动池 ID
-  accountData: LiquidityStateV4, // 流动池状态
-  minimalMarketLayoutV3: MinimalMarketLayoutV3, // 最小市场布局
-): LiquidityPoolKeys { // 返回流动池密钥
-  return {
-    id, // 流动池 ID
-    baseMint: accountData.baseMint, // 基础代币的 mint 地址
-    quoteMint: accountData.quoteMint, // 报价代币的 mint 地址
-    lpMint: accountData.lpMint, // 流动性代币的 mint 地址
-    baseDecimals: accountData.baseDecimal.toNumber(), // 基础代币的小数位数
-    quoteDecimals: accountData.quoteDecimal.toNumber(), // 报价代币的小数位数
-    lpDecimals: 5, // 流动性代币的小数位数
-    version: 4, // 版本号
-    programId: MAINNET_PROGRAM_ID.AmmV4, // 程序 ID
-    authority: Liquidity.getAssociatedAuthority({ // 获取关联的授权公钥
-      programId: MAINNET_PROGRAM_ID.AmmV4,
-    }).publicKey,
-    openOrders: accountData.openOrders, // 当前开放订单
-    targetOrders: accountData.targetOrders, // 目标订单
-    baseVault: accountData.baseVault, // 基础代币的库房地址
-    quoteVault: accountData.quoteVault, // 报价代币的库房地址
-    marketVersion: 3, // 市场版本号
-    marketProgramId: accountData.marketProgramId, // 市场程序 ID
-    marketId: accountData.marketId, // 市场 ID
-    marketAuthority: Market.getAssociatedAuthority({ // 获取市场的关联授权公钥
-      programId: accountData.marketProgramId,
-      marketId: accountData.marketId,
-    }).publicKey,
-    marketBaseVault: accountData.baseVault, // 市场基础代币的库房地址
-    marketQuoteVault: accountData.quoteVault, // 市场报价代币的库房地址
-    marketBids: minimalMarketLayoutV3.bids, // 市场买入订单
-    marketAsks: minimalMarketLayoutV3.asks, // 市场卖出订单
-    marketEventQueue: minimalMarketLayoutV3.eventQueue, // 市场事件队列
-    withdrawQueue: accountData.withdrawQueue, // 提款队列
-    lpVault: accountData.lpVault, // 流动性代币库房地址
-    lookupTableAccount: PublicKey.default, // 查找表账户
-  };
-}
Index: 1 AxisBot Solana Sniper Main/cache/pool.cache.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/cache/pool.cache.ts b/1 AxisBot Solana Sniper Main/cache/pool.cache.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/cache/pool.cache.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,25 +0,0 @@
-// 导入所需的模块和库
-import { LiquidityStateV4 } from '@raydium-io/raydium-sdk'; // Raydium SDK
-import { logger } from '../helpers'; // 自定义日志记录器
-
-// 创建 PoolCache 类
-export class PoolCache {
-  private readonly keys: Map<string, { id: string; state: LiquidityStateV4 }> = new Map< // 存储池的 Map
-    string,
-    { id: string; state: LiquidityStateV4 } // 键为代币 mint，值为池 ID 和状态
-  >();
-
-  // 保存池信息的方法
-  public save(id: string, state: LiquidityStateV4) {
-    // 如果状态的基础代币 mint 不在缓存中
-    if (!this.keys.has(state.baseMint.toString())) {
-      logger.trace(`缓存新池，代币 mint: ${state.baseMint.toString()}`); // 记录缓存新池的信息
-      this.keys.set(state.baseMint.toString(), { id, state }); // 将池信息存入缓存
-    }
-  }
-
-  // 获取池信息的方法
-  public async get(mint: string): Promise<{ id: string; state: LiquidityStateV4 }> {
-    return this.keys.get(mint)!; // 返回缓存的池信息
-  }
-}
Index: 1 AxisBot Solana Sniper Main/filters/pool-size.filter.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/filters/pool-size.filter.ts b/1 AxisBot Solana Sniper Main/filters/pool-size.filter.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/filters/pool-size.filter.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,50 +0,0 @@
-// 导入所需的模块和库
-import { Filter, FilterResult } from './pool-filters'; // 过滤器接口和结果类型
-import { LiquidityPoolKeysV4, Token, TokenAmount } from '@raydium-io/raydium-sdk'; // Raydium SDK
-import { Connection } from '@solana/web3.js'; // Solana 相关库
-import { logger } from '../helpers'; // 自定义日志记录器
-
-// 创建 PoolSizeFilter 类实现 Filter 接口
-export class PoolSizeFilter implements Filter {
-  constructor(
-    private readonly connection: Connection, // Solana 连接
-    private readonly quoteToken: Token, // 报价代币
-    private readonly minPoolSize: TokenAmount, // 最小池大小
-    private readonly maxPoolSize: TokenAmount, // 最大池大小
-  ) {}
-
-  // 执行过滤器的方法
-  async execute(poolKeys: LiquidityPoolKeysV4): Promise<FilterResult> {
-    try {
-      // 获取报价库的账户余额
-      const response = await this.connection.getTokenAccountBalance(poolKeys.quoteVault, this.connection.commitment);
-      const poolSize = new TokenAmount(this.quoteToken, response.value.amount, true); // 创建池大小的 TokenAmount 实例
-      let inRange = true; // 默认池大小在范围内
-
-      // 检查最大池大小
-      if (!this.maxPoolSize?.isZero()) {
-        inRange = poolSize.raw.lte(this.maxPoolSize.raw); // 检查当前池大小是否小于等于最大池大小
-
-        if (!inRange) {
-          return { ok: false, message: `池大小 -> 池大小 ${poolSize.toFixed()} > ${this.maxPoolSize.toFixed()}` }; // 返回未通过的结果
-        }
-      }
-
-      // 检查最小池大小
-      if (!this.minPoolSize?.isZero()) {
-        inRange = poolSize.raw.gte(this.minPoolSize.raw); // 检查当前池大小是否大于等于最小池大小
-
-        if (!inRange) {
-          return { ok: false, message: `池大小 -> 池大小 ${poolSize.toFixed()} < ${this.minPoolSize.toFixed()}` }; // 返回未通过的结果
-        }
-      }
-
-      return { ok: inRange }; // 返回检查结果
-    } catch (error) {
-      // 记录错误日志
-      logger.error({ mint: poolKeys.baseMint }, `检查池大小失败`);
-    }
-
-    return { ok: false, message: '池大小 -> 检查池大小失败' }; // 返回未通过的结果
-  }
-}
Index: 1 AxisBot Solana Sniper Main/transactions/default-transaction-executor.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/transactions/default-transaction-executor.ts b/1 AxisBot Solana Sniper Main/transactions/default-transaction-executor.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/transactions/default-transaction-executor.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,49 +0,0 @@
-// 导入所需的模块和库
-import {
-  BlockhashWithExpiryBlockHeight,
-  Connection,
-  Keypair,
-  Transaction,
-  VersionedTransaction,
-} from '@solana/web3.js'; // Solana 相关库
-import { TransactionExecutor } from './transaction-executor.interface'; // 交易执行器接口
-import { logger } from '../helpers'; // 日志记录器
-
-// 默认交易执行器类
-export class DefaultTransactionExecutor implements TransactionExecutor {
-  constructor(private readonly connection: Connection) {} // 初始化连接
-
-  // 执行并确认交易的公共方法
-  public async executeAndConfirm(
-    transaction: VersionedTransaction, // 版本化交易
-    payer: Keypair, // 付款方的密钥对
-    latestBlockhash: BlockhashWithExpiryBlockHeight, // 最新区块哈希和过期区块高度
-  ): Promise<{ confirmed: boolean; signature?: string }> {
-    logger.debug('正在执行交易...'); // 记录交易执行日志
-    const signature = await this.execute(transaction); // 执行交易并获取签名
-
-    logger.debug({ signature }, '正在确认交易...'); // 记录确认交易日志
-    return this.confirm(signature, latestBlockhash); // 确认交易并返回结果
-  }
-
-  // 私有方法：执行交易
-  private async execute(transaction: Transaction | VersionedTransaction) {
-    return this.connection.sendRawTransaction(transaction.serialize(), { // 发送序列化的交易
-      preflightCommitment: this.connection.commitment, // 提交前的确认级别
-    });
-  }
-
-  // 私有方法：确认交易
-  private async confirm(signature: string, latestBlockhash: BlockhashWithExpiryBlockHeight) {
-    const confirmation = await this.connection.confirmTransaction(
-      {
-        signature, // 交易签名
-        lastValidBlockHeight: latestBlockhash.lastValidBlockHeight, // 最后有效区块高度
-        blockhash: latestBlockhash.blockhash, // 区块哈希
-      },
-      this.connection.commitment, // 提交的确认级别
-    );
-
-    return { confirmed: !confirmation.value.err, signature }; // 返回确认结果
-  }
-}
Index: 1 AxisBot Solana Sniper Main/tsconfig.json
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/tsconfig.json b/1 AxisBot Solana Sniper Main/tsconfig.json
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/tsconfig.json	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,109 +0,0 @@
-{
-  "compilerOptions": {
-    /* Visit https://aka.ms/tsconfig to read more about this file */
-
-    /* Projects */
-    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
-    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
-    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
-    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
-    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
-    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */
-
-    /* Language and Environment */
-    "target": "es2016",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
-    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
-    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
-    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
-    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
-    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
-    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
-    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
-    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
-    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
-    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
-    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */
-
-    /* Modules */
-    "module": "commonjs",                                /* Specify what module code is generated. */
-    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
-    // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
-    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
-    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
-    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
-    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
-    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
-    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
-    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
-    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
-    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
-    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
-    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
-    "resolveJsonModule": true,                        /* Enable importing .json files. */
-    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
-    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */
-
-    /* JavaScript Support */
-    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
-    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
-    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */
-
-    /* Emit */
-    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
-    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
-    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
-    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
-    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
-    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
-    // "outDir": "./",                                   /* Specify an output folder for all emitted files. */
-    // "removeComments": true,                           /* Disable emitting comments. */
-    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
-    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
-    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */
-    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
-    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
-    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
-    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
-    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
-    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
-    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
-    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
-    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
-    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
-    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
-    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */
-
-    /* Interop Constraints */
-    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
-    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
-    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
-    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
-    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
-    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */
-
-    /* Type Checking */
-    "strict": true,                                      /* Enable all strict type-checking options. */
-    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
-    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
-    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
-    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
-    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
-    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
-    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
-    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
-    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
-    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
-    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
-    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
-    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
-    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
-    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
-    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
-    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
-    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */
-
-    /* Completeness */
-    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
-    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
-  }
-}
Index: 1 AxisBot Solana Sniper Main/package-lock.json
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/package-lock.json b/1 AxisBot Solana Sniper Main/package-lock.json
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/package-lock.json	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,4016 +0,0 @@
-{
-  "name": "axisbot-solana-sniper",
-  "version": "1.0.1",
-  "lockfileVersion": 3,
-  "requires": true,
-  "packages": {
-    "": {
-      "name": "axisbot-solana-sniper",
-      "version": "1.0.1",
-      "dependencies": {
-        "@metaplex-foundation/mpl-token-metadata": "^3.2.1",
-        "@raydium-io/raydium-sdk": "^1.3.1-beta.47",
-        "@solana/spl-token": "^0.4.0",
-        "@solana/web3.js": "^1.89.1",
-        "async-mutex": "^0.5.0",
-        "axios": "^1.6.8",
-        "bigint-buffer": "^1.1.5",
-        "bip39": "^3.1.0",
-        "bn.js": "^5.2.1",
-        "bs58": "^5.0.0",
-        "dotenv": "^16.4.1",
-        "ed25519-hd-key": "^1.3.0",
-        "i": "^0.3.7",
-        "npm": "^10.5.2",
-        "pino": "^8.18.0",
-        "pino-pretty": "^10.3.1",
-        "pino-std-serializers": "^6.2.2"
-      },
-      "devDependencies": {
-        "@types/bn.js": "^5.1.5",
-        "prettier": "^3.2.4",
-        "ts-node": "^10.9.2",
-        "typescript": "^5.3.3"
-      }
-    },
-    "node_modules/@babel/runtime": {
-      "version": "7.23.8",
-      "license": "MIT",
-      "dependencies": {
-        "regenerator-runtime": "^0.14.0"
-      },
-      "engines": {
-        "node": ">=6.9.0"
-      }
-    },
-    "node_modules/@cspotcode/source-map-support": {
-      "version": "0.8.1",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jridgewell/trace-mapping": "0.3.9"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/@jridgewell/resolve-uri": {
-      "version": "3.1.1",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=6.0.0"
-      }
-    },
-    "node_modules/@jridgewell/sourcemap-codec": {
-      "version": "1.4.15",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/@jridgewell/trace-mapping": {
-      "version": "0.3.9",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jridgewell/resolve-uri": "^3.0.3",
-        "@jridgewell/sourcemap-codec": "^1.4.10"
-      }
-    },
-    "node_modules/@metaplex-foundation/mpl-token-metadata": {
-      "version": "3.2.1",
-      "resolved": "https://registry.npmjs.org/@metaplex-foundation/mpl-token-metadata/-/mpl-token-metadata-3.2.1.tgz",
-      "integrity": "sha512-26W1NhQwDWmLOg/pBRYut7x/vEs/5kFS2sWVEY5/X0f2jJOLhnd4NaZQcq+5u+XZsXvm1jq2AtrRGPNK43oqWQ==",
-      "dependencies": {
-        "@metaplex-foundation/mpl-toolbox": "^0.9.4"
-      },
-      "peerDependencies": {
-        "@metaplex-foundation/umi": ">= 0.8.2 < 1"
-      }
-    },
-    "node_modules/@metaplex-foundation/mpl-toolbox": {
-      "version": "0.9.4",
-      "resolved": "https://registry.npmjs.org/@metaplex-foundation/mpl-toolbox/-/mpl-toolbox-0.9.4.tgz",
-      "integrity": "sha512-fd6JxfoLbj/MM8FG2x91KYVy1U6AjBQw4qjt7+Da3trzQaWnSaYHDcYRG/53xqfvZ9qofY1T2t53GXPlD87lnQ==",
-      "peerDependencies": {
-        "@metaplex-foundation/umi": ">= 0.8.2 < 1"
-      }
-    },
-    "node_modules/@metaplex-foundation/umi": {
-      "version": "0.9.1",
-      "resolved": "https://registry.npmjs.org/@metaplex-foundation/umi/-/umi-0.9.1.tgz",
-      "integrity": "sha512-IhHoOvp4vfO/++YL+78+iVuLM53+FDwUOZDYgH6lx0jYXyQ27BeaieeR5i+q3A9dz4KxQo5Nzc5aCA1109QGCQ==",
-      "peer": true,
-      "dependencies": {
-        "@metaplex-foundation/umi-options": "^0.8.9",
-        "@metaplex-foundation/umi-public-keys": "^0.8.9",
-        "@metaplex-foundation/umi-serializers": "^0.9.0"
-      }
-    },
-    "node_modules/@metaplex-foundation/umi-options": {
-      "version": "0.8.9",
-      "resolved": "https://registry.npmjs.org/@metaplex-foundation/umi-options/-/umi-options-0.8.9.tgz",
-      "integrity": "sha512-jSQ61sZMPSAk/TXn8v8fPqtz3x8d0/blVZXLLbpVbo2/T5XobiI6/MfmlUosAjAUaQl6bHRF8aIIqZEFkJiy4A==",
-      "peer": true
-    },
-    "node_modules/@metaplex-foundation/umi-public-keys": {
-      "version": "0.8.9",
-      "resolved": "https://registry.npmjs.org/@metaplex-foundation/umi-public-keys/-/umi-public-keys-0.8.9.tgz",
-      "integrity": "sha512-CxMzN7dgVGOq9OcNCJe2casKUpJ3RmTVoOvDFyeoTQuK+vkZ1YSSahbqC1iGuHEtKTLSjtWjKvUU6O7zWFTw3Q==",
-      "peer": true,
-      "dependencies": {
-        "@metaplex-foundation/umi-serializers-encodings": "^0.8.9"
-      }
-    },
-    "node_modules/@metaplex-foundation/umi-serializers": {
-      "version": "0.9.0",
-      "resolved": "https://registry.npmjs.org/@metaplex-foundation/umi-serializers/-/umi-serializers-0.9.0.tgz",
-      "integrity": "sha512-hAOW9Djl4w4ioKeR4erDZl5IG4iJdP0xA19ZomdaCbMhYAAmG/FEs5khh0uT2mq53/MnzWcXSUPoO8WBN4Q+Vg==",
-      "peer": true,
-      "dependencies": {
-        "@metaplex-foundation/umi-options": "^0.8.9",
-        "@metaplex-foundation/umi-public-keys": "^0.8.9",
-        "@metaplex-foundation/umi-serializers-core": "^0.8.9",
-        "@metaplex-foundation/umi-serializers-encodings": "^0.8.9",
-        "@metaplex-foundation/umi-serializers-numbers": "^0.8.9"
-      }
-    },
-    "node_modules/@metaplex-foundation/umi-serializers-core": {
-      "version": "0.8.9",
-      "resolved": "https://registry.npmjs.org/@metaplex-foundation/umi-serializers-core/-/umi-serializers-core-0.8.9.tgz",
-      "integrity": "sha512-WT82tkiYJ0Qmscp7uTj1Hz6aWQPETwaKLAENAUN5DeWghkuBKtuxyBKVvEOuoXerJSdhiAk0e8DWA4cxcTTQ/w==",
-      "peer": true
-    },
-    "node_modules/@metaplex-foundation/umi-serializers-encodings": {
-      "version": "0.8.9",
-      "resolved": "https://registry.npmjs.org/@metaplex-foundation/umi-serializers-encodings/-/umi-serializers-encodings-0.8.9.tgz",
-      "integrity": "sha512-N3VWLDTJ0bzzMKcJDL08U3FaqRmwlN79FyE4BHj6bbAaJ9LEHjDQ9RJijZyWqTm0jE7I750fU7Ow5EZL38Xi6Q==",
-      "peer": true,
-      "dependencies": {
-        "@metaplex-foundation/umi-serializers-core": "^0.8.9"
-      }
-    },
-    "node_modules/@metaplex-foundation/umi-serializers-numbers": {
-      "version": "0.8.9",
-      "resolved": "https://registry.npmjs.org/@metaplex-foundation/umi-serializers-numbers/-/umi-serializers-numbers-0.8.9.tgz",
-      "integrity": "sha512-NtBf1fnVNQJHFQjLFzRu2i9GGnigb9hOm/Gfrk628d0q0tRJB7BOM3bs5C61VAs7kJs4yd+pDNVAERJkknQ7Lg==",
-      "peer": true,
-      "dependencies": {
-        "@metaplex-foundation/umi-serializers-core": "^0.8.9"
-      }
-    },
-    "node_modules/@noble/curves": {
-      "version": "1.3.0",
-      "license": "MIT",
-      "dependencies": {
-        "@noble/hashes": "1.3.3"
-      },
-      "funding": {
-        "url": "https://paulmillr.com/funding/"
-      }
-    },
-    "node_modules/@noble/hashes": {
-      "version": "1.3.3",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 16"
-      },
-      "funding": {
-        "url": "https://paulmillr.com/funding/"
-      }
-    },
-    "node_modules/@raydium-io/raydium-sdk": {
-      "version": "1.3.1-beta.47",
-      "license": "GPL-3.0",
-      "dependencies": {
-        "@solana/buffer-layout": "^4.0.1",
-        "@solana/spl-token": "^0.3.9",
-        "axios": "^1.6.2",
-        "big.js": "^6.2.1",
-        "bn.js": "^5.2.1",
-        "decimal.js": "^10.4.3",
-        "decimal.js-light": "^2.5.1",
-        "fecha": "^4.2.3",
-        "lodash": "^4.17.21",
-        "toformat": "^2.0.0"
-      },
-      "peerDependencies": {
-        "@solana/web3.js": "^1.73.0"
-      }
-    },
-    "node_modules/@raydium-io/raydium-sdk/node_modules/@solana/spl-token": {
-      "version": "0.3.11",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@solana/buffer-layout": "^4.0.0",
-        "@solana/buffer-layout-utils": "^0.2.0",
-        "@solana/spl-token-metadata": "^0.1.2",
-        "buffer": "^6.0.3"
-      },
-      "engines": {
-        "node": ">=16"
-      },
-      "peerDependencies": {
-        "@solana/web3.js": "^1.88.0"
-      }
-    },
-    "node_modules/@solana/buffer-layout": {
-      "version": "4.0.1",
-      "license": "MIT",
-      "dependencies": {
-        "buffer": "~6.0.3"
-      },
-      "engines": {
-        "node": ">=5.10"
-      }
-    },
-    "node_modules/@solana/buffer-layout-utils": {
-      "version": "0.2.0",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@solana/buffer-layout": "^4.0.0",
-        "@solana/web3.js": "^1.32.0",
-        "bigint-buffer": "^1.1.5",
-        "bignumber.js": "^9.0.1"
-      },
-      "engines": {
-        "node": ">= 10"
-      }
-    },
-    "node_modules/@solana/codecs-core": {
-      "version": "2.0.0-experimental.8618508",
-      "license": "MIT"
-    },
-    "node_modules/@solana/codecs-data-structures": {
-      "version": "2.0.0-experimental.8618508",
-      "license": "MIT",
-      "dependencies": {
-        "@solana/codecs-core": "2.0.0-experimental.8618508",
-        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
-      }
-    },
-    "node_modules/@solana/codecs-numbers": {
-      "version": "2.0.0-experimental.8618508",
-      "license": "MIT",
-      "dependencies": {
-        "@solana/codecs-core": "2.0.0-experimental.8618508"
-      }
-    },
-    "node_modules/@solana/codecs-strings": {
-      "version": "2.0.0-experimental.8618508",
-      "license": "MIT",
-      "dependencies": {
-        "@solana/codecs-core": "2.0.0-experimental.8618508",
-        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
-      },
-      "peerDependencies": {
-        "fastestsmallesttextencoderdecoder": "^1.0.22"
-      }
-    },
-    "node_modules/@solana/options": {
-      "version": "2.0.0-experimental.8618508",
-      "license": "MIT",
-      "dependencies": {
-        "@solana/codecs-core": "2.0.0-experimental.8618508",
-        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
-      }
-    },
-    "node_modules/@solana/spl-token": {
-      "version": "0.4.0",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@solana/buffer-layout": "^4.0.0",
-        "@solana/buffer-layout-utils": "^0.2.0",
-        "@solana/spl-token-metadata": "^0.1.2",
-        "buffer": "^6.0.3"
-      },
-      "engines": {
-        "node": ">=16"
-      },
-      "peerDependencies": {
-        "@solana/web3.js": "^1.89.1"
-      }
-    },
-    "node_modules/@solana/spl-token-metadata": {
-      "version": "0.1.2",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@solana/codecs-core": "2.0.0-experimental.8618508",
-        "@solana/codecs-data-structures": "2.0.0-experimental.8618508",
-        "@solana/codecs-numbers": "2.0.0-experimental.8618508",
-        "@solana/codecs-strings": "2.0.0-experimental.8618508",
-        "@solana/options": "2.0.0-experimental.8618508",
-        "@solana/spl-type-length-value": "0.1.0"
-      },
-      "engines": {
-        "node": ">=16"
-      },
-      "peerDependencies": {
-        "@solana/web3.js": "^1.87.6"
-      }
-    },
-    "node_modules/@solana/spl-type-length-value": {
-      "version": "0.1.0",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "buffer": "^6.0.3"
-      },
-      "engines": {
-        "node": ">=16"
-      }
-    },
-    "node_modules/@solana/web3.js": {
-      "version": "1.89.1",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/runtime": "^7.23.4",
-        "@noble/curves": "^1.2.0",
-        "@noble/hashes": "^1.3.2",
-        "@solana/buffer-layout": "^4.0.1",
-        "agentkeepalive": "^4.5.0",
-        "bigint-buffer": "^1.1.5",
-        "bn.js": "^5.2.1",
-        "borsh": "^0.7.0",
-        "bs58": "^4.0.1",
-        "buffer": "6.0.3",
-        "fast-stable-stringify": "^1.0.0",
-        "jayson": "^4.1.0",
-        "node-fetch": "^2.7.0",
-        "rpc-websockets": "^7.5.1",
-        "superstruct": "^0.14.2"
-      }
-    },
-    "node_modules/@solana/web3.js/node_modules/base-x": {
-      "version": "3.0.9",
-      "license": "MIT",
-      "dependencies": {
-        "safe-buffer": "^5.0.1"
-      }
-    },
-    "node_modules/@solana/web3.js/node_modules/bs58": {
-      "version": "4.0.1",
-      "license": "MIT",
-      "dependencies": {
-        "base-x": "^3.0.2"
-      }
-    },
-    "node_modules/@solana/web3.js/node_modules/node-fetch": {
-      "version": "2.7.0",
-      "license": "MIT",
-      "dependencies": {
-        "whatwg-url": "^5.0.0"
-      },
-      "engines": {
-        "node": "4.x || >=6.0.0"
-      },
-      "peerDependencies": {
-        "encoding": "^0.1.0"
-      },
-      "peerDependenciesMeta": {
-        "encoding": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/@tsconfig/node10": {
-      "version": "1.0.9",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/@tsconfig/node12": {
-      "version": "1.0.11",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/@tsconfig/node14": {
-      "version": "1.0.3",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/@tsconfig/node16": {
-      "version": "1.0.3",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/@types/bn.js": {
-      "version": "5.1.5",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@types/node": "*"
-      }
-    },
-    "node_modules/@types/connect": {
-      "version": "3.4.38",
-      "license": "MIT",
-      "dependencies": {
-        "@types/node": "*"
-      }
-    },
-    "node_modules/@types/node": {
-      "version": "12.20.55",
-      "license": "MIT"
-    },
-    "node_modules/@types/ws": {
-      "version": "7.4.7",
-      "license": "MIT",
-      "dependencies": {
-        "@types/node": "*"
-      }
-    },
-    "node_modules/abort-controller": {
-      "version": "3.0.0",
-      "license": "MIT",
-      "dependencies": {
-        "event-target-shim": "^5.0.0"
-      },
-      "engines": {
-        "node": ">=6.5"
-      }
-    },
-    "node_modules/acorn": {
-      "version": "8.8.2",
-      "dev": true,
-      "license": "MIT",
-      "bin": {
-        "acorn": "bin/acorn"
-      },
-      "engines": {
-        "node": ">=0.4.0"
-      }
-    },
-    "node_modules/acorn-walk": {
-      "version": "8.2.0",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.4.0"
-      }
-    },
-    "node_modules/agentkeepalive": {
-      "version": "4.5.0",
-      "license": "MIT",
-      "dependencies": {
-        "humanize-ms": "^1.2.1"
-      },
-      "engines": {
-        "node": ">= 8.0.0"
-      }
-    },
-    "node_modules/arg": {
-      "version": "4.1.3",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/async-mutex": {
-      "version": "0.5.0",
-      "license": "MIT",
-      "dependencies": {
-        "tslib": "^2.4.0"
-      }
-    },
-    "node_modules/asynckit": {
-      "version": "0.4.0",
-      "license": "MIT"
-    },
-    "node_modules/atomic-sleep": {
-      "version": "1.0.0",
-      "license": "MIT",
-      "engines": {
-        "node": ">=8.0.0"
-      }
-    },
-    "node_modules/axios": {
-      "version": "1.6.8",
-      "resolved": "https://registry.npmjs.org/axios/-/axios-1.6.8.tgz",
-      "integrity": "sha512-v/ZHtJDU39mDpyBoFVkETcd/uNdxrWRrg3bKpOKzXFA6Bvqopts6ALSMU3y6ijYxbw2B+wPrIv46egTzJXCLGQ==",
-      "dependencies": {
-        "follow-redirects": "^1.15.6",
-        "form-data": "^4.0.0",
-        "proxy-from-env": "^1.1.0"
-      }
-    },
-    "node_modules/base-x": {
-      "version": "4.0.0",
-      "license": "MIT"
-    },
-    "node_modules/base64-js": {
-      "version": "1.5.1",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ],
-      "license": "MIT"
-    },
-    "node_modules/big.js": {
-      "version": "6.2.1",
-      "license": "MIT",
-      "engines": {
-        "node": "*"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/bigjs"
-      }
-    },
-    "node_modules/bigint-buffer": {
-      "version": "1.1.5",
-      "hasInstallScript": true,
-      "license": "Apache-2.0",
-      "dependencies": {
-        "bindings": "^1.3.0"
-      },
-      "engines": {
-        "node": ">= 10.0.0"
-      }
-    },
-    "node_modules/bignumber.js": {
-      "version": "9.1.2",
-      "license": "MIT",
-      "engines": {
-        "node": "*"
-      }
-    },
-    "node_modules/bindings": {
-      "version": "1.5.0",
-      "license": "MIT",
-      "dependencies": {
-        "file-uri-to-path": "1.0.0"
-      }
-    },
-    "node_modules/bip39": {
-      "version": "3.1.0",
-      "license": "ISC",
-      "dependencies": {
-        "@noble/hashes": "^1.2.0"
-      }
-    },
-    "node_modules/bn.js": {
-      "version": "5.2.1",
-      "license": "MIT"
-    },
-    "node_modules/borsh": {
-      "version": "0.7.0",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "bn.js": "^5.2.0",
-        "bs58": "^4.0.0",
-        "text-encoding-utf-8": "^1.0.2"
-      }
-    },
-    "node_modules/borsh/node_modules/base-x": {
-      "version": "3.0.9",
-      "license": "MIT",
-      "dependencies": {
-        "safe-buffer": "^5.0.1"
-      }
-    },
-    "node_modules/borsh/node_modules/bs58": {
-      "version": "4.0.1",
-      "license": "MIT",
-      "dependencies": {
-        "base-x": "^3.0.2"
-      }
-    },
-    "node_modules/bs58": {
-      "version": "5.0.0",
-      "license": "MIT",
-      "dependencies": {
-        "base-x": "^4.0.0"
-      }
-    },
-    "node_modules/buffer": {
-      "version": "6.0.3",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ],
-      "license": "MIT",
-      "dependencies": {
-        "base64-js": "^1.3.1",
-        "ieee754": "^1.2.1"
-      }
-    },
-    "node_modules/bufferutil": {
-      "version": "4.0.8",
-      "hasInstallScript": true,
-      "license": "MIT",
-      "optional": true,
-      "dependencies": {
-        "node-gyp-build": "^4.3.0"
-      },
-      "engines": {
-        "node": ">=6.14.2"
-      }
-    },
-    "node_modules/cipher-base": {
-      "version": "1.0.4",
-      "license": "MIT",
-      "dependencies": {
-        "inherits": "^2.0.1",
-        "safe-buffer": "^5.0.1"
-      }
-    },
-    "node_modules/colorette": {
-      "version": "2.0.20",
-      "license": "MIT"
-    },
-    "node_modules/combined-stream": {
-      "version": "1.0.8",
-      "license": "MIT",
-      "dependencies": {
-        "delayed-stream": "~1.0.0"
-      },
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
-    "node_modules/commander": {
-      "version": "2.20.3",
-      "license": "MIT"
-    },
-    "node_modules/create-hash": {
-      "version": "1.2.0",
-      "license": "MIT",
-      "dependencies": {
-        "cipher-base": "^1.0.1",
-        "inherits": "^2.0.1",
-        "md5.js": "^1.3.4",
-        "ripemd160": "^2.0.1",
-        "sha.js": "^2.4.0"
-      }
-    },
-    "node_modules/create-hmac": {
-      "version": "1.1.7",
-      "license": "MIT",
-      "dependencies": {
-        "cipher-base": "^1.0.3",
-        "create-hash": "^1.1.0",
-        "inherits": "^2.0.1",
-        "ripemd160": "^2.0.0",
-        "safe-buffer": "^5.0.1",
-        "sha.js": "^2.4.8"
-      }
-    },
-    "node_modules/create-require": {
-      "version": "1.1.1",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/dateformat": {
-      "version": "4.6.3",
-      "license": "MIT",
-      "engines": {
-        "node": "*"
-      }
-    },
-    "node_modules/decimal.js": {
-      "version": "10.4.3",
-      "license": "MIT"
-    },
-    "node_modules/decimal.js-light": {
-      "version": "2.5.1",
-      "license": "MIT"
-    },
-    "node_modules/delay": {
-      "version": "5.0.0",
-      "license": "MIT",
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/delayed-stream": {
-      "version": "1.0.0",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.4.0"
-      }
-    },
-    "node_modules/diff": {
-      "version": "4.0.2",
-      "dev": true,
-      "license": "BSD-3-Clause",
-      "engines": {
-        "node": ">=0.3.1"
-      }
-    },
-    "node_modules/dotenv": {
-      "version": "16.4.1",
-      "license": "BSD-2-Clause",
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/motdotla/dotenv?sponsor=1"
-      }
-    },
-    "node_modules/ed25519-hd-key": {
-      "version": "1.3.0",
-      "license": "MIT",
-      "dependencies": {
-        "create-hmac": "1.1.7",
-        "tweetnacl": "1.0.3"
-      }
-    },
-    "node_modules/end-of-stream": {
-      "version": "1.4.4",
-      "license": "MIT",
-      "dependencies": {
-        "once": "^1.4.0"
-      }
-    },
-    "node_modules/es6-promise": {
-      "version": "4.2.8",
-      "license": "MIT"
-    },
-    "node_modules/es6-promisify": {
-      "version": "5.0.0",
-      "license": "MIT",
-      "dependencies": {
-        "es6-promise": "^4.0.3"
-      }
-    },
-    "node_modules/event-target-shim": {
-      "version": "5.0.1",
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/eventemitter3": {
-      "version": "4.0.7",
-      "license": "MIT"
-    },
-    "node_modules/events": {
-      "version": "3.3.0",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.8.x"
-      }
-    },
-    "node_modules/eyes": {
-      "version": "0.1.8",
-      "engines": {
-        "node": "> 0.1.90"
-      }
-    },
-    "node_modules/fast-copy": {
-      "version": "3.0.1",
-      "license": "MIT"
-    },
-    "node_modules/fast-redact": {
-      "version": "3.2.0",
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/fast-safe-stringify": {
-      "version": "2.1.1",
-      "license": "MIT"
-    },
-    "node_modules/fast-stable-stringify": {
-      "version": "1.0.0",
-      "license": "MIT"
-    },
-    "node_modules/fastestsmallesttextencoderdecoder": {
-      "version": "1.0.22",
-      "license": "CC0-1.0",
-      "peer": true
-    },
-    "node_modules/fecha": {
-      "version": "4.2.3",
-      "license": "MIT"
-    },
-    "node_modules/file-uri-to-path": {
-      "version": "1.0.0",
-      "license": "MIT"
-    },
-    "node_modules/follow-redirects": {
-      "version": "1.15.6",
-      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.6.tgz",
-      "integrity": "sha512-wWN62YITEaOpSK584EZXJafH1AGpO8RVgElfkuXbTOrPX4fIfOyEpW/CsiNd8JdYrAoOvafRTOEnvsO++qCqFA==",
-      "funding": [
-        {
-          "type": "individual",
-          "url": "https://github.com/sponsors/RubenVerborgh"
-        }
-      ],
-      "engines": {
-        "node": ">=4.0"
-      },
-      "peerDependenciesMeta": {
-        "debug": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/form-data": {
-      "version": "4.0.0",
-      "license": "MIT",
-      "dependencies": {
-        "asynckit": "^0.4.0",
-        "combined-stream": "^1.0.8",
-        "mime-types": "^2.1.12"
-      },
-      "engines": {
-        "node": ">= 6"
-      }
-    },
-    "node_modules/hash-base": {
-      "version": "3.1.0",
-      "license": "MIT",
-      "dependencies": {
-        "inherits": "^2.0.4",
-        "readable-stream": "^3.6.0",
-        "safe-buffer": "^5.2.0"
-      },
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/hash-base/node_modules/readable-stream": {
-      "version": "3.6.2",
-      "license": "MIT",
-      "dependencies": {
-        "inherits": "^2.0.3",
-        "string_decoder": "^1.1.1",
-        "util-deprecate": "^1.0.1"
-      },
-      "engines": {
-        "node": ">= 6"
-      }
-    },
-    "node_modules/help-me": {
-      "version": "5.0.0",
-      "license": "MIT"
-    },
-    "node_modules/humanize-ms": {
-      "version": "1.2.1",
-      "license": "MIT",
-      "dependencies": {
-        "ms": "^2.0.0"
-      }
-    },
-    "node_modules/i": {
-      "version": "0.3.7",
-      "engines": {
-        "node": ">=0.4"
-      }
-    },
-    "node_modules/ieee754": {
-      "version": "1.2.1",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ],
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/inherits": {
-      "version": "2.0.4",
-      "license": "ISC"
-    },
-    "node_modules/isomorphic-ws": {
-      "version": "4.0.1",
-      "license": "MIT",
-      "peerDependencies": {
-        "ws": "*"
-      }
-    },
-    "node_modules/jayson": {
-      "version": "4.1.0",
-      "license": "MIT",
-      "dependencies": {
-        "@types/connect": "^3.4.33",
-        "@types/node": "^12.12.54",
-        "@types/ws": "^7.4.4",
-        "commander": "^2.20.3",
-        "delay": "^5.0.0",
-        "es6-promisify": "^5.0.0",
-        "eyes": "^0.1.8",
-        "isomorphic-ws": "^4.0.1",
-        "json-stringify-safe": "^5.0.1",
-        "JSONStream": "^1.3.5",
-        "uuid": "^8.3.2",
-        "ws": "^7.4.5"
-      },
-      "bin": {
-        "jayson": "bin/jayson.js"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/joycon": {
-      "version": "3.1.1",
-      "license": "MIT",
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/json-stringify-safe": {
-      "version": "5.0.1",
-      "license": "ISC"
-    },
-    "node_modules/jsonparse": {
-      "version": "1.3.1",
-      "engines": [
-        "node >= 0.2.0"
-      ],
-      "license": "MIT"
-    },
-    "node_modules/JSONStream": {
-      "version": "1.3.5",
-      "license": "(MIT OR Apache-2.0)",
-      "dependencies": {
-        "jsonparse": "^1.2.0",
-        "through": ">=2.2.7 <3"
-      },
-      "bin": {
-        "JSONStream": "bin.js"
-      },
-      "engines": {
-        "node": "*"
-      }
-    },
-    "node_modules/lodash": {
-      "version": "4.17.21",
-      "license": "MIT"
-    },
-    "node_modules/make-error": {
-      "version": "1.3.6",
-      "dev": true,
-      "license": "ISC"
-    },
-    "node_modules/md5.js": {
-      "version": "1.3.5",
-      "license": "MIT",
-      "dependencies": {
-        "hash-base": "^3.0.0",
-        "inherits": "^2.0.1",
-        "safe-buffer": "^5.1.2"
-      }
-    },
-    "node_modules/mime-db": {
-      "version": "1.52.0",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/mime-types": {
-      "version": "2.1.35",
-      "license": "MIT",
-      "dependencies": {
-        "mime-db": "1.52.0"
-      },
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/minimist": {
-      "version": "1.2.8",
-      "license": "MIT",
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/ms": {
-      "version": "2.1.3",
-      "license": "MIT"
-    },
-    "node_modules/node-gyp-build": {
-      "version": "4.8.0",
-      "license": "MIT",
-      "optional": true,
-      "bin": {
-        "node-gyp-build": "bin.js",
-        "node-gyp-build-optional": "optional.js",
-        "node-gyp-build-test": "build-test.js"
-      }
-    },
-    "node_modules/npm": {
-      "version": "10.5.2",
-      "bundleDependencies": [
-        "@isaacs/string-locale-compare",
-        "@npmcli/arborist",
-        "@npmcli/config",
-        "@npmcli/fs",
-        "@npmcli/map-workspaces",
-        "@npmcli/package-json",
-        "@npmcli/promise-spawn",
-        "@npmcli/redact",
-        "@npmcli/run-script",
-        "@sigstore/tuf",
-        "abbrev",
-        "archy",
-        "cacache",
-        "chalk",
-        "ci-info",
-        "cli-columns",
-        "cli-table3",
-        "columnify",
-        "fastest-levenshtein",
-        "fs-minipass",
-        "glob",
-        "graceful-fs",
-        "hosted-git-info",
-        "ini",
-        "init-package-json",
-        "is-cidr",
-        "json-parse-even-better-errors",
-        "libnpmaccess",
-        "libnpmdiff",
-        "libnpmexec",
-        "libnpmfund",
-        "libnpmhook",
-        "libnpmorg",
-        "libnpmpack",
-        "libnpmpublish",
-        "libnpmsearch",
-        "libnpmteam",
-        "libnpmversion",
-        "make-fetch-happen",
-        "minimatch",
-        "minipass",
-        "minipass-pipeline",
-        "ms",
-        "node-gyp",
-        "nopt",
-        "normalize-package-data",
-        "npm-audit-report",
-        "npm-install-checks",
-        "npm-package-arg",
-        "npm-pick-manifest",
-        "npm-profile",
-        "npm-registry-fetch",
-        "npm-user-validate",
-        "npmlog",
-        "p-map",
-        "pacote",
-        "parse-conflict-json",
-        "proc-log",
-        "qrcode-terminal",
-        "read",
-        "semver",
-        "spdx-expression-parse",
-        "ssri",
-        "supports-color",
-        "tar",
-        "text-table",
-        "tiny-relative-date",
-        "treeverse",
-        "validate-npm-package-name",
-        "which",
-        "write-file-atomic"
-      ],
-      "license": "Artistic-2.0",
-      "workspaces": [
-        "docs",
-        "smoke-tests",
-        "mock-globals",
-        "mock-registry",
-        "workspaces/*"
-      ],
-      "dependencies": {
-        "@isaacs/string-locale-compare": "^1.1.0",
-        "@npmcli/arborist": "^7.2.1",
-        "@npmcli/config": "^8.0.2",
-        "@npmcli/fs": "^3.1.0",
-        "@npmcli/map-workspaces": "^3.0.6",
-        "@npmcli/package-json": "^5.0.2",
-        "@npmcli/promise-spawn": "^7.0.1",
-        "@npmcli/redact": "^1.1.0",
-        "@npmcli/run-script": "^7.0.4",
-        "@sigstore/tuf": "^2.3.2",
-        "abbrev": "^2.0.0",
-        "archy": "~1.0.0",
-        "cacache": "^18.0.2",
-        "chalk": "^5.3.0",
-        "ci-info": "^4.0.0",
-        "cli-columns": "^4.0.0",
-        "cli-table3": "^0.6.4",
-        "columnify": "^1.6.0",
-        "fastest-levenshtein": "^1.0.16",
-        "fs-minipass": "^3.0.3",
-        "glob": "^10.3.12",
-        "graceful-fs": "^4.2.11",
-        "hosted-git-info": "^7.0.1",
-        "ini": "^4.1.2",
-        "init-package-json": "^6.0.2",
-        "is-cidr": "^5.0.5",
-        "json-parse-even-better-errors": "^3.0.1",
-        "libnpmaccess": "^8.0.1",
-        "libnpmdiff": "^6.0.3",
-        "libnpmexec": "^7.0.4",
-        "libnpmfund": "^5.0.1",
-        "libnpmhook": "^10.0.0",
-        "libnpmorg": "^6.0.1",
-        "libnpmpack": "^6.0.3",
-        "libnpmpublish": "^9.0.2",
-        "libnpmsearch": "^7.0.0",
-        "libnpmteam": "^6.0.0",
-        "libnpmversion": "^5.0.1",
-        "make-fetch-happen": "^13.0.0",
-        "minimatch": "^9.0.4",
-        "minipass": "^7.0.4",
-        "minipass-pipeline": "^1.2.4",
-        "ms": "^2.1.2",
-        "node-gyp": "^10.1.0",
-        "nopt": "^7.2.0",
-        "normalize-package-data": "^6.0.0",
-        "npm-audit-report": "^5.0.0",
-        "npm-install-checks": "^6.3.0",
-        "npm-package-arg": "^11.0.1",
-        "npm-pick-manifest": "^9.0.0",
-        "npm-profile": "^9.0.0",
-        "npm-registry-fetch": "^16.2.0",
-        "npm-user-validate": "^2.0.0",
-        "npmlog": "^7.0.1",
-        "p-map": "^4.0.0",
-        "pacote": "^17.0.6",
-        "parse-conflict-json": "^3.0.1",
-        "proc-log": "^3.0.0",
-        "qrcode-terminal": "^0.12.0",
-        "read": "^3.0.1",
-        "semver": "^7.6.0",
-        "spdx-expression-parse": "^4.0.0",
-        "ssri": "^10.0.5",
-        "supports-color": "^9.4.0",
-        "tar": "^6.2.1",
-        "text-table": "~0.2.0",
-        "tiny-relative-date": "^1.3.0",
-        "treeverse": "^3.0.0",
-        "validate-npm-package-name": "^5.0.0",
-        "which": "^4.0.0",
-        "write-file-atomic": "^5.0.1"
-      },
-      "bin": {
-        "npm": "bin/npm-cli.js",
-        "npx": "bin/npx-cli.js"
-      },
-      "engines": {
-        "node": "^18.17.0 || >=20.5.0"
-      }
-    },
-    "node_modules/npm/node_modules/@colors/colors": {
-      "version": "1.5.0",
-      "inBundle": true,
-      "license": "MIT",
-      "optional": true,
-      "engines": {
-        "node": ">=0.1.90"
-      }
-    },
-    "node_modules/npm/node_modules/@isaacs/cliui": {
-      "version": "8.0.2",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "string-width": "^5.1.2",
-        "string-width-cjs": "npm:string-width@^4.2.0",
-        "strip-ansi": "^7.0.1",
-        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
-        "wrap-ansi": "^8.1.0",
-        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/npm/node_modules/@isaacs/cliui/node_modules/ansi-regex": {
-      "version": "6.0.1",
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
-      }
-    },
-    "node_modules/npm/node_modules/@isaacs/cliui/node_modules/emoji-regex": {
-      "version": "9.2.2",
-      "inBundle": true,
-      "license": "MIT"
-    },
-    "node_modules/npm/node_modules/@isaacs/cliui/node_modules/string-width": {
-      "version": "5.1.2",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "eastasianwidth": "^0.2.0",
-        "emoji-regex": "^9.2.2",
-        "strip-ansi": "^7.0.1"
-      },
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/npm/node_modules/@isaacs/cliui/node_modules/strip-ansi": {
-      "version": "7.1.0",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-regex": "^6.0.1"
-      },
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
-      }
-    },
-    "node_modules/npm/node_modules/@isaacs/string-locale-compare": {
-      "version": "1.1.0",
-      "inBundle": true,
-      "license": "ISC"
-    },
-    "node_modules/npm/node_modules/@npmcli/agent": {
-      "version": "2.2.2",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "agent-base": "^7.1.0",
-        "http-proxy-agent": "^7.0.0",
-        "https-proxy-agent": "^7.0.1",
-        "lru-cache": "^10.0.1",
-        "socks-proxy-agent": "^8.0.3"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@npmcli/arborist": {
-      "version": "7.4.2",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "@isaacs/string-locale-compare": "^1.1.0",
-        "@npmcli/fs": "^3.1.0",
-        "@npmcli/installed-package-contents": "^2.0.2",
-        "@npmcli/map-workspaces": "^3.0.2",
-        "@npmcli/metavuln-calculator": "^7.0.0",
-        "@npmcli/name-from-folder": "^2.0.0",
-        "@npmcli/node-gyp": "^3.0.0",
-        "@npmcli/package-json": "^5.0.0",
-        "@npmcli/query": "^3.1.0",
-        "@npmcli/redact": "^1.1.0",
-        "@npmcli/run-script": "^7.0.2",
-        "bin-links": "^4.0.1",
-        "cacache": "^18.0.0",
-        "common-ancestor-path": "^1.0.1",
-        "hosted-git-info": "^7.0.1",
-        "json-parse-even-better-errors": "^3.0.0",
-        "json-stringify-nice": "^1.1.4",
-        "minimatch": "^9.0.4",
-        "nopt": "^7.0.0",
-        "npm-install-checks": "^6.2.0",
-        "npm-package-arg": "^11.0.1",
-        "npm-pick-manifest": "^9.0.0",
-        "npm-registry-fetch": "^16.2.0",
-        "npmlog": "^7.0.1",
-        "pacote": "^17.0.4",
-        "parse-conflict-json": "^3.0.0",
-        "proc-log": "^3.0.0",
-        "promise-all-reject-late": "^1.0.0",
-        "promise-call-limit": "^3.0.1",
-        "read-package-json-fast": "^3.0.2",
-        "semver": "^7.3.7",
-        "ssri": "^10.0.5",
-        "treeverse": "^3.0.0",
-        "walk-up-path": "^3.0.1"
-      },
-      "bin": {
-        "arborist": "bin/index.js"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@npmcli/config": {
-      "version": "8.2.2",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "@npmcli/map-workspaces": "^3.0.2",
-        "ci-info": "^4.0.0",
-        "ini": "^4.1.2",
-        "nopt": "^7.0.0",
-        "proc-log": "^3.0.0",
-        "read-package-json-fast": "^3.0.2",
-        "semver": "^7.3.5",
-        "walk-up-path": "^3.0.1"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@npmcli/disparity-colors": {
-      "version": "3.0.0",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "ansi-styles": "^4.3.0"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@npmcli/disparity-colors/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/npm/node_modules/@npmcli/fs": {
-      "version": "3.1.0",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "semver": "^7.3.5"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@npmcli/git": {
-      "version": "5.0.5",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "@npmcli/promise-spawn": "^7.0.0",
-        "lru-cache": "^10.0.1",
-        "npm-pick-manifest": "^9.0.0",
-        "proc-log": "^3.0.0",
-        "promise-inflight": "^1.0.1",
-        "promise-retry": "^2.0.1",
-        "semver": "^7.3.5",
-        "which": "^4.0.0"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@npmcli/installed-package-contents": {
-      "version": "2.0.2",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "npm-bundled": "^3.0.0",
-        "npm-normalize-package-bin": "^3.0.0"
-      },
-      "bin": {
-        "installed-package-contents": "lib/index.js"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@npmcli/map-workspaces": {
-      "version": "3.0.6",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "@npmcli/name-from-folder": "^2.0.0",
-        "glob": "^10.2.2",
-        "minimatch": "^9.0.0",
-        "read-package-json-fast": "^3.0.0"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@npmcli/metavuln-calculator": {
-      "version": "7.0.0",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "cacache": "^18.0.0",
-        "json-parse-even-better-errors": "^3.0.0",
-        "pacote": "^17.0.0",
-        "semver": "^7.3.5"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@npmcli/name-from-folder": {
-      "version": "2.0.0",
-      "inBundle": true,
-      "license": "ISC",
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@npmcli/node-gyp": {
-      "version": "3.0.0",
-      "inBundle": true,
-      "license": "ISC",
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@npmcli/package-json": {
-      "version": "5.0.2",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "@npmcli/git": "^5.0.0",
-        "glob": "^10.2.2",
-        "hosted-git-info": "^7.0.0",
-        "json-parse-even-better-errors": "^3.0.0",
-        "normalize-package-data": "^6.0.0",
-        "proc-log": "^3.0.0",
-        "semver": "^7.5.3"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@npmcli/promise-spawn": {
-      "version": "7.0.1",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "which": "^4.0.0"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@npmcli/query": {
-      "version": "3.1.0",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "postcss-selector-parser": "^6.0.10"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@npmcli/redact": {
-      "version": "1.1.0",
-      "inBundle": true,
-      "license": "ISC",
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@npmcli/run-script": {
-      "version": "7.0.4",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "@npmcli/node-gyp": "^3.0.0",
-        "@npmcli/package-json": "^5.0.0",
-        "@npmcli/promise-spawn": "^7.0.0",
-        "node-gyp": "^10.0.0",
-        "which": "^4.0.0"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@pkgjs/parseargs": {
-      "version": "0.11.0",
-      "inBundle": true,
-      "license": "MIT",
-      "optional": true,
-      "engines": {
-        "node": ">=14"
-      }
-    },
-    "node_modules/npm/node_modules/@sigstore/bundle": {
-      "version": "2.3.1",
-      "inBundle": true,
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@sigstore/protobuf-specs": "^0.3.1"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@sigstore/core": {
-      "version": "1.1.0",
-      "inBundle": true,
-      "license": "Apache-2.0",
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@sigstore/protobuf-specs": {
-      "version": "0.3.1",
-      "inBundle": true,
-      "license": "Apache-2.0",
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@sigstore/sign": {
-      "version": "2.3.0",
-      "inBundle": true,
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@sigstore/bundle": "^2.3.0",
-        "@sigstore/core": "^1.0.0",
-        "@sigstore/protobuf-specs": "^0.3.1",
-        "make-fetch-happen": "^13.0.0"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@sigstore/tuf": {
-      "version": "2.3.2",
-      "inBundle": true,
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@sigstore/protobuf-specs": "^0.3.0",
-        "tuf-js": "^2.2.0"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@sigstore/verify": {
-      "version": "1.2.0",
-      "inBundle": true,
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@sigstore/bundle": "^2.3.1",
-        "@sigstore/core": "^1.1.0",
-        "@sigstore/protobuf-specs": "^0.3.1"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@tufjs/canonical-json": {
-      "version": "2.0.0",
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/@tufjs/models": {
-      "version": "2.0.0",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "@tufjs/canonical-json": "2.0.0",
-        "minimatch": "^9.0.3"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/abbrev": {
-      "version": "2.0.0",
-      "inBundle": true,
-      "license": "ISC",
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/agent-base": {
-      "version": "7.1.1",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "debug": "^4.3.4"
-      },
-      "engines": {
-        "node": ">= 14"
-      }
-    },
-    "node_modules/npm/node_modules/aggregate-error": {
-      "version": "3.1.0",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "clean-stack": "^2.0.0",
-        "indent-string": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/npm/node_modules/ansi-regex": {
-      "version": "5.0.1",
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/npm/node_modules/ansi-styles": {
-      "version": "6.2.1",
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/npm/node_modules/aproba": {
-      "version": "2.0.0",
-      "inBundle": true,
-      "license": "ISC"
-    },
-    "node_modules/npm/node_modules/archy": {
-      "version": "1.0.0",
-      "inBundle": true,
-      "license": "MIT"
-    },
-    "node_modules/npm/node_modules/are-we-there-yet": {
-      "version": "4.0.2",
-      "inBundle": true,
-      "license": "ISC",
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/balanced-match": {
-      "version": "1.0.2",
-      "inBundle": true,
-      "license": "MIT"
-    },
-    "node_modules/npm/node_modules/bin-links": {
-      "version": "4.0.3",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "cmd-shim": "^6.0.0",
-        "npm-normalize-package-bin": "^3.0.0",
-        "read-cmd-shim": "^4.0.0",
-        "write-file-atomic": "^5.0.0"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/binary-extensions": {
-      "version": "2.3.0",
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/npm/node_modules/brace-expansion": {
-      "version": "2.0.1",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "balanced-match": "^1.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/builtins": {
-      "version": "5.1.0",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "semver": "^7.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/cacache": {
-      "version": "18.0.2",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "@npmcli/fs": "^3.1.0",
-        "fs-minipass": "^3.0.0",
-        "glob": "^10.2.2",
-        "lru-cache": "^10.0.1",
-        "minipass": "^7.0.3",
-        "minipass-collect": "^2.0.1",
-        "minipass-flush": "^1.0.5",
-        "minipass-pipeline": "^1.2.4",
-        "p-map": "^4.0.0",
-        "ssri": "^10.0.0",
-        "tar": "^6.1.11",
-        "unique-filename": "^3.0.0"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/chalk": {
-      "version": "5.3.0",
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": "^12.17.0 || ^14.13 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
-    "node_modules/npm/node_modules/chownr": {
-      "version": "2.0.0",
-      "inBundle": true,
-      "license": "ISC",
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/npm/node_modules/ci-info": {
-      "version": "4.0.0",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/sibiraj-s"
-        }
-      ],
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/npm/node_modules/cidr-regex": {
-      "version": "4.0.5",
-      "inBundle": true,
-      "license": "BSD-2-Clause",
-      "dependencies": {
-        "ip-regex": "^5.0.0"
-      },
-      "engines": {
-        "node": ">=14"
-      }
-    },
-    "node_modules/npm/node_modules/clean-stack": {
-      "version": "2.2.0",
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/npm/node_modules/cli-columns": {
-      "version": "4.0.0",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "string-width": "^4.2.3",
-        "strip-ansi": "^6.0.1"
-      },
-      "engines": {
-        "node": ">= 10"
-      }
-    },
-    "node_modules/npm/node_modules/cli-table3": {
-      "version": "0.6.4",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "string-width": "^4.2.0"
-      },
-      "engines": {
-        "node": "10.* || >= 12.*"
-      },
-      "optionalDependencies": {
-        "@colors/colors": "1.5.0"
-      }
-    },
-    "node_modules/npm/node_modules/clone": {
-      "version": "1.0.4",
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.8"
-      }
-    },
-    "node_modules/npm/node_modules/cmd-shim": {
-      "version": "6.0.2",
-      "inBundle": true,
-      "license": "ISC",
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/color-convert": {
-      "version": "2.0.1",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-name": "~1.1.4"
-      },
-      "engines": {
-        "node": ">=7.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/color-name": {
-      "version": "1.1.4",
-      "inBundle": true,
-      "license": "MIT"
-    },
-    "node_modules/npm/node_modules/color-support": {
-      "version": "1.1.3",
-      "inBundle": true,
-      "license": "ISC",
-      "bin": {
-        "color-support": "bin.js"
-      }
-    },
-    "node_modules/npm/node_modules/columnify": {
-      "version": "1.6.0",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "strip-ansi": "^6.0.1",
-        "wcwidth": "^1.0.0"
-      },
-      "engines": {
-        "node": ">=8.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/common-ancestor-path": {
-      "version": "1.0.1",
-      "inBundle": true,
-      "license": "ISC"
-    },
-    "node_modules/npm/node_modules/console-control-strings": {
-      "version": "1.1.0",
-      "inBundle": true,
-      "license": "ISC"
-    },
-    "node_modules/npm/node_modules/cross-spawn": {
-      "version": "7.0.3",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "path-key": "^3.1.0",
-        "shebang-command": "^2.0.0",
-        "which": "^2.0.1"
-      },
-      "engines": {
-        "node": ">= 8"
-      }
-    },
-    "node_modules/npm/node_modules/cross-spawn/node_modules/which": {
-      "version": "2.0.2",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "isexe": "^2.0.0"
-      },
-      "bin": {
-        "node-which": "bin/node-which"
-      },
-      "engines": {
-        "node": ">= 8"
-      }
-    },
-    "node_modules/npm/node_modules/cssesc": {
-      "version": "3.0.0",
-      "inBundle": true,
-      "license": "MIT",
-      "bin": {
-        "cssesc": "bin/cssesc"
-      },
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/npm/node_modules/debug": {
-      "version": "4.3.4",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "ms": "2.1.2"
-      },
-      "engines": {
-        "node": ">=6.0"
-      },
-      "peerDependenciesMeta": {
-        "supports-color": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/npm/node_modules/debug/node_modules/ms": {
-      "version": "2.1.2",
-      "inBundle": true,
-      "license": "MIT"
-    },
-    "node_modules/npm/node_modules/defaults": {
-      "version": "1.0.4",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "clone": "^1.0.2"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/npm/node_modules/diff": {
-      "version": "5.2.0",
-      "inBundle": true,
-      "license": "BSD-3-Clause",
-      "engines": {
-        "node": ">=0.3.1"
-      }
-    },
-    "node_modules/npm/node_modules/eastasianwidth": {
-      "version": "0.2.0",
-      "inBundle": true,
-      "license": "MIT"
-    },
-    "node_modules/npm/node_modules/emoji-regex": {
-      "version": "8.0.0",
-      "inBundle": true,
-      "license": "MIT"
-    },
-    "node_modules/npm/node_modules/encoding": {
-      "version": "0.1.13",
-      "inBundle": true,
-      "license": "MIT",
-      "optional": true,
-      "dependencies": {
-        "iconv-lite": "^0.6.2"
-      }
-    },
-    "node_modules/npm/node_modules/env-paths": {
-      "version": "2.2.1",
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/npm/node_modules/err-code": {
-      "version": "2.0.3",
-      "inBundle": true,
-      "license": "MIT"
-    },
-    "node_modules/npm/node_modules/exponential-backoff": {
-      "version": "3.1.1",
-      "inBundle": true,
-      "license": "Apache-2.0"
-    },
-    "node_modules/npm/node_modules/fastest-levenshtein": {
-      "version": "1.0.16",
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">= 4.9.1"
-      }
-    },
-    "node_modules/npm/node_modules/foreground-child": {
-      "version": "3.1.1",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "cross-spawn": "^7.0.0",
-        "signal-exit": "^4.0.1"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/npm/node_modules/fs-minipass": {
-      "version": "3.0.3",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "minipass": "^7.0.3"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/function-bind": {
-      "version": "1.1.2",
-      "inBundle": true,
-      "license": "MIT",
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/npm/node_modules/gauge": {
-      "version": "5.0.1",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "aproba": "^1.0.3 || ^2.0.0",
-        "color-support": "^1.1.3",
-        "console-control-strings": "^1.1.0",
-        "has-unicode": "^2.0.1",
-        "signal-exit": "^4.0.1",
-        "string-width": "^4.2.3",
-        "strip-ansi": "^6.0.1",
-        "wide-align": "^1.1.5"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/glob": {
-      "version": "10.3.12",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "foreground-child": "^3.1.0",
-        "jackspeak": "^2.3.6",
-        "minimatch": "^9.0.1",
-        "minipass": "^7.0.4",
-        "path-scurry": "^1.10.2"
-      },
-      "bin": {
-        "glob": "dist/esm/bin.mjs"
-      },
-      "engines": {
-        "node": ">=16 || 14 >=14.17"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/npm/node_modules/graceful-fs": {
-      "version": "4.2.11",
-      "inBundle": true,
-      "license": "ISC"
-    },
-    "node_modules/npm/node_modules/has-unicode": {
-      "version": "2.0.1",
-      "inBundle": true,
-      "license": "ISC"
-    },
-    "node_modules/npm/node_modules/hasown": {
-      "version": "2.0.2",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "function-bind": "^1.1.2"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/npm/node_modules/hosted-git-info": {
-      "version": "7.0.1",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "lru-cache": "^10.0.1"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/http-cache-semantics": {
-      "version": "4.1.1",
-      "inBundle": true,
-      "license": "BSD-2-Clause"
-    },
-    "node_modules/npm/node_modules/http-proxy-agent": {
-      "version": "7.0.2",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "agent-base": "^7.1.0",
-        "debug": "^4.3.4"
-      },
-      "engines": {
-        "node": ">= 14"
-      }
-    },
-    "node_modules/npm/node_modules/https-proxy-agent": {
-      "version": "7.0.4",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "agent-base": "^7.0.2",
-        "debug": "4"
-      },
-      "engines": {
-        "node": ">= 14"
-      }
-    },
-    "node_modules/npm/node_modules/iconv-lite": {
-      "version": "0.6.3",
-      "inBundle": true,
-      "license": "MIT",
-      "optional": true,
-      "dependencies": {
-        "safer-buffer": ">= 2.1.2 < 3.0.0"
-      },
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/npm/node_modules/ignore-walk": {
-      "version": "6.0.4",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "minimatch": "^9.0.0"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/imurmurhash": {
-      "version": "0.1.4",
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.8.19"
-      }
-    },
-    "node_modules/npm/node_modules/indent-string": {
-      "version": "4.0.0",
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/npm/node_modules/ini": {
-      "version": "4.1.2",
-      "inBundle": true,
-      "license": "ISC",
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/init-package-json": {
-      "version": "6.0.2",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "@npmcli/package-json": "^5.0.0",
-        "npm-package-arg": "^11.0.0",
-        "promzard": "^1.0.0",
-        "read": "^3.0.1",
-        "semver": "^7.3.5",
-        "validate-npm-package-license": "^3.0.4",
-        "validate-npm-package-name": "^5.0.0"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/ip-address": {
-      "version": "9.0.5",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "jsbn": "1.1.0",
-        "sprintf-js": "^1.1.3"
-      },
-      "engines": {
-        "node": ">= 12"
-      }
-    },
-    "node_modules/npm/node_modules/ip-address/node_modules/sprintf-js": {
-      "version": "1.1.3",
-      "inBundle": true,
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/npm/node_modules/ip-regex": {
-      "version": "5.0.0",
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/npm/node_modules/is-cidr": {
-      "version": "5.0.5",
-      "inBundle": true,
-      "license": "BSD-2-Clause",
-      "dependencies": {
-        "cidr-regex": "^4.0.4"
-      },
-      "engines": {
-        "node": ">=14"
-      }
-    },
-    "node_modules/npm/node_modules/is-core-module": {
-      "version": "2.13.1",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "hasown": "^2.0.0"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/npm/node_modules/is-fullwidth-code-point": {
-      "version": "3.0.0",
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/npm/node_modules/is-lambda": {
-      "version": "1.0.1",
-      "inBundle": true,
-      "license": "MIT"
-    },
-    "node_modules/npm/node_modules/isexe": {
-      "version": "2.0.0",
-      "inBundle": true,
-      "license": "ISC"
-    },
-    "node_modules/npm/node_modules/jackspeak": {
-      "version": "2.3.6",
-      "inBundle": true,
-      "license": "BlueOak-1.0.0",
-      "dependencies": {
-        "@isaacs/cliui": "^8.0.2"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      },
-      "optionalDependencies": {
-        "@pkgjs/parseargs": "^0.11.0"
-      }
-    },
-    "node_modules/npm/node_modules/jsbn": {
-      "version": "1.1.0",
-      "inBundle": true,
-      "license": "MIT"
-    },
-    "node_modules/npm/node_modules/json-parse-even-better-errors": {
-      "version": "3.0.1",
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/json-stringify-nice": {
-      "version": "1.1.4",
-      "inBundle": true,
-      "license": "ISC",
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/npm/node_modules/jsonparse": {
-      "version": "1.3.1",
-      "engines": [
-        "node >= 0.2.0"
-      ],
-      "inBundle": true,
-      "license": "MIT"
-    },
-    "node_modules/npm/node_modules/just-diff": {
-      "version": "6.0.2",
-      "inBundle": true,
-      "license": "MIT"
-    },
-    "node_modules/npm/node_modules/just-diff-apply": {
-      "version": "5.5.0",
-      "inBundle": true,
-      "license": "MIT"
-    },
-    "node_modules/npm/node_modules/libnpmaccess": {
-      "version": "8.0.3",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "npm-package-arg": "^11.0.1",
-        "npm-registry-fetch": "^16.2.0"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/libnpmdiff": {
-      "version": "6.0.9",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "@npmcli/arborist": "^7.2.1",
-        "@npmcli/disparity-colors": "^3.0.0",
-        "@npmcli/installed-package-contents": "^2.0.2",
-        "binary-extensions": "^2.3.0",
-        "diff": "^5.1.0",
-        "minimatch": "^9.0.4",
-        "npm-package-arg": "^11.0.1",
-        "pacote": "^17.0.4",
-        "tar": "^6.2.1"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/libnpmexec": {
-      "version": "7.0.10",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "@npmcli/arborist": "^7.2.1",
-        "@npmcli/run-script": "^7.0.2",
-        "ci-info": "^4.0.0",
-        "npm-package-arg": "^11.0.1",
-        "npmlog": "^7.0.1",
-        "pacote": "^17.0.4",
-        "proc-log": "^3.0.0",
-        "read": "^3.0.1",
-        "read-package-json-fast": "^3.0.2",
-        "semver": "^7.3.7",
-        "walk-up-path": "^3.0.1"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/libnpmfund": {
-      "version": "5.0.7",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "@npmcli/arborist": "^7.2.1"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/libnpmhook": {
-      "version": "10.0.2",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "aproba": "^2.0.0",
-        "npm-registry-fetch": "^16.2.0"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/libnpmorg": {
-      "version": "6.0.3",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "aproba": "^2.0.0",
-        "npm-registry-fetch": "^16.2.0"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/libnpmpack": {
-      "version": "6.0.9",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "@npmcli/arborist": "^7.2.1",
-        "@npmcli/run-script": "^7.0.2",
-        "npm-package-arg": "^11.0.1",
-        "pacote": "^17.0.4"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/libnpmpublish": {
-      "version": "9.0.5",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "ci-info": "^4.0.0",
-        "normalize-package-data": "^6.0.0",
-        "npm-package-arg": "^11.0.1",
-        "npm-registry-fetch": "^16.2.0",
-        "proc-log": "^3.0.0",
-        "semver": "^7.3.7",
-        "sigstore": "^2.2.0",
-        "ssri": "^10.0.5"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/libnpmsearch": {
-      "version": "7.0.2",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "npm-registry-fetch": "^16.2.0"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/libnpmteam": {
-      "version": "6.0.2",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "aproba": "^2.0.0",
-        "npm-registry-fetch": "^16.2.0"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/libnpmversion": {
-      "version": "5.0.2",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "@npmcli/git": "^5.0.3",
-        "@npmcli/run-script": "^7.0.2",
-        "json-parse-even-better-errors": "^3.0.0",
-        "proc-log": "^3.0.0",
-        "semver": "^7.3.7"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/lru-cache": {
-      "version": "10.2.0",
-      "inBundle": true,
-      "license": "ISC",
-      "engines": {
-        "node": "14 || >=16.14"
-      }
-    },
-    "node_modules/npm/node_modules/make-fetch-happen": {
-      "version": "13.0.0",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "@npmcli/agent": "^2.0.0",
-        "cacache": "^18.0.0",
-        "http-cache-semantics": "^4.1.1",
-        "is-lambda": "^1.0.1",
-        "minipass": "^7.0.2",
-        "minipass-fetch": "^3.0.0",
-        "minipass-flush": "^1.0.5",
-        "minipass-pipeline": "^1.2.4",
-        "negotiator": "^0.6.3",
-        "promise-retry": "^2.0.1",
-        "ssri": "^10.0.0"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/minimatch": {
-      "version": "9.0.4",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "brace-expansion": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=16 || 14 >=14.17"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/npm/node_modules/minipass": {
-      "version": "7.0.4",
-      "inBundle": true,
-      "license": "ISC",
-      "engines": {
-        "node": ">=16 || 14 >=14.17"
-      }
-    },
-    "node_modules/npm/node_modules/minipass-collect": {
-      "version": "2.0.1",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "minipass": "^7.0.3"
-      },
-      "engines": {
-        "node": ">=16 || 14 >=14.17"
-      }
-    },
-    "node_modules/npm/node_modules/minipass-fetch": {
-      "version": "3.0.4",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "minipass": "^7.0.3",
-        "minipass-sized": "^1.0.3",
-        "minizlib": "^2.1.2"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      },
-      "optionalDependencies": {
-        "encoding": "^0.1.13"
-      }
-    },
-    "node_modules/npm/node_modules/minipass-flush": {
-      "version": "1.0.5",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "minipass": "^3.0.0"
-      },
-      "engines": {
-        "node": ">= 8"
-      }
-    },
-    "node_modules/npm/node_modules/minipass-flush/node_modules/minipass": {
-      "version": "3.3.6",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "yallist": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/npm/node_modules/minipass-json-stream": {
-      "version": "1.0.1",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "jsonparse": "^1.3.1",
-        "minipass": "^3.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/minipass-json-stream/node_modules/minipass": {
-      "version": "3.3.6",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "yallist": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/npm/node_modules/minipass-pipeline": {
-      "version": "1.2.4",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "minipass": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/npm/node_modules/minipass-pipeline/node_modules/minipass": {
-      "version": "3.3.6",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "yallist": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/npm/node_modules/minipass-sized": {
-      "version": "1.0.3",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "minipass": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/npm/node_modules/minipass-sized/node_modules/minipass": {
-      "version": "3.3.6",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "yallist": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/npm/node_modules/minizlib": {
-      "version": "2.1.2",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "minipass": "^3.0.0",
-        "yallist": "^4.0.0"
-      },
-      "engines": {
-        "node": ">= 8"
-      }
-    },
-    "node_modules/npm/node_modules/minizlib/node_modules/minipass": {
-      "version": "3.3.6",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "yallist": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/npm/node_modules/mkdirp": {
-      "version": "1.0.4",
-      "inBundle": true,
-      "license": "MIT",
-      "bin": {
-        "mkdirp": "bin/cmd.js"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/npm/node_modules/ms": {
-      "version": "2.1.3",
-      "inBundle": true,
-      "license": "MIT"
-    },
-    "node_modules/npm/node_modules/mute-stream": {
-      "version": "1.0.0",
-      "inBundle": true,
-      "license": "ISC",
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/negotiator": {
-      "version": "0.6.3",
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/npm/node_modules/node-gyp": {
-      "version": "10.1.0",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "env-paths": "^2.2.0",
-        "exponential-backoff": "^3.1.1",
-        "glob": "^10.3.10",
-        "graceful-fs": "^4.2.6",
-        "make-fetch-happen": "^13.0.0",
-        "nopt": "^7.0.0",
-        "proc-log": "^3.0.0",
-        "semver": "^7.3.5",
-        "tar": "^6.1.2",
-        "which": "^4.0.0"
-      },
-      "bin": {
-        "node-gyp": "bin/node-gyp.js"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/nopt": {
-      "version": "7.2.0",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "abbrev": "^2.0.0"
-      },
-      "bin": {
-        "nopt": "bin/nopt.js"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/normalize-package-data": {
-      "version": "6.0.0",
-      "inBundle": true,
-      "license": "BSD-2-Clause",
-      "dependencies": {
-        "hosted-git-info": "^7.0.0",
-        "is-core-module": "^2.8.1",
-        "semver": "^7.3.5",
-        "validate-npm-package-license": "^3.0.4"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/npm-audit-report": {
-      "version": "5.0.0",
-      "inBundle": true,
-      "license": "ISC",
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/npm-bundled": {
-      "version": "3.0.0",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "npm-normalize-package-bin": "^3.0.0"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/npm-install-checks": {
-      "version": "6.3.0",
-      "inBundle": true,
-      "license": "BSD-2-Clause",
-      "dependencies": {
-        "semver": "^7.1.1"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/npm-normalize-package-bin": {
-      "version": "3.0.1",
-      "inBundle": true,
-      "license": "ISC",
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/npm-package-arg": {
-      "version": "11.0.1",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "hosted-git-info": "^7.0.0",
-        "proc-log": "^3.0.0",
-        "semver": "^7.3.5",
-        "validate-npm-package-name": "^5.0.0"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/npm-packlist": {
-      "version": "8.0.2",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "ignore-walk": "^6.0.4"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/npm-pick-manifest": {
-      "version": "9.0.0",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "npm-install-checks": "^6.0.0",
-        "npm-normalize-package-bin": "^3.0.0",
-        "npm-package-arg": "^11.0.0",
-        "semver": "^7.3.5"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/npm-profile": {
-      "version": "9.0.0",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "npm-registry-fetch": "^16.0.0",
-        "proc-log": "^3.0.0"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/npm-registry-fetch": {
-      "version": "16.2.0",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "@npmcli/redact": "^1.1.0",
-        "make-fetch-happen": "^13.0.0",
-        "minipass": "^7.0.2",
-        "minipass-fetch": "^3.0.0",
-        "minipass-json-stream": "^1.0.1",
-        "minizlib": "^2.1.2",
-        "npm-package-arg": "^11.0.0",
-        "proc-log": "^3.0.0"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/npm-user-validate": {
-      "version": "2.0.0",
-      "inBundle": true,
-      "license": "BSD-2-Clause",
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/npmlog": {
-      "version": "7.0.1",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "are-we-there-yet": "^4.0.0",
-        "console-control-strings": "^1.1.0",
-        "gauge": "^5.0.0",
-        "set-blocking": "^2.0.0"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/p-map": {
-      "version": "4.0.0",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "aggregate-error": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/npm/node_modules/pacote": {
-      "version": "17.0.6",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "@npmcli/git": "^5.0.0",
-        "@npmcli/installed-package-contents": "^2.0.1",
-        "@npmcli/promise-spawn": "^7.0.0",
-        "@npmcli/run-script": "^7.0.0",
-        "cacache": "^18.0.0",
-        "fs-minipass": "^3.0.0",
-        "minipass": "^7.0.2",
-        "npm-package-arg": "^11.0.0",
-        "npm-packlist": "^8.0.0",
-        "npm-pick-manifest": "^9.0.0",
-        "npm-registry-fetch": "^16.0.0",
-        "proc-log": "^3.0.0",
-        "promise-retry": "^2.0.1",
-        "read-package-json": "^7.0.0",
-        "read-package-json-fast": "^3.0.0",
-        "sigstore": "^2.2.0",
-        "ssri": "^10.0.0",
-        "tar": "^6.1.11"
-      },
-      "bin": {
-        "pacote": "lib/bin.js"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/parse-conflict-json": {
-      "version": "3.0.1",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "json-parse-even-better-errors": "^3.0.0",
-        "just-diff": "^6.0.0",
-        "just-diff-apply": "^5.2.0"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/path-key": {
-      "version": "3.1.1",
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/npm/node_modules/path-scurry": {
-      "version": "1.10.2",
-      "inBundle": true,
-      "license": "BlueOak-1.0.0",
-      "dependencies": {
-        "lru-cache": "^10.2.0",
-        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
-      },
-      "engines": {
-        "node": ">=16 || 14 >=14.17"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/npm/node_modules/postcss-selector-parser": {
-      "version": "6.0.16",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "cssesc": "^3.0.0",
-        "util-deprecate": "^1.0.2"
-      },
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/npm/node_modules/proc-log": {
-      "version": "3.0.0",
-      "inBundle": true,
-      "license": "ISC",
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/promise-all-reject-late": {
-      "version": "1.0.1",
-      "inBundle": true,
-      "license": "ISC",
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/npm/node_modules/promise-call-limit": {
-      "version": "3.0.1",
-      "inBundle": true,
-      "license": "ISC",
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/npm/node_modules/promise-inflight": {
-      "version": "1.0.1",
-      "inBundle": true,
-      "license": "ISC"
-    },
-    "node_modules/npm/node_modules/promise-retry": {
-      "version": "2.0.1",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "err-code": "^2.0.2",
-        "retry": "^0.12.0"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/npm/node_modules/promzard": {
-      "version": "1.0.1",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "read": "^3.0.1"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/qrcode-terminal": {
-      "version": "0.12.0",
-      "inBundle": true,
-      "bin": {
-        "qrcode-terminal": "bin/qrcode-terminal.js"
-      }
-    },
-    "node_modules/npm/node_modules/read": {
-      "version": "3.0.1",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "mute-stream": "^1.0.0"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/read-cmd-shim": {
-      "version": "4.0.0",
-      "inBundle": true,
-      "license": "ISC",
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/read-package-json": {
-      "version": "7.0.0",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "glob": "^10.2.2",
-        "json-parse-even-better-errors": "^3.0.0",
-        "normalize-package-data": "^6.0.0",
-        "npm-normalize-package-bin": "^3.0.0"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/read-package-json-fast": {
-      "version": "3.0.2",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "json-parse-even-better-errors": "^3.0.0",
-        "npm-normalize-package-bin": "^3.0.0"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/retry": {
-      "version": "0.12.0",
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">= 4"
-      }
-    },
-    "node_modules/npm/node_modules/safer-buffer": {
-      "version": "2.1.2",
-      "inBundle": true,
-      "license": "MIT",
-      "optional": true
-    },
-    "node_modules/npm/node_modules/semver": {
-      "version": "7.6.0",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "lru-cache": "^6.0.0"
-      },
-      "bin": {
-        "semver": "bin/semver.js"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/npm/node_modules/semver/node_modules/lru-cache": {
-      "version": "6.0.0",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "yallist": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/npm/node_modules/set-blocking": {
-      "version": "2.0.0",
-      "inBundle": true,
-      "license": "ISC"
-    },
-    "node_modules/npm/node_modules/shebang-command": {
-      "version": "2.0.0",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "shebang-regex": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/npm/node_modules/shebang-regex": {
-      "version": "3.0.0",
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/npm/node_modules/signal-exit": {
-      "version": "4.1.0",
-      "inBundle": true,
-      "license": "ISC",
-      "engines": {
-        "node": ">=14"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/npm/node_modules/sigstore": {
-      "version": "2.3.0",
-      "inBundle": true,
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@sigstore/bundle": "^2.3.1",
-        "@sigstore/core": "^1.0.0",
-        "@sigstore/protobuf-specs": "^0.3.1",
-        "@sigstore/sign": "^2.3.0",
-        "@sigstore/tuf": "^2.3.1",
-        "@sigstore/verify": "^1.2.0"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/smart-buffer": {
-      "version": "4.2.0",
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">= 6.0.0",
-        "npm": ">= 3.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/socks": {
-      "version": "2.8.3",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "ip-address": "^9.0.5",
-        "smart-buffer": "^4.2.0"
-      },
-      "engines": {
-        "node": ">= 10.0.0",
-        "npm": ">= 3.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/socks-proxy-agent": {
-      "version": "8.0.3",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "agent-base": "^7.1.1",
-        "debug": "^4.3.4",
-        "socks": "^2.7.1"
-      },
-      "engines": {
-        "node": ">= 14"
-      }
-    },
-    "node_modules/npm/node_modules/spdx-correct": {
-      "version": "3.2.0",
-      "inBundle": true,
-      "license": "Apache-2.0",
-      "dependencies": {
-        "spdx-expression-parse": "^3.0.0",
-        "spdx-license-ids": "^3.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/spdx-correct/node_modules/spdx-expression-parse": {
-      "version": "3.0.1",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "spdx-exceptions": "^2.1.0",
-        "spdx-license-ids": "^3.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/spdx-exceptions": {
-      "version": "2.5.0",
-      "inBundle": true,
-      "license": "CC-BY-3.0"
-    },
-    "node_modules/npm/node_modules/spdx-expression-parse": {
-      "version": "4.0.0",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "spdx-exceptions": "^2.1.0",
-        "spdx-license-ids": "^3.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/spdx-license-ids": {
-      "version": "3.0.17",
-      "inBundle": true,
-      "license": "CC0-1.0"
-    },
-    "node_modules/npm/node_modules/ssri": {
-      "version": "10.0.5",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "minipass": "^7.0.3"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/string-width": {
-      "version": "4.2.3",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "emoji-regex": "^8.0.0",
-        "is-fullwidth-code-point": "^3.0.0",
-        "strip-ansi": "^6.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/npm/node_modules/string-width-cjs": {
-      "name": "string-width",
-      "version": "4.2.3",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "emoji-regex": "^8.0.0",
-        "is-fullwidth-code-point": "^3.0.0",
-        "strip-ansi": "^6.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/npm/node_modules/strip-ansi": {
-      "version": "6.0.1",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-regex": "^5.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/npm/node_modules/strip-ansi-cjs": {
-      "name": "strip-ansi",
-      "version": "6.0.1",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-regex": "^5.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/npm/node_modules/supports-color": {
-      "version": "9.4.0",
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/supports-color?sponsor=1"
-      }
-    },
-    "node_modules/npm/node_modules/tar": {
-      "version": "6.2.1",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "chownr": "^2.0.0",
-        "fs-minipass": "^2.0.0",
-        "minipass": "^5.0.0",
-        "minizlib": "^2.1.1",
-        "mkdirp": "^1.0.3",
-        "yallist": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/npm/node_modules/tar/node_modules/fs-minipass": {
-      "version": "2.1.0",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "minipass": "^3.0.0"
-      },
-      "engines": {
-        "node": ">= 8"
-      }
-    },
-    "node_modules/npm/node_modules/tar/node_modules/fs-minipass/node_modules/minipass": {
-      "version": "3.3.6",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "yallist": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/npm/node_modules/tar/node_modules/minipass": {
-      "version": "5.0.0",
-      "inBundle": true,
-      "license": "ISC",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/npm/node_modules/text-table": {
-      "version": "0.2.0",
-      "inBundle": true,
-      "license": "MIT"
-    },
-    "node_modules/npm/node_modules/tiny-relative-date": {
-      "version": "1.3.0",
-      "inBundle": true,
-      "license": "MIT"
-    },
-    "node_modules/npm/node_modules/treeverse": {
-      "version": "3.0.0",
-      "inBundle": true,
-      "license": "ISC",
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/tuf-js": {
-      "version": "2.2.0",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "@tufjs/models": "2.0.0",
-        "debug": "^4.3.4",
-        "make-fetch-happen": "^13.0.0"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/unique-filename": {
-      "version": "3.0.0",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "unique-slug": "^4.0.0"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/unique-slug": {
-      "version": "4.0.0",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "imurmurhash": "^0.1.4"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/util-deprecate": {
-      "version": "1.0.2",
-      "inBundle": true,
-      "license": "MIT"
-    },
-    "node_modules/npm/node_modules/validate-npm-package-license": {
-      "version": "3.0.4",
-      "inBundle": true,
-      "license": "Apache-2.0",
-      "dependencies": {
-        "spdx-correct": "^3.0.0",
-        "spdx-expression-parse": "^3.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/validate-npm-package-license/node_modules/spdx-expression-parse": {
-      "version": "3.0.1",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "spdx-exceptions": "^2.1.0",
-        "spdx-license-ids": "^3.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/validate-npm-package-name": {
-      "version": "5.0.0",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "builtins": "^5.0.0"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/walk-up-path": {
-      "version": "3.0.1",
-      "inBundle": true,
-      "license": "ISC"
-    },
-    "node_modules/npm/node_modules/wcwidth": {
-      "version": "1.0.1",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "defaults": "^1.0.3"
-      }
-    },
-    "node_modules/npm/node_modules/which": {
-      "version": "4.0.0",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "isexe": "^3.1.1"
-      },
-      "bin": {
-        "node-which": "bin/which.js"
-      },
-      "engines": {
-        "node": "^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/which/node_modules/isexe": {
-      "version": "3.1.1",
-      "inBundle": true,
-      "license": "ISC",
-      "engines": {
-        "node": ">=16"
-      }
-    },
-    "node_modules/npm/node_modules/wide-align": {
-      "version": "1.1.5",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "string-width": "^1.0.2 || 2 || 3 || 4"
-      }
-    },
-    "node_modules/npm/node_modules/wrap-ansi": {
-      "version": "8.1.0",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^6.1.0",
-        "string-width": "^5.0.1",
-        "strip-ansi": "^7.0.1"
-      },
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
-      }
-    },
-    "node_modules/npm/node_modules/wrap-ansi-cjs": {
-      "name": "wrap-ansi",
-      "version": "7.0.0",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.0.0",
-        "string-width": "^4.1.0",
-        "strip-ansi": "^6.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
-      }
-    },
-    "node_modules/npm/node_modules/wrap-ansi-cjs/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/npm/node_modules/wrap-ansi/node_modules/ansi-regex": {
-      "version": "6.0.1",
-      "inBundle": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
-      }
-    },
-    "node_modules/npm/node_modules/wrap-ansi/node_modules/emoji-regex": {
-      "version": "9.2.2",
-      "inBundle": true,
-      "license": "MIT"
-    },
-    "node_modules/npm/node_modules/wrap-ansi/node_modules/string-width": {
-      "version": "5.1.2",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "eastasianwidth": "^0.2.0",
-        "emoji-regex": "^9.2.2",
-        "strip-ansi": "^7.0.1"
-      },
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/npm/node_modules/wrap-ansi/node_modules/strip-ansi": {
-      "version": "7.1.0",
-      "inBundle": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-regex": "^6.0.1"
-      },
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
-      }
-    },
-    "node_modules/npm/node_modules/write-file-atomic": {
-      "version": "5.0.1",
-      "inBundle": true,
-      "license": "ISC",
-      "dependencies": {
-        "imurmurhash": "^0.1.4",
-        "signal-exit": "^4.0.1"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/npm/node_modules/yallist": {
-      "version": "4.0.0",
-      "inBundle": true,
-      "license": "ISC"
-    },
-    "node_modules/on-exit-leak-free": {
-      "version": "2.1.0",
-      "license": "MIT"
-    },
-    "node_modules/once": {
-      "version": "1.4.0",
-      "license": "ISC",
-      "dependencies": {
-        "wrappy": "1"
-      }
-    },
-    "node_modules/pino": {
-      "version": "8.18.0",
-      "license": "MIT",
-      "dependencies": {
-        "atomic-sleep": "^1.0.0",
-        "fast-redact": "^3.1.1",
-        "on-exit-leak-free": "^2.1.0",
-        "pino-abstract-transport": "v1.1.0",
-        "pino-std-serializers": "^6.0.0",
-        "process-warning": "^3.0.0",
-        "quick-format-unescaped": "^4.0.3",
-        "real-require": "^0.2.0",
-        "safe-stable-stringify": "^2.3.1",
-        "sonic-boom": "^3.7.0",
-        "thread-stream": "^2.0.0"
-      },
-      "bin": {
-        "pino": "bin.js"
-      }
-    },
-    "node_modules/pino-abstract-transport": {
-      "version": "1.1.0",
-      "license": "MIT",
-      "dependencies": {
-        "readable-stream": "^4.0.0",
-        "split2": "^4.0.0"
-      }
-    },
-    "node_modules/pino-pretty": {
-      "version": "10.3.1",
-      "license": "MIT",
-      "dependencies": {
-        "colorette": "^2.0.7",
-        "dateformat": "^4.6.3",
-        "fast-copy": "^3.0.0",
-        "fast-safe-stringify": "^2.1.1",
-        "help-me": "^5.0.0",
-        "joycon": "^3.1.1",
-        "minimist": "^1.2.6",
-        "on-exit-leak-free": "^2.1.0",
-        "pino-abstract-transport": "^1.0.0",
-        "pump": "^3.0.0",
-        "readable-stream": "^4.0.0",
-        "secure-json-parse": "^2.4.0",
-        "sonic-boom": "^3.0.0",
-        "strip-json-comments": "^3.1.1"
-      },
-      "bin": {
-        "pino-pretty": "bin.js"
-      }
-    },
-    "node_modules/pino-std-serializers": {
-      "version": "6.2.2",
-      "license": "MIT"
-    },
-    "node_modules/prettier": {
-      "version": "3.2.4",
-      "dev": true,
-      "license": "MIT",
-      "bin": {
-        "prettier": "bin/prettier.cjs"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "funding": {
-        "url": "https://github.com/prettier/prettier?sponsor=1"
-      }
-    },
-    "node_modules/process": {
-      "version": "0.11.10",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6.0"
-      }
-    },
-    "node_modules/process-warning": {
-      "version": "3.0.0",
-      "license": "MIT"
-    },
-    "node_modules/proxy-from-env": {
-      "version": "1.1.0",
-      "license": "MIT"
-    },
-    "node_modules/pump": {
-      "version": "3.0.0",
-      "license": "MIT",
-      "dependencies": {
-        "end-of-stream": "^1.1.0",
-        "once": "^1.3.1"
-      }
-    },
-    "node_modules/quick-format-unescaped": {
-      "version": "4.0.4",
-      "license": "MIT"
-    },
-    "node_modules/readable-stream": {
-      "version": "4.5.2",
-      "license": "MIT",
-      "dependencies": {
-        "abort-controller": "^3.0.0",
-        "buffer": "^6.0.3",
-        "events": "^3.3.0",
-        "process": "^0.11.10",
-        "string_decoder": "^1.3.0"
-      },
-      "engines": {
-        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-      }
-    },
-    "node_modules/real-require": {
-      "version": "0.2.0",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 12.13.0"
-      }
-    },
-    "node_modules/regenerator-runtime": {
-      "version": "0.14.1",
-      "license": "MIT"
-    },
-    "node_modules/ripemd160": {
-      "version": "2.0.2",
-      "license": "MIT",
-      "dependencies": {
-        "hash-base": "^3.0.0",
-        "inherits": "^2.0.1"
-      }
-    },
-    "node_modules/rpc-websockets": {
-      "version": "7.9.0",
-      "license": "LGPL-3.0-only",
-      "dependencies": {
-        "@babel/runtime": "^7.17.2",
-        "eventemitter3": "^4.0.7",
-        "uuid": "^8.3.2",
-        "ws": "^8.5.0"
-      },
-      "funding": {
-        "type": "paypal",
-        "url": "https://paypal.me/kozjak"
-      },
-      "optionalDependencies": {
-        "bufferutil": "^4.0.1",
-        "utf-8-validate": "^5.0.2"
-      }
-    },
-    "node_modules/rpc-websockets/node_modules/ws": {
-      "version": "8.16.0",
-      "license": "MIT",
-      "engines": {
-        "node": ">=10.0.0"
-      },
-      "peerDependencies": {
-        "bufferutil": "^4.0.1",
-        "utf-8-validate": ">=5.0.2"
-      },
-      "peerDependenciesMeta": {
-        "bufferutil": {
-          "optional": true
-        },
-        "utf-8-validate": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/safe-buffer": {
-      "version": "5.2.1",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ],
-      "license": "MIT"
-    },
-    "node_modules/safe-stable-stringify": {
-      "version": "2.4.3",
-      "license": "MIT",
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/secure-json-parse": {
-      "version": "2.7.0",
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/sha.js": {
-      "version": "2.4.11",
-      "license": "(MIT AND BSD-3-Clause)",
-      "dependencies": {
-        "inherits": "^2.0.1",
-        "safe-buffer": "^5.0.1"
-      },
-      "bin": {
-        "sha.js": "bin.js"
-      }
-    },
-    "node_modules/sonic-boom": {
-      "version": "3.8.0",
-      "license": "MIT",
-      "dependencies": {
-        "atomic-sleep": "^1.0.0"
-      }
-    },
-    "node_modules/split2": {
-      "version": "4.2.0",
-      "license": "ISC",
-      "engines": {
-        "node": ">= 10.x"
-      }
-    },
-    "node_modules/string_decoder": {
-      "version": "1.3.0",
-      "license": "MIT",
-      "dependencies": {
-        "safe-buffer": "~5.2.0"
-      }
-    },
-    "node_modules/strip-json-comments": {
-      "version": "3.1.1",
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/superstruct": {
-      "version": "0.14.2",
-      "license": "MIT"
-    },
-    "node_modules/text-encoding-utf-8": {
-      "version": "1.0.2"
-    },
-    "node_modules/thread-stream": {
-      "version": "2.3.0",
-      "license": "MIT",
-      "dependencies": {
-        "real-require": "^0.2.0"
-      }
-    },
-    "node_modules/through": {
-      "version": "2.3.8",
-      "license": "MIT"
-    },
-    "node_modules/toformat": {
-      "version": "2.0.0",
-      "license": "MIT"
-    },
-    "node_modules/tr46": {
-      "version": "0.0.3",
-      "license": "MIT"
-    },
-    "node_modules/ts-node": {
-      "version": "10.9.2",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@cspotcode/source-map-support": "^0.8.0",
-        "@tsconfig/node10": "^1.0.7",
-        "@tsconfig/node12": "^1.0.7",
-        "@tsconfig/node14": "^1.0.0",
-        "@tsconfig/node16": "^1.0.2",
-        "acorn": "^8.4.1",
-        "acorn-walk": "^8.1.1",
-        "arg": "^4.1.0",
-        "create-require": "^1.1.0",
-        "diff": "^4.0.1",
-        "make-error": "^1.1.1",
-        "v8-compile-cache-lib": "^3.0.1",
-        "yn": "3.1.1"
-      },
-      "bin": {
-        "ts-node": "dist/bin.js",
-        "ts-node-cwd": "dist/bin-cwd.js",
-        "ts-node-esm": "dist/bin-esm.js",
-        "ts-node-script": "dist/bin-script.js",
-        "ts-node-transpile-only": "dist/bin-transpile.js",
-        "ts-script": "dist/bin-script-deprecated.js"
-      },
-      "peerDependencies": {
-        "@swc/core": ">=1.2.50",
-        "@swc/wasm": ">=1.2.50",
-        "@types/node": "*",
-        "typescript": ">=2.7"
-      },
-      "peerDependenciesMeta": {
-        "@swc/core": {
-          "optional": true
-        },
-        "@swc/wasm": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/tslib": {
-      "version": "2.6.2",
-      "license": "0BSD"
-    },
-    "node_modules/tweetnacl": {
-      "version": "1.0.3",
-      "license": "Unlicense"
-    },
-    "node_modules/typescript": {
-      "version": "5.3.3",
-      "dev": true,
-      "license": "Apache-2.0",
-      "bin": {
-        "tsc": "bin/tsc",
-        "tsserver": "bin/tsserver"
-      },
-      "engines": {
-        "node": ">=14.17"
-      }
-    },
-    "node_modules/utf-8-validate": {
-      "version": "5.0.10",
-      "hasInstallScript": true,
-      "license": "MIT",
-      "optional": true,
-      "dependencies": {
-        "node-gyp-build": "^4.3.0"
-      },
-      "engines": {
-        "node": ">=6.14.2"
-      }
-    },
-    "node_modules/util-deprecate": {
-      "version": "1.0.2",
-      "license": "MIT"
-    },
-    "node_modules/uuid": {
-      "version": "8.3.2",
-      "license": "MIT",
-      "bin": {
-        "uuid": "dist/bin/uuid"
-      }
-    },
-    "node_modules/v8-compile-cache-lib": {
-      "version": "3.0.1",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/webidl-conversions": {
-      "version": "3.0.1",
-      "license": "BSD-2-Clause"
-    },
-    "node_modules/whatwg-url": {
-      "version": "5.0.0",
-      "license": "MIT",
-      "dependencies": {
-        "tr46": "~0.0.3",
-        "webidl-conversions": "^3.0.0"
-      }
-    },
-    "node_modules/wrappy": {
-      "version": "1.0.2",
-      "license": "ISC"
-    },
-    "node_modules/ws": {
-      "version": "7.5.9",
-      "license": "MIT",
-      "engines": {
-        "node": ">=8.3.0"
-      },
-      "peerDependencies": {
-        "bufferutil": "^4.0.1",
-        "utf-8-validate": "^5.0.2"
-      },
-      "peerDependenciesMeta": {
-        "bufferutil": {
-          "optional": true
-        },
-        "utf-8-validate": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/yn": {
-      "version": "3.1.1",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    }
-  }
-}
Index: 1 AxisBot Solana Sniper Main/transactions/index.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/transactions/index.ts b/1 AxisBot Solana Sniper Main/transactions/index.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/transactions/index.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,2 +0,0 @@
-export * from './default-transaction-executor';
-export * from './transaction-executor.interface';
Index: 1 AxisBot Solana Sniper Main/transactions/warp-transaction-executor.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/transactions/warp-transaction-executor.ts b/1 AxisBot Solana Sniper Main/transactions/warp-transaction-executor.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/transactions/warp-transaction-executor.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,70 +0,0 @@
-// 导入所需的模块和库
-import {
-  BlockhashWithExpiryBlockHeight,
-  Keypair,
-  PublicKey,
-  SystemProgram,
-  TransactionMessage,
-  VersionedTransaction,
-} from '@solana/web3.js'; // Solana 相关库
-import { TransactionExecutor } from './transaction-executor.interface'; // 交易执行器接口
-import { logger } from '../helpers'; // 日志记录器
-import axios, { AxiosError } from 'axios'; // Axios 库用于 HTTP 请求
-import bs58 from 'bs58'; // Base58 编码库
-import { Currency, CurrencyAmount } from '@raydium-io/raydium-sdk'; // Raydium SDK
-
-// Warp 交易执行器类
-export class WarpTransactionExecutor implements TransactionExecutor {
-  private readonly warpFeeWallet = new PublicKey('AXSBTx227eh6ZtEu5kHrKCWviW6R1JJV7oDJ63tX9GiH'); // Warp 费用钱包地址
-
-  constructor(private readonly warpFee: string) {} // 初始化 Warp 费用
-
-  // 执行并确认交易的公共方法
-  public async executeAndConfirm(
-    transaction: VersionedTransaction, // 版本化交易
-    payer: Keypair, // 付款方的密钥对
-    latestBlockhash: BlockhashWithExpiryBlockHeight, // 最新区块哈希和过期区块高度
-  ): Promise<{ confirmed: boolean; signature?: string }> {
-    logger.debug('正在执行交易...'); // 记录执行交易日志
-
-    try {
-      // 计算费用
-      const fee = new CurrencyAmount(Currency.SOL, this.warpFee, false).raw.toNumber();
-      // 创建 Warp 费用交易消息
-      const warpFeeMessage = new TransactionMessage({
-        payerKey: payer.publicKey, // 付款方公钥
-        recentBlockhash: latestBlockhash.blockhash, // 最新区块哈希
-        instructions: [
-          SystemProgram.transfer({ // 转账指令
-            fromPubkey: payer.publicKey, // 付款方公钥
-            toPubkey: this.warpFeeWallet, // 收款方公钥
-            lamports: fee, // 转账的 lamports 数量
-          }),
-        ],
-      }).compileToV0Message(); // 编译为 V0 消息
-
-      const warpFeeTx = new VersionedTransaction(warpFeeMessage); // 创建版本化交易
-      warpFeeTx.sign([payer]); // 签名交易
-
-      // 发送请求到 Warp 交易执行 API
-      const response = await axios.post<{ confirmed: boolean; signature: string, error?: string }>(
-        'https://tx.warp.id/transaction/execute', // API 地址
-        {
-          transactions: [bs58.encode(warpFeeTx.serialize()), bs58.encode(transaction.serialize())], // 发送序列化的交易
-          latestBlockhash, // 最新区块哈希
-        },
-        {
-          timeout: 100000, // 请求超时时间
-        },
-      );
-
-      return response.data; // 返回响应数据
-    } catch (error) {
-      if (error instanceof AxiosError) {
-        logger.trace({ error: error.response?.data }, '执行 Warp 交易失败'); // 记录错误信息
-      }
-    }
-
-    return { confirmed: false }; // 返回未确认
-  }
-}
Index: 1 AxisBot Solana Sniper Main/filters/burn.filter.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/filters/burn.filter.ts b/1 AxisBot Solana Sniper Main/filters/burn.filter.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/filters/burn.filter.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,30 +0,0 @@
-// 导入所需的模块和库
-import { Filter, FilterResult } from './pool-filters'; // 过滤器接口和结果类型
-import { Connection } from '@solana/web3.js'; // Solana 相关库
-import { LiquidityPoolKeysV4 } from '@raydium-io/raydium-sdk'; // Raydium SDK 的流动性池密钥类型
-import { logger } from '../helpers'; // 自定义日志记录器
-
-// 创建 BurnFilter 类实现 Filter 接口
-export class BurnFilter implements Filter {
-  constructor(private readonly connection: Connection) {} // 构造函数，接受 Solana 连接
-
-  // 执行过滤器的方法
-  async execute(poolKeys: LiquidityPoolKeysV4): Promise<FilterResult> {
-    try {
-      // 获取流动性池的代币供应量
-      const amount = await this.connection.getTokenSupply(poolKeys.lpMint, this.connection.commitment);
-      const burned = amount.value.uiAmount === 0; // 判断 LP 是否已被销毁
-      return { ok: burned, message: burned ? undefined : "已销毁 -> 创建者未销毁 LP" }; // 返回结果
-    } catch (e: any) {
-      // 捕获错误，检查错误代码
-      if (e.code == -32602) {
-        return { ok: true }; // 如果是特定错误代码，返回 ok 为 true
-      }
-
-      // 记录错误日志
-      logger.error({ mint: poolKeys.baseMint }, `检查 LP 是否已销毁失败`);
-    }
-
-    return { ok: false, message: '检查 LP 是否已销毁失败' }; // 返回未通过的结果
-  }
-}
Index: 1 AxisBot Solana Sniper Main/helpers/promises.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/helpers/promises.ts b/1 AxisBot Solana Sniper Main/helpers/promises.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/helpers/promises.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,3 +0,0 @@
-// 创建一个睡眠函数，返回一个 Promise
-export const sleep = (ms = 0) => new Promise((resolve) => setTimeout(resolve, ms));
-// 默认参数 ms 为 0，调用 setTimeout 在指定的毫秒数后解析 Promise
Index: 1 AxisBot Solana Sniper Main/filters/renounced.filter.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/filters/renounced.filter.ts b/1 AxisBot Solana Sniper Main/filters/renounced.filter.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/filters/renounced.filter.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,45 +0,0 @@
-// 导入所需的模块和库
-import { Filter, FilterResult } from './pool-filters'; // 过滤器接口和结果类型
-import { MintLayout } from '@solana/spl-token'; // 代币布局
-import { Connection } from '@solana/web3.js'; // Solana 相关库
-import { LiquidityPoolKeysV4 } from '@raydium-io/raydium-sdk'; // Raydium SDK 的流动性池密钥类型
-import { logger } from '../helpers'; // 自定义日志记录器
-
-// 创建 RenouncedFreezeFilter 类实现 Filter 接口
-export class RenouncedFreezeFilter implements Filter {
-  constructor(
-    private readonly connection: Connection, // Solana 连接
-    private readonly checkRenounced: boolean, // 是否检查是否放弃
-    private readonly checkFreezable: boolean // 是否检查是否可冻结
-  ) {}
-
-  // 执行过滤器的方法
-  async execute(poolKeys: LiquidityPoolKeysV4): Promise<FilterResult> {
-    // 构建错误消息
-    const errorMessage = [this.checkRenounced ? 'mint' : undefined, this.checkFreezable ? 'freeze' : undefined].filter((e) => e !== undefined);
-
-    try {
-      // 获取基础代币的账户信息
-      const accountInfo = await this.connection.getAccountInfo(poolKeys.baseMint, this.connection.commitment);
-      if (!accountInfo?.data) {
-        return { ok: false, message: '放弃冻结 -> 获取账户数据失败' }; // 返回错误信息
-      }
-
-      // 解码代币账户信息
-      const deserialize = MintLayout.decode(accountInfo.data);
-      const renounced = !this.checkRenounced || deserialize.mintAuthorityOption === 0; // 检查是否放弃
-      const freezable = !this.checkFreezable || deserialize.freezeAuthorityOption !== 0; // 检查是否可冻结
-
-      // 构建返回消息
-      const message = [renounced ? undefined : 'mint', !freezable ? undefined : 'freeze'].filter((e) => e !== undefined);
-      const ok = renounced && !freezable; // 检查是否满足条件
-
-      return { ok: ok, message: ok ? undefined : `放弃冻结 -> 创建者可以 ${message.join(' 和 ')} 代币` }; // 返回结果
-    } catch (e) {
-      // 记录错误日志
-      logger.error({ mint: poolKeys.baseMint }, `放弃冻结 -> 检查创建者是否可以 ${errorMessage.join(' 和 ')} 代币失败`);
-    }
-
-    return { ok: false, message: `放弃冻结 -> 检查创建者是否可以 ${errorMessage.join(' 和 ')} 代币失败` }; // 返回未通过的结果
-  }
-}
Index: 1 AxisBot Solana Sniper Main/index.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/index.ts b/1 AxisBot Solana Sniper Main/index.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/index.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,252 +0,0 @@
-// 导入所需的模块和库
-import { MarketCache, PoolCache } from './cache'; // 缓存相关
-import { Listeners } from './listeners'; // 监听器
-import { Connection, KeyedAccountInfo, Keypair } from '@solana/web3.js'; // Solana 连接和账户信息
-import { LIQUIDITY_STATE_LAYOUT_V4, MARKET_STATE_LAYOUT_V3, Token, TokenAmount } from '@raydium-io/raydium-sdk'; // Raydium SDK
-import { AccountLayout, getAssociatedTokenAddressSync } from '@solana/spl-token'; // 账户布局和代币地址
-import { Bot, BotConfig } from './bot'; // 机器人相关
-import { DefaultTransactionExecutor, TransactionExecutor } from './transactions'; // 交易执行器
-import {
-  getToken,
-  getWallet,
-  logger,
-  COMMITMENT_LEVEL,
-  RPC_ENDPOINT,
-  RPC_WEBSOCKET_ENDPOINT,
-  PRE_LOAD_EXISTING_MARKETS,
-  LOG_LEVEL,
-  CHECK_IF_MUTABLE,
-  CHECK_IF_MINT_IS_RENOUNCED,
-  CHECK_IF_FREEZABLE,
-  CHECK_IF_BURNED,
-  QUOTE_MINT,
-  MAX_POOL_SIZE,
-  MIN_POOL_SIZE,
-  QUOTE_AMOUNT,
-  PRIVATE_KEY,
-  USE_SNIPE_LIST,
-  ONE_TOKEN_AT_A_TIME,
-  AUTO_SELL_DELAY,
-  MAX_SELL_RETRIES,
-  AUTO_SELL,
-  MAX_BUY_RETRIES,
-  AUTO_BUY_DELAY,
-  COMPUTE_UNIT_LIMIT,
-  COMPUTE_UNIT_PRICE,
-  CACHE_NEW_MARKETS,
-  TAKE_PROFIT,
-  STOP_LOSS,
-  BUY_SLIPPAGE,
-  SELL_SLIPPAGE,
-  PRICE_CHECK_DURATION,
-  PRICE_CHECK_INTERVAL,
-  SNIPE_LIST_REFRESH_INTERVAL,
-  TRANSACTION_EXECUTOR,
-  CUSTOM_FEE,
-  FILTER_CHECK_INTERVAL,
-  FILTER_CHECK_DURATION,
-  CONSECUTIVE_FILTER_MATCHES,
-} from './helpers'; // 辅助函数和常量
-import { version } from './package.json'; // 获取版本信息
-import { WarpTransactionExecutor } from './transactions/warp-transaction-executor'; // Warp 交易执行器
-import { JitoTransactionExecutor } from './transactions/jito-rpc-transaction-executor'; // Jito 交易执行器
-
-// 创建与Solana区块链的连接
-const connection = new Connection(RPC_ENDPOINT, {
-  wsEndpoint: RPC_WEBSOCKET_ENDPOINT,
-  commitment: COMMITMENT_LEVEL,
-});
-
-// 打印钱包和机器人配置信息的函数
-function printDetails(wallet: Keypair, quoteToken: Token, bot: Bot) {
-  logger.info(`  
-  
- █████╗ ██╗  ██╗██╗███████╗██████╗  ██████╗ ████████╗
-██╔══██╗╚██╗██╔╝██║██╔════╝██╔══██╗██╔═══██╗╚══██╔══╝
-███████║ ╚███╔╝ ██║███████╗██████╔╝██║   ██║   ██║   
-██╔══██║ ██╔██╗ ██║╚════██║██╔══██╗██║   ██║   ██║   
-██║  ██║██╔╝ ██╗██║███████║██████╔╝╚██████╔╝   ██║   
-╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚══════╝╚═════╝  ╚═════╝    ╚═╝                                                   
-                            
-          AxisBot Solana Sniper v1.0
-          制作团队：AxisBot Team
-          版本：${version}                                          
-  `);
-
-  const botConfig = bot.config; // 获取机器人配置
-
-  logger.info('------- 配置开始 -------');
-  logger.info(`钱包地址: ${wallet.publicKey.toString()}`);
-
-  logger.info('- 机器人 -');
-
-  logger.info(
-    `使用的执行器: ${bot.isWarp || bot.isJito || (TRANSACTION_EXECUTOR === 'default' ? true : false)}`,
-  );
-  if (bot.isWarp || bot.isJito) {
-    logger.info(`${TRANSACTION_EXECUTOR} 费用: ${CUSTOM_FEE}`); // 打印执行器费用
-  } else {
-    logger.info(`计算单元限制: ${botConfig.unitLimit}`); // 打印计算单元限制
-    logger.info(`计算单元价格（微 lamports）: ${botConfig.unitPrice}`); // 打印计算单元价格
-  }
-
-  logger.info(`每次处理一个代币: ${botConfig.oneTokenAtATime}`); // 打印每次处理一个代币的设置
-  logger.info(`预加载现有市场: ${PRE_LOAD_EXISTING_MARKETS}`); // 打印是否预加载现有市场
-  logger.info(`缓存新市场: ${CACHE_NEW_MARKETS}`); // 打印缓存新市场的设置
-  logger.info(`日志级别: ${LOG_LEVEL}`); // 打印日志级别
-
-  logger.info('- 购买 -');
-  logger.info(`购买金额: ${botConfig.quoteAmount.toFixed()} ${botConfig.quoteToken.name}`); // 打印购买金额
-  logger.info(`自动购买延迟: ${botConfig.autoBuyDelay} 毫秒`); // 打印自动购买延迟
-  logger.info(`最大购买重试次数: ${botConfig.maxBuyRetries}`); // 打印最大购买重试次数
-  logger.info(`购买金额（${quoteToken.symbol}）: ${botConfig.quoteAmount.toFixed()}`); // 打印购买金额
-  logger.info(`购买滑点: ${botConfig.buySlippage}%`); // 打印购买滑点
-
-  logger.info('- 出售 -');
-  logger.info(`自动出售: ${AUTO_SELL}`); // 打印自动出售设置
-  logger.info(`自动出售延迟: ${botConfig.autoSellDelay} 毫秒`); // 打印自动出售延迟
-  logger.info(`最大出售重试次数: ${botConfig.maxSellRetries}`); // 打印最大出售重试次数
-  logger.info(`出售滑点: ${botConfig.sellSlippage}%`); // 打印出售滑点
-  logger.info(`价格检查间隔: ${botConfig.priceCheckInterval} 毫秒`); // 打印价格检查间隔
-  logger.info(`价格检查持续时间: ${botConfig.priceCheckDuration} 毫秒`); // 打印价格检查持续时间
-  logger.info(`止盈: ${botConfig.takeProfit}%`); // 打印止盈设置
-  logger.info(`止损: ${botConfig.stopLoss}%`); // 打印止损设置
-
-  logger.info('- 抢购列表 -');
-  logger.info(`使用抢购列表: ${botConfig.useSnipeList}`); // 打印抢购列表设置
-  logger.info(`抢购列表刷新间隔: ${SNIPE_LIST_REFRESH_INTERVAL} 毫秒`); // 打印抢购列表刷新间隔
-
-  if (botConfig.useSnipeList) {
-    logger.info('- 过滤器 -');
-    logger.info(`启用抢购列表时过滤器被禁用`); // 打印过滤器禁用信息
-  } else {
-    logger.info('- 过滤器 -');
-    logger.info(`过滤器检查间隔: ${botConfig.filterCheckInterval} 毫秒`); // 打印过滤器检查间隔
-    logger.info(`过滤器检查持续时间: ${botConfig.filterCheckDuration} 毫秒`); // 打印过滤器检查持续时间
-    logger.info(`连续过滤器匹配次数: ${botConfig.consecutiveMatchCount}`); // 打印连续过滤器匹配次数
-    logger.info(`检查是否被放弃: ${botConfig.checkRenounced}`); // 打印检查是否被放弃设置
-    logger.info(`检查是否可冻结: ${botConfig.checkFreezable}`); // 打印检查是否可冻结设置
-    logger.info(`检查是否已销毁: ${botConfig.checkBurned}`); // 打印检查是否已销毁设置
-    logger.info(`最小池大小: ${botConfig.minPoolSize.toFixed()}`); // 打印最小池大小
-    logger.info(`最大池大小: ${botConfig.maxPoolSize.toFixed()}`); // 打印最大池大小
-  }
-
-  logger.info('------- 配置结束 -------');
-
-  logger.info('机器人正在运行！按 CTRL + C 停止它。');
-}
-
-// 启动监听器的函数
-const runListener = async () => {
-  logger.level = LOG_LEVEL; // 设置日志级别
-  logger.info('机器人正在启动...'); // 打印启动信息
-
-  const marketCache = new MarketCache(connection); // 创建市场缓存
-  const poolCache = new PoolCache(); // 创建池缓存
-  let txExecutor: TransactionExecutor; // 定义交易执行器变量
-
-  // 根据配置选择交易执行器
-  switch (TRANSACTION_EXECUTOR) {
-    case 'warp': {
-      txExecutor = new WarpTransactionExecutor(CUSTOM_FEE); // 创建Warp交易执行器
-      break;
-    }
-    case 'jito': {
-      txExecutor = new JitoTransactionExecutor(CUSTOM_FEE, connection); // 创建Jito交易执行器
-      break;
-    }
-    default: {
-      txExecutor = new DefaultTransactionExecutor(connection); // 默认交易执行器
-      break;
-    }
-  }
-
-  const wallet = getWallet(PRIVATE_KEY.trim()); // 获取钱包
-  const quoteToken = getToken(QUOTE_MINT); // 获取报价代币
-  const botConfig = <BotConfig>{
-    wallet,
-    quoteAta: getAssociatedTokenAddressSync(quoteToken.mint, wallet.publicKey), // 获取关联代币地址
-    checkRenounced: CHECK_IF_MINT_IS_RENOUNCED,
-    checkFreezable: CHECK_IF_FREEZABLE,
-    checkBurned: CHECK_IF_BURNED,
-    minPoolSize: new TokenAmount(quoteToken, MIN_POOL_SIZE, false), // 最小池大小
-    maxPoolSize: new TokenAmount(quoteToken, MAX_POOL_SIZE, false), // 最大池大小
-    quoteToken,
-    quoteAmount: new TokenAmount(quoteToken, QUOTE_AMOUNT, false), // 报价金额
-    oneTokenAtATime: ONE_TOKEN_AT_A_TIME,
-    useSnipeList: USE_SNIPE_LIST,
-    autoSell: AUTO_SELL,
-    autoSellDelay: AUTO_SELL_DELAY,
-    maxSellRetries: MAX_SELL_RETRIES,
-    autoBuyDelay: AUTO_BUY_DELAY,
-    maxBuyRetries: MAX_BUY_RETRIES,
-    unitLimit: COMPUTE_UNIT_LIMIT, // 计算单元限制
-    unitPrice: COMPUTE_UNIT_PRICE, // 计算单元价格
-    takeProfit: TAKE_PROFIT, // 止盈设置
-    stopLoss: STOP_LOSS, // 止损设置
-    buySlippage: BUY_SLIPPAGE, // 购买滑点
-    sellSlippage: SELL_SLIPPAGE, // 出售滑点
-    priceCheckInterval: PRICE_CHECK_INTERVAL, // 价格检查间隔
-    priceCheckDuration: PRICE_CHECK_DURATION, // 价格检查持续时间
-    filterCheckInterval: FILTER_CHECK_INTERVAL, // 过滤器检查间隔
-    filterCheckDuration: FILTER_CHECK_DURATION, // 过滤器检查持续时间
-    consecutiveMatchCount: CONSECUTIVE_FILTER_MATCHES, // 连续匹配次数
-  };
-
-  const bot = new Bot(connection, marketCache, poolCache, txExecutor, botConfig); // 创建机器人实例
-  const valid = await bot.validate(); // 验证机器人配置
-
-  if (!valid) {
-    logger.info('机器人正在退出...'); // 验证失败时退出
-    process.exit(1); // 退出程序
-  }
-
-  if (PRE_LOAD_EXISTING_MARKETS) {
-    await marketCache.init({ quoteToken }); // 初始化市场缓存
-  }
-
-  const runTimestamp = Math.floor(new Date().getTime() / 1000); // 获取当前时间戳
-  const listeners = new Listeners(connection); // 创建监听器实例
-  await listeners.start({
-    walletPublicKey: wallet.publicKey,
-    quoteToken,
-    autoSell: AUTO_SELL,
-    cacheNewMarkets: CACHE_NEW_MARKETS,
-  });
-
-  // 监听市场信息更新
-  listeners.on('market', (updatedAccountInfo: KeyedAccountInfo) => {
-    const marketState = MARKET_STATE_LAYOUT_V3.decode(updatedAccountInfo.accountInfo.data); // 解码市场状态
-    marketCache.save(updatedAccountInfo.accountId.toString(), marketState); // 保存市场状态
-  });
-
-  // 监听池信息更新
-  listeners.on('pool', async (updatedAccountInfo: KeyedAccountInfo) => {
-    const poolState = LIQUIDITY_STATE_LAYOUT_V4.decode(updatedAccountInfo.accountInfo.data); // 解码池状态
-    const poolOpenTime = parseInt(poolState.poolOpenTime.toString()); // 获取池开放时间
-    const exists = await poolCache.get(poolState.baseMint.toString()); // 检查池是否存在
-
-    // 如果池不存在且开放时间在当前时间之后，则进行购买
-    if (!exists && poolOpenTime > runTimestamp) {
-      poolCache.save(updatedAccountInfo.accountId.toString(), poolState); // 保存池状态
-      await bot.buy(updatedAccountInfo.accountId, poolState); // 执行购买
-    }
-  });
-
-  // 监听钱包信息更新
-  listeners.on('wallet', async (updatedAccountInfo: KeyedAccountInfo) => {
-    const accountData = AccountLayout.decode(updatedAccountInfo.accountInfo.data); // 解码账户数据
-
-    // 如果账户数据的mint与报价代币相同，则返回
-    if (accountData.mint.equals(quoteToken.mint)) {
-      return;
-    }
-
-    await bot.sell(updatedAccountInfo.accountId, accountData); // 执行出售
-  });
-
-  printDetails(wallet, quoteToken, bot); // 打印详细信息
-};
-
-// 运行监听器
-runListener();
Index: 2 AxisBot Spam Sniper/.gitignore
===================================================================
diff --git a/2 AxisBot Spam Sniper/.gitignore b/2 AxisBot Spam Sniper/.gitignore
deleted file mode 100644
--- a/2 AxisBot Spam Sniper/.gitignore	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,2 +0,0 @@
-**/node_modules
-.DS_Store
\ No newline at end of file
Index: 2 AxisBot Spam Sniper/strategy1/swap1.js
===================================================================
diff --git a/2 AxisBot Spam Sniper/strategy1/swap1.js b/2 AxisBot Spam Sniper/strategy1/swap1.js
deleted file mode 100644
--- a/2 AxisBot Spam Sniper/strategy1/swap1.js	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,113 +0,0 @@
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-const assert_1 = __importDefault(require("assert"));
-const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
-const config_1 = require("../utils/config.js");
-const formatAmmKeysById_1 = require("./formatAmmKeysById.js");
-const util_1 = require("../utils/util.js");
-const { LAMPORTS_PER_SOL } = require("@solana/web3.js");
-const web3 = require("@solana/web3.js");
-const connection = config_1.connection;
-function swapOnlyAmm(input) {
-    return __awaiter(this, void 0, void 0, function* () {
-        const outputToken = new raydium_sdk_1.Token(raydium_sdk_1.TOKEN_PROGRAM_ID, new web3.PublicKey(input.tokenAddress), input.poolKeys.lpDecimals);
-        const { innerTransactions } = yield raydium_sdk_1.Liquidity.makeSwapInstructionSimple({
-            connection: config_1.connection,
-            poolKeys: input.poolKeys,
-            userKeys: {
-                tokenAccounts: input.walletTokenAccounts,
-                owner: input.wallet.publicKey,
-            },
-            amountIn: input.inputTokenAmount,
-            amountOut: new raydium_sdk_1.TokenAmount(outputToken, 1),
-            fixedSide: 'in',
-            makeTxVersion: config_1.makeTxVersion,
-        });
-        return { txids: yield (0, util_1.buildAndSendTx)(innerTransactions) };
-    });
-}
-
-const buyAmtSol = config_1.amtBuySol;
-function swap(poolKeys, tokenAddress) {
-    return __awaiter(this, void 0, void 0, function* () {
-        const ownerAddress = config_1.ownerAddress;
-        const inputToken = new raydium_sdk_1.Token(raydium_sdk_1.TOKEN_PROGRAM_ID, new web3_js_1.PublicKey('So11111111111111111111111111111111111111112'), 9, 'WSOL', 'WSOL'); // WSOL
-        const inputTokenAmount = new raydium_sdk_1.TokenAmount(inputToken, LAMPORTS_PER_SOL * buyAmtSol);
-        const slippage = new raydium_sdk_1.Percent(1, 100);
-        const walletTokenAccounts = yield (0, util_1.getWalletTokenAccount)(config_1.connection, config_1.wallet.publicKey);
-        swapOnlyAmm({
-            poolKeys,
-            tokenAddress, 
-            inputTokenAmount,
-            slippage,
-            walletTokenAccounts,
-            wallet: config_1.wallet,
-        }).then(({ txids }) => {
-            /** continue with txids */
-            console.log('txids', txids);
-            if(txids.length === 1){
-                monitorTokenSell(txids[0], tokenAddress, ownerAddress, poolKeys.baseVault.toString(), poolKeys.quoteVault.toString());
-            }
-        }).catch(error => {
-            console.log(error);
-            swap(poolKeys, tokenAddress);
-        })
-    });
-}
-exports.swap = swap
-
-async function getTx(tx){
-    return await connection.getTransaction(tx, {
-        maxSupportedTransactionVersion: 0,
-        commitment: "confirmed"
-    })
-}
-
-async function getBalances(tx, tokenAddress, ownerAddress){
-    let validTx = await getTx(tx);
-    while(validTx === null){
-        validTx = await getTx(tx);
-        if(validTx !== null){
-            for(const account of validTx.meta.postTokenBalances){
-                if(account.mint === tokenAddress && account.owner === ownerAddress){
-                    return account.uiTokenAmount.uiAmount;
-                }
-            }
-        }
-    }
-}
-
-async function getTokenPriceInSol(baseVault, quoteVault){
-    const baseVaultAccount = await connection.getTokenAccountBalance(new web3.PublicKey(baseVault));
-    const quoteVaultAccount = await connection.getTokenAccountBalance(new web3.PublicKey(quoteVault));
-    const baseVaultAccountAmount = baseVaultAccount.value.uiAmount;
-    const quoteVaultAccountAmount = quoteVaultAccount.value.uiAmount;
-    return (quoteVaultAccountAmount / baseVaultAccountAmount);
-}
-
-async function monitorTokenSell(tx, tokenAddress, ownerAddress, baseVault, quoteVault){
-    const tokenBalance = await getBalances(tx, tokenAddress, ownerAddress);
-    const buyPrice = (buyAmtSol / tokenBalance);
-    monitorToken(buyPrice, baseVault, quoteVault);
-}
-
-async function monitorToken(buyPrice, baseVault, quoteVault){
-    let interval = setInterval(async () => {
-        const currentPrice = await getTokenPriceInSol(baseVault, quoteVault);
-        console.log("buy price: " + buyPrice + " current price: " + currentPrice);
-        const percentIncrease = ((buyPrice - currentPrice) / buyPrice) * 100;
-        console.log("percent increase: " + percentIncrease);
-    }, 500)
-}
\ No newline at end of file
Index: 1 AxisBot Solana Sniper Main/helpers/logger.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/helpers/logger.ts b/1 AxisBot Solana Sniper Main/helpers/logger.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/helpers/logger.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,20 +0,0 @@
-// 导入 pino 日志库
-import pino from 'pino';
-
-// 配置日志传输格式
-const transport = pino.transport({
-  target: 'pino-pretty', // 使用 pino-pretty 格式化日志输出
-});
-
-// 创建日志记录器
-export const logger = pino(
-  {
-    level: 'info', // 设置日志级别为 info
-    redact: ['poolKeys'], // 遮蔽 poolKeys 字段以保护敏感信息
-    serializers: {
-      error: pino.stdSerializers.err, // 使用标准错误序列化器
-    },
-    base: undefined, // 不输出基础字段
-  },
-  transport, // 使用配置的传输格式
-);
Index: 2 AxisBot Spam Sniper/strategy1/start1.js
===================================================================
diff --git a/2 AxisBot Spam Sniper/strategy1/start1.js b/2 AxisBot Spam Sniper/strategy1/start1.js
deleted file mode 100644
--- a/2 AxisBot Spam Sniper/strategy1/start1.js	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,110 +0,0 @@
-const web3 = require('@solana/web3.js')
-const WebSocket = require('ws')
-const swap = require('./swap1.js')
-const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
-const config = require('../utils/config.js');
-
-const connection = config.connection;
-const ws = new WebSocket(config.websocketConnection)
-    ws.onopen = () => {
-        ws.send(
-            JSON.stringify({
-                jsonrpc: '2.0',
-                id: 1,
-                method: 'blockSubscribe',
-                params: [{"mentionsAccountOrProgram": "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8"}, {"commitment": "confirmed", "maxSupportedTransactionVersion": 0, "encoding": "jsonParsed"}]
-            })
-        )
-    }
-
-ws.on('message', (evt) => {
-    try {
-        const buffer = evt.toString('utf8');
-        parseBlock(JSON.parse(buffer));
-        return;
-    } catch (e) {
-        console.log(e)
-    }
-})
-
-function isStatusError(status){
-    if(status.hasOwnProperty('Err')){
-        return true;
-    }
-    else if(status.hasOwnProperty('Ok')){
-        return false;
-    }
-}
-
-async function getTx(tx){
-    return await connection.getTransaction(tx, {
-        "commitment": "confirmed",
-        "maxSupportedTransactionVersion": 0,
-        "encoded": "jsonParsed"
-    })
-}
-
-let swapped = false;
-function parseBlock(transaction){
-    try{
-        const tx = transaction.params.result.value.block.transactions;
-        for(let i = 0; i < tx.length; i++){
-            if(tx[i].meta.innerInstructions !== undefined && tx[i].meta.innerInstructions.length !== 0){
-                if(tx[i].meta.innerInstructions[0].instructions.length === 32 && !isStatusError(tx[i].meta.status)){
-                    const signature = tx[i].transaction.signatures[0];
-                    console.log(tx[i].transaction.signatures);
-                    if(swapped === false){
-                        swapped = true;
-                        let now = new Date();
-                        let utcString = now.toUTCString();
-                        console.log(utcString);
-                        ws.close();
-                    }
-                }
-            }
-    }
-    } catch(error){
-        console.log("searching...")
-    }
-}
-
-async function getJsonPoolInfo(tx){
-    // market account
-    const marketAccount = await connection.getAccountInfo(new web3.PublicKey(tx.transaction.message.accountKeys[19].pubkey));
-    const marketInfo = raydium_sdk_1.MARKET_STATE_LAYOUT_V3.decode(marketAccount.data);
-    // get decimals
-    const getTokenAccount = await connection.getParsedAccountInfo(new web3.PublicKey(tx.transaction.message.accountKeys[17].pubkey));
-    const decimals = getTokenAccount.value.data.parsed.info.decimals;
-    // create poolKeys object
-    const keys = {
-        id: tx.transaction.message.accountKeys[2].pubkey,
-        baseMint: tx.transaction.message.accountKeys[17].pubkey,
-        quoteMint: 'So11111111111111111111111111111111111111112',
-        lpMint: tx.transaction.message.accountKeys[4].pubkey,
-        baseDecimals: decimals,
-        quoteDecimals: 9,
-        lpDecimals: decimals,
-        version: 4,
-        programId: '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8',
-        authority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',
-        openOrders: tx.transaction.message.accountKeys[3].pubkey,
-        targetOrders: tx.transaction.message.accountKeys[7].pubkey,
-        baseVault: tx.transaction.message.accountKeys[5].pubkey,
-        quoteVault: tx.transaction.message.accountKeys[6].pubkey,
-        withdrawQueue: '11111111111111111111111111111111',
-        lpVault: '11111111111111111111111111111111',
-        marketVersion: 3,
-        marketProgramId: tx.transaction.message.accountKeys[22].pubkey,
-        marketId: tx.transaction.message.accountKeys[19].pubkey,
-        marketAuthority: raydium_sdk_1.Market.getAssociatedAuthority({ programId: new web3.PublicKey(tx.transaction.message.accountKeys[22].pubkey), marketId: new web3.PublicKey(tx.transaction.message.accountKeys[19].pubkey) }).publicKey.toString(),
-        marketBaseVault: marketInfo.baseVault.toString(),
-        marketQuoteVault: marketInfo.quoteVault.toString(),
-        marketBids: marketInfo.bids.toString(),
-        marketAsks: marketInfo.asks.toString(),
-        marketEventQueue: marketInfo.eventQueue.toString(),
-        lookupTableAccount: '11111111111111111111111111111111'
-    }
-    // convert poolKeys object to JSON
-    const jsonPoolKeys = raydium_sdk_1.jsonInfo2PoolKeys(keys);
-    swap.swap(jsonPoolKeys, tx.transaction.message.accountKeys[17].pubkey);
-}
\ No newline at end of file
Index: 1 AxisBot Solana Sniper Main/cache/snipe-list.cache.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/cache/snipe-list.cache.ts b/1 AxisBot Solana Sniper Main/cache/snipe-list.cache.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/cache/snipe-list.cache.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,42 +0,0 @@
-// 导入所需的模块和库
-import fs from 'fs'; // 文件系统模块
-import path from 'path'; // 路径处理模块
-import { logger, SNIPE_LIST_REFRESH_INTERVAL } from '../helpers'; // 自定义日志记录器和常量
-
-// 创建 SnipeListCache 类
-export class SnipeListCache {
-  private snipeList: string[] = []; // 存储抢购列表
-  private fileLocation = path.join(__dirname, '../snipe-list.txt'); // 抢购列表文件的路径
-
-  constructor() {
-    // 设置定时器，定时刷新抢购列表
-    setInterval(() => this.loadSnipeList(), SNIPE_LIST_REFRESH_INTERVAL);
-  }
-
-  // 初始化方法，加载抢购列表
-  public init() {
-    this.loadSnipeList(); // 加载抢购列表
-  }
-
-  // 检查某个 mint 是否在抢购列表中
-  public isInList(mint: string) {
-    return this.snipeList.includes(mint); // 返回结果
-  }
-
-  // 私有方法：加载抢购列表
-  private loadSnipeList() {
-    logger.trace(`正在刷新抢购列表...`); // 记录刷新日志
-
-    const count = this.snipeList.length; // 记录当前列表的长度
-    const data = fs.readFileSync(this.fileLocation, 'utf-8'); // 读取抢购列表文件
-    this.snipeList = data
-      .split('\n') // 按行分割
-      .map((a) => a.trim()) // 去掉每行的空白
-      .filter((a) => a); // 过滤掉空行
-
-    // 如果列表长度发生变化，记录加载信息
-    if (this.snipeList.length != count) {
-      logger.info(`加载抢购列表: ${this.snipeList.length}`); // 记录加载的抢购列表数量
-    }
-  }
-}
Index: 1 AxisBot Solana Sniper Main/.gitignore
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/.gitignore b/1 AxisBot Solana Sniper Main/.gitignore
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/.gitignore	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,139 +0,0 @@
-# Logs
-logs
-*.log
-npm-debug.log*
-yarn-debug.log*
-yarn-error.log*
-lerna-debug.log*
-.pnpm-debug.log*
-
-# Diagnostic reports (https://nodejs.org/api/report.html)
-report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
-
-# Runtime data
-pids
-*.pid
-*.seed
-*.pid.lock
-
-# Directory for instrumented libs generated by jscoverage/JSCover
-lib-cov
-
-# Coverage directory used by tools like istanbul
-coverage
-*.lcov
-
-# nyc test coverage
-.nyc_output
-
-# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
-.grunt
-
-# Bower dependency directory (https://bower.io/)
-bower_components
-
-# node-waf configuration
-.lock-wscript
-
-# Compiled binary addons (https://nodejs.org/api/addons.html)
-build/Release
-
-# Dependency directories
-node_modules/
-jspm_packages/
-
-# Snowpack dependency directory (https://snowpack.dev/)
-web_modules/
-
-# TypeScript cache
-*.tsbuildinfo
-
-# Optional npm cache directory
-.npm
-
-# Optional eslint cache
-.eslintcache
-
-# Optional stylelint cache
-.stylelintcache
-
-# Microbundle cache
-.rpt2_cache/
-.rts2_cache_cjs/
-.rts2_cache_es/
-.rts2_cache_umd/
-
-# Optional REPL history
-.node_repl_history
-
-# Output of 'npm pack'
-*.tgz
-
-# Yarn Integrity file
-.yarn-integrity
-
-# dotenv environment variable files
-.env
-.env.development.local
-.env.test.local
-.env.production.local
-.env.local
-
-# parcel-bundler cache (https://parceljs.org/)
-.cache
-.parcel-cache
-
-# Next.js build output
-.next
-out
-
-# Nuxt.js build / generate output
-.nuxt
-dist
-
-# Gatsby files
-.cache/
-# Comment in the public line in if your project uses Gatsby and not Next.js
-# https://nextjs.org/blog/next-9-1#public-directory-support
-# public
-
-# vuepress build output
-.vuepress/dist
-
-# vuepress v2.x temp and cache directory
-.temp
-.cache
-
-# Docusaurus cache and generated files
-.docusaurus
-
-# Serverless directories
-.serverless/
-
-# FuseBox cache
-.fusebox/
-
-# DynamoDB Local files
-.dynamodb/
-
-# TernJS port file
-.tern-port
-
-# Stores VSCode versions used for testing VSCode extensions
-.vscode-test
-
-# PNPM
-pnpm-lock.yaml
-
-# yarn v2
-.yarn/cache
-.yarn/unplugged
-.yarn/build-state.yml
-.yarn/install-state.gz
-.pnp.*
-
-# JetBrains
-.idea
-
-# Visual Studio Code 
-*.code-workspace
Index: 1 AxisBot Solana Sniper Main/filters/mutable.filter.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/filters/mutable.filter.ts b/1 AxisBot Solana Sniper Main/filters/mutable.filter.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/filters/mutable.filter.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,43 +0,0 @@
-// 导入所需的模块和库
-import { Filter, FilterResult } from './pool-filters'; // 过滤器接口和结果类型
-import { Connection, PublicKey } from '@solana/web3.js'; // Solana 相关库
-import { LiquidityPoolKeysV4 } from '@raydium-io/raydium-sdk'; // Raydium SDK 的流动性池密钥类型
-import { getPdaMetadataKey } from '@raydium-io/raydium-sdk'; // 获取 PDA 元数据键的函数
-import { getMetadataAccountDataSerializer, MetadataAccountData, MetadataAccountDataArgs } from '@metaplex-foundation/mpl-token-metadata'; // Metaplex 相关库
-import { Serializer } from '@metaplex-foundation/umi/serializers'; // Serializer 类型
-import { logger } from '../helpers'; // 自定义日志记录器
-
-// 创建 MutableFilter 类实现 Filter 接口
-export class MutableFilter implements Filter {
-  constructor(
-    private readonly connection: Connection, // Solana 连接
-    private readonly metadataSerializer: Serializer<MetadataAccountDataArgs, MetadataAccountData> // 元数据序列化器
-  ) {}
-
-  // 执行过滤器的方法
-  async execute(poolKeys: LiquidityPoolKeysV4): Promise<FilterResult> {
-    try {
-      // 获取与基础代币相关的元数据 PDA
-      const metadataPDA = getPdaMetadataKey(poolKeys.baseMint);
-      // 获取元数据账户信息
-      const metadataAccount = await this.connection.getAccountInfo(metadataPDA.publicKey);
-
-      // 检查账户数据是否存在
-      if (!metadataAccount?.data) {
-        return { ok: false, message: '可变性 -> 获取账户数据失败' }; // 返回错误信息
-      }
-
-      // 反序列化账户数据
-      const deserialize = this.metadataSerializer.deserialize(metadataAccount.data);
-      const mutable = deserialize[0].isMutable; // 检查元数据是否可变
-
-      // 返回结果
-      return { ok: !mutable, message: !mutable ? undefined : "可变性 -> 创建者可以更改元数据" };
-    } catch (e: any) {
-      // 记录错误日志
-      logger.error({ mint: poolKeys.baseMint }, `可变性 -> 检查元数据是否可变失败`);
-    }
-
-    return { ok: false, message: '可变性 -> 检查元数据是否可变失败' }; // 返回未通过的结果
-  }
-}
Index: 1 AxisBot Solana Sniper Main/transactions/jito-rpc-transaction-executor.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/transactions/jito-rpc-transaction-executor.ts b/1 AxisBot Solana Sniper Main/transactions/jito-rpc-transaction-executor.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/transactions/jito-rpc-transaction-executor.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,138 +0,0 @@
-// 导入所需的模块和库
-import {
-  BlockhashWithExpiryBlockHeight,
-  Keypair,
-  PublicKey,
-  SystemProgram,
-  Connection,
-  TransactionMessage,
-  VersionedTransaction,
-} from '@solana/web3.js'; // Solana 相关库
-import { TransactionExecutor } from './transaction-executor.interface'; // 交易执行器接口
-import { logger } from '../helpers'; // 日志记录器
-import axios, { AxiosError } from 'axios'; // Axios 库用于 HTTP 请求
-import bs58 from 'bs58'; // Base58 编码库
-import { Currency, CurrencyAmount } from '@raydium-io/raydium-sdk'; // Raydium SDK
-
-// Jito 交易执行器类
-export class JitoTransactionExecutor implements TransactionExecutor {
-  // Jito 提示账户列表
-  private jitpTipAccounts = [
-    'Cw8CFyM9FkoMi7K7Crf6HNQqf4uEMzpKw6QNghXLvLkY',
-    'DttWaMuVvTiduZRnguLF7jNxTgiMBZ1hyAumKUiL2KRL',
-    '96gYZGLnJYVFmbjzopPSU6QiEV5fGqZNyN9nmNhvrZU5',
-    '3AVi9Tg9Uo68tJfuvoKvqKNWKkC5wPdSSdeBnizKZ6jT',
-    'HFqU5x63VTqvQss8hp11i4wVV8bD44PvwucfZ2bU7gRe',
-    'ADaUMid9yfUytqMBgopwjb2DTLSokTSzL1zt6iGPaS49',
-    'ADuUkR4vqLUMWXxW9gh6D6L8pMSawimctcNZ5pGwDcEt',
-    'DfXygSm4jCyNCybVYYK6DwvWqjKee8pbDmJGcLWNDXjh',
-  ];
-
-  private JitoFeeWallet: PublicKey; // Jito 费用钱包
-
-  constructor(
-    private readonly jitoFee: string, // Jito 费用
-    private readonly connection: Connection, // Solana 连接
-  ) {
-    this.JitoFeeWallet = this.getRandomValidatorKey(); // 获取随机验证者密钥
-  }
-
-  // 获取随机验证者密钥
-  private getRandomValidatorKey(): PublicKey {
-    const randomValidator = this.jitpTipAccounts[Math.floor(Math.random() * this.jitpTipAccounts.length)];
-    return new PublicKey(randomValidator); // 返回随机选择的验证者密钥
-  }
-
-  // 执行并确认交易的公共方法
-  public async executeAndConfirm(
-    transaction: VersionedTransaction, // 版本化交易
-    payer: Keypair, // 付款方的密钥对
-    latestBlockhash: BlockhashWithExpiryBlockHeight, // 最新区块哈希和过期区块高度
-  ): Promise<{ confirmed: boolean; signature?: string }> {
-    logger.debug('开始 Jito 交易执行...'); // 记录交易执行开始日志
-    this.JitoFeeWallet = this.getRandomValidatorKey(); // 每次执行时更新钱包密钥
-    logger.trace(`选择的 Jito 费用钱包: ${this.JitoFeeWallet.toBase58()}`); // 记录选中的费用钱包
-
-    try {
-      const fee = new CurrencyAmount(Currency.SOL, this.jitoFee, false).raw.toNumber(); // 计算费用
-      logger.trace(`计算的费用: ${fee} lamports`); // 记录计算的费用
-
-      // 创建 Jito 提示交易消息
-      const jitTipTxFeeMessage = new TransactionMessage({
-        payerKey: payer.publicKey, // 付款方公钥
-        recentBlockhash: latestBlockhash.blockhash, // 最新区块哈希
-        instructions: [
-          SystemProgram.transfer({ // 转账指令
-            fromPubkey: payer.publicKey, // 付款方公钥
-            toPubkey: this.JitoFeeWallet, // 收款方公钥
-            lamports: fee, // 转账的 lamports 数量
-          }),
-        ],
-      }).compileToV0Message(); // 编译为 V0 消息
-
-      const jitoFeeTx = new VersionedTransaction(jitTipTxFeeMessage); // 创建版本化交易
-      jitoFeeTx.sign([payer]); // 签名交易
-
-      const jitoTxsignature = bs58.encode(jitoFeeTx.signatures[0]); // 获取签名并进行 Base58 编码
-
-      // 一次性序列化交易
-      const serializedjitoFeeTx = bs58.encode(jitoFeeTx.serialize()); // 序列化 Jito 费用交易
-      const serializedTransaction = bs58.encode(transaction.serialize()); // 序列化主交易
-      const serializedTransactions = [serializedjitoFeeTx, serializedTransaction]; // 组合交易
-
-      // Jito API 端点列表
-      const endpoints = [
-        'https://mainnet.block-engine.jito.wtf/api/v1/bundles',
-        'https://amsterdam.mainnet.block-engine.jito.wtf/api/v1/bundles',
-        'https://frankfurt.mainnet.block-engine.jito.wtf/api/v1/bundles',
-        'https://ny.mainnet.block-engine.jito.wtf/api/v1/bundles',
-        'https://tokyo.mainnet.block-engine.jito.wtf/api/v1/bundles',
-      ];
-
-      // 发送请求到所有端点
-      const requests = endpoints.map((url) =>
-        axios.post(url, {
-          jsonrpc: '2.0',
-          id: 1,
-          method: 'sendBundle',
-          params: [serializedTransactions], // 发送序列化的交易
-        }),
-      );
-
-      logger.trace('正在向端点发送交易...'); // 记录发送交易日志
-      const results = await Promise.all(requests.map((p) => p.catch((e) => e))); // 等待所有请求结果
-
-      const successfulResults = results.filter((result) => !(result instanceof Error)); // 筛选成功的结果
-
-      if (successfulResults.length > 0) { // 如果至少有一个成功的响应
-        logger.trace(`至少有一个成功的响应`); // 记录成功响应日志
-        logger.debug(`确认 Jito 交易...`); // 记录确认交易日志
-        return await this.confirm(jitoTxsignature, latestBlockhash); // 确认交易
-      } else {
-        logger.debug(`没有收到 Jito 的成功响应`); // 记录无成功响应日志
-      }
-
-      return { confirmed: false }; // 返回未确认
-    } catch (error) {
-      if (error instanceof AxiosError) {
-        logger.trace({ error: error.response?.data }, '执行 Jito 交易失败'); // 记录错误信息
-      }
-      logger.error('交易执行期间出错', error); // 记录错误日志
-      return { confirmed: false }; // 返回未确认
-    }
-  }
-
-  // 私有方法：确认交易
-  private async confirm(signature: string, latestBlockhash: BlockhashWithExpiryBlockHeight) {
-    const confirmation = await this.connection.confirmTransaction(
-      {
-        signature, // 交易签名
-        lastValidBlockHeight: latestBlockhash.lastValidBlockHeight, // 最后有效区块高度
-        blockhash: latestBlockhash.blockhash, // 区块哈希
-      },
-      this.connection.commitment, // 提交的确认级别
-    );
-
-    return { confirmed: !confirmation.value.err, signature }; // 返回确认结果
-  }
-}
Index: .idea/vcs.xml
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
deleted file mode 100644
--- a/.idea/vcs.xml	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="VcsDirectoryMappings">
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-  </component>
-</project>
\ No newline at end of file
Index: 1 AxisBot Solana Sniper Main/listeners/index.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/listeners/index.ts b/1 AxisBot Solana Sniper Main/listeners/index.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/listeners/index.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,1 +0,0 @@
-export * from './listeners';
Index: 1 AxisBot Solana Sniper Main/bot.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/bot.ts b/1 AxisBot Solana Sniper Main/bot.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/bot.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,468 +0,0 @@
-// 导入所需的模块和库
-import {
-  ComputeBudgetProgram,
-  Connection,
-  Keypair,
-  PublicKey,
-  TransactionMessage,
-  VersionedTransaction,
-} from '@solana/web3.js'; // Solana 相关库
-import {
-  createAssociatedTokenAccountIdempotentInstruction,
-  createCloseAccountInstruction,
-  getAccount,
-  getAssociatedTokenAddress,
-  RawAccount,
-  TOKEN_PROGRAM_ID,
-} from '@solana/spl-token'; // 代币相关操作
-import { Liquidity, LiquidityPoolKeysV4, LiquidityStateV4, Percent, Token, TokenAmount } from '@raydium-io/raydium-sdk'; // Raydium SDK
-import { MarketCache, PoolCache, SnipeListCache } from './cache'; // 缓存相关
-import { PoolFilters } from './filters'; // 过滤器
-import { TransactionExecutor } from './transactions'; // 交易执行器
-import { createPoolKeys, logger, NETWORK, sleep } from './helpers'; // 辅助函数和常量
-import { Mutex } from 'async-mutex'; // 互斥锁
-import BN from 'bn.js'; // 大数字库
-import { WarpTransactionExecutor } from './transactions/warp-transaction-executor'; // Warp 交易执行器
-import { JitoTransactionExecutor } from './transactions/jito-rpc-transaction-executor'; // Jito 交易执行器
-
-// 机器人配置接口
-export interface BotConfig {
-  wallet: Keypair; // 钱包密钥对
-  checkRenounced: boolean; // 检查代币是否被放弃
-  checkFreezable: boolean; // 检查代币是否可冻结
-  checkBurned: boolean; // 检查代币是否已销毁
-  minPoolSize: TokenAmount; // 最小池大小
-  maxPoolSize: TokenAmount; // 最大池大小
-  quoteToken: Token; // 报价代币
-  quoteAmount: TokenAmount; // 报价金额
-  quoteAta: PublicKey; // 报价代币的关联地址
-  oneTokenAtATime: boolean; // 是否一次处理一个代币
-  useSnipeList: boolean; // 是否使用抢购列表
-  autoSell: boolean; // 是否自动出售
-  autoBuyDelay: number; // 自动购买延迟
-  autoSellDelay: number; // 自动出售延迟
-  maxBuyRetries: number; // 最大购买重试次数
-  maxSellRetries: number; // 最大出售重试次数
-  unitLimit: number; // 计算单元限制
-  unitPrice: number; // 计算单元价格
-  takeProfit: number; // 止盈设置
-  stopLoss: number; // 止损设置
-  buySlippage: number; // 购买滑点
-  sellSlippage: number; // 出售滑点
-  priceCheckInterval: number; // 价格检查间隔
-  priceCheckDuration: number; // 价格检查持续时间
-  filterCheckInterval: number; // 过滤器检查间隔
-  filterCheckDuration: number; // 过滤器检查持续时间
-  consecutiveMatchCount: number; // 连续匹配次数
-}
-
-// 机器人类
-export class Bot {
-  private readonly poolFilters: PoolFilters; // 池过滤器
-
-  // 抢购列表缓存
-  private readonly snipeListCache?: SnipeListCache;
-
-  // 一次处理一个代币
-  private readonly mutex: Mutex; // 互斥锁
-  private sellExecutionCount = 0; // 出售执行计数
-  public readonly isWarp: boolean = false; // 是否使用Warp执行器
-  public readonly isJito: boolean = false; // 是否使用Jito执行器
-
-  constructor(
-    private readonly connection: Connection, // Solana 连接
-    private readonly marketStorage: MarketCache, // 市场缓存
-    private readonly poolStorage: PoolCache, // 池缓存
-    private readonly txExecutor: TransactionExecutor, // 交易执行器
-    readonly config: BotConfig, // 机器人配置
-  ) {
-    this.isWarp = txExecutor instanceof WarpTransactionExecutor; // 判断是否使用Warp执行器
-    this.isJito = txExecutor instanceof JitoTransactionExecutor; // 判断是否使用Jito执行器
-
-    this.mutex = new Mutex(); // 初始化互斥锁
-    this.poolFilters = new PoolFilters(connection, { // 初始化池过滤器
-      quoteToken: this.config.quoteToken,
-      minPoolSize: this.config.minPoolSize,
-      maxPoolSize: this.config.maxPoolSize,
-    });
-
-    // 如果使用抢购列表，则初始化缓存
-    if (this.config.useSnipeList) {
-      this.snipeListCache = new SnipeListCache();
-      this.snipeListCache.init();
-    }
-  }
-
-  // 验证账户是否存在
-  async validate() {
-    try {
-      await getAccount(this.connection, this.config.quoteAta, this.connection.commitment); // 获取代币账户
-    } catch (error) {
-      logger.error(
-        `${this.config.quoteToken.symbol} 代币账户在钱包中未找到: ${this.config.wallet.publicKey.toString()}`,
-      );
-      return false; // 验证失败
-    }
-
-    return true; // 验证成功
-  }
-
-  // 购买代币
-  public async buy(accountId: PublicKey, poolState: LiquidityStateV4) {
-    logger.trace({ mint: poolState.baseMint }, `正在处理新池...`);
-
-    // 如果使用抢购列表且代币不在列表中，则跳过购买
-    if (this.config.useSnipeList && !this.snipeListCache?.isInList(poolState.baseMint.toString())) {
-      logger.debug({ mint: poolState.baseMint.toString() }, `跳过购买，因为代币不在抢购列表中`);
-      return;
-    }
-
-    // 等待自动购买延迟
-    if (this.config.autoBuyDelay > 0) {
-      logger.debug({ mint: poolState.baseMint }, `等待 ${this.config.autoBuyDelay} 毫秒再进行购买`);
-      await sleep(this.config.autoBuyDelay);
-    }
-
-    // 一次处理一个代币
-    if (this.config.oneTokenAtATime) {
-      if (this.mutex.isLocked() || this.sellExecutionCount > 0) {
-        logger.debug(
-          { mint: poolState.baseMint.toString() },
-          `跳过购买，因为一次只处理一个代币且代币已在处理中`,
-        );
-        return;
-      }
-
-      await this.mutex.acquire(); // 获取锁
-    }
-
-    try {
-      const [market, mintAta] = await Promise.all([ // 并行获取市场和代币地址
-        this.marketStorage.get(poolState.marketId.toString()),
-        getAssociatedTokenAddress(poolState.baseMint, this.config.wallet.publicKey),
-      ]);
-      const poolKeys: LiquidityPoolKeysV4 = createPoolKeys(accountId, poolState, market); // 创建池密钥
-
-      // 如果不使用抢购列表，则检查过滤器匹配
-      if (!this.config.useSnipeList) {
-        const match = await this.filterMatch(poolKeys);
-
-        if (!match) {
-          logger.trace({ mint: poolKeys.baseMint.toString() }, `跳过购买，因为池不匹配过滤器`);
-          return;
-        }
-      }
-
-      // 尝试购买代币
-      for (let i = 0; i < this.config.maxBuyRetries; i++) {
-        try {
-          logger.info(
-            { mint: poolState.baseMint.toString() },
-            `发送购买交易尝试: ${i + 1}/${this.config.maxBuyRetries}`,
-          );
-          const tokenOut = new Token(TOKEN_PROGRAM_ID, poolKeys.baseMint, poolKeys.baseDecimals); // 代币输出
-          const result = await this.swap(
-            poolKeys,
-            this.config.quoteAta,
-            mintAta,
-            this.config.quoteToken,
-            tokenOut,
-            this.config.quoteAmount,
-            this.config.buySlippage,
-            this.config.wallet,
-            'buy', // 购买方向
-          );
-
-          if (result.confirmed) {
-            logger.info(
-              {
-                mint: poolState.baseMint.toString(),
-                signature: result.signature,
-                url: `https://solscan.io/tx/${result.signature}?cluster=${NETWORK}`,
-              },
-              `确认购买交易`,
-            );
-
-            break; // 成功后退出循环
-          }
-
-          logger.info(
-            {
-              mint: poolState.baseMint.toString(),
-              signature: result.signature,
-              error: result.error,
-            },
-            `确认购买交易时出错`,
-          );
-        } catch (error) {
-          logger.debug({ mint: poolState.baseMint.toString(), error }, `确认购买交易时出错`);
-        }
-      }
-    } catch (error) {
-      logger.error({ mint: poolState.baseMint.toString(), error }, `购买代币失败`);
-    } finally {
-      if (this.config.oneTokenAtATime) {
-        this.mutex.release(); // 释放锁
-      }
-    }
-  }
-
-  // 出售代币
-  public async sell(accountId: PublicKey, rawAccount: RawAccount) {
-    if (this.config.oneTokenAtATime) {
-      this.sellExecutionCount++; // 增加出售执行计数
-    }
-
-    try {
-      logger.trace({ mint: rawAccount.mint }, `正在处理新代币...`);
-
-      const poolData = await this.poolStorage.get(rawAccount.mint.toString()); // 获取池数据
-
-      // 如果未找到池数据，则无法出售
-      if (!poolData) {
-        logger.trace({ mint: rawAccount.mint.toString() }, `代币池数据未找到，无法出售`);
-        return;
-      }
-
-      const tokenIn = new Token(TOKEN_PROGRAM_ID, poolData.state.baseMint, poolData.state.baseDecimal.toNumber()); // 输入代币
-      const tokenAmountIn = new TokenAmount(tokenIn, rawAccount.amount, true); // 输入代币金额
-
-      // 如果输入代币金额为零，则无法出售
-      if (tokenAmountIn.isZero()) {
-        logger.info({ mint: rawAccount.mint.toString() }, `余额为空，无法出售`);
-        return;
-      }
-
-      // 等待自动出售延迟
-      if (this.config.autoSellDelay > 0) {
-        logger.debug({ mint: rawAccount.mint }, `等待 ${this.config.autoSellDelay} 毫秒再进行出售`);
-        await sleep(this.config.autoSellDelay);
-      }
-
-      const market = await this.marketStorage.get(poolData.state.marketId.toString()); // 获取市场数据
-      const poolKeys: LiquidityPoolKeysV4 = createPoolKeys(new PublicKey(poolData.id), poolData.state, market); // 创建池密钥
-
-      await this.priceMatch(tokenAmountIn, poolKeys); // 检查价格匹配
-
-      // 尝试出售代币
-      for (let i = 0; i < this.config.maxSellRetries; i++) {
-        try {
-          logger.info(
-            { mint: rawAccount.mint },
-            `发送出售交易尝试: ${i + 1}/${this.config.maxSellRetries}`,
-          );
-
-          const result = await this.swap(
-            poolKeys,
-            accountId,
-            this.config.quoteAta,
-            tokenIn,
-            this.config.quoteToken,
-            tokenAmountIn,
-            this.config.sellSlippage,
-            this.config.wallet,
-            'sell', // 出售方向
-          );
-
-          if (result.confirmed) {
-            logger.info(
-              {
-                dex: `https://dexscreener.com/solana/${rawAccount.mint.toString()}?maker=${this.config.wallet.publicKey}`,
-                mint: rawAccount.mint.toString(),
-                signature: result.signature,
-                url: `https://solscan.io/tx/${result.signature}?cluster=${NETWORK}`,
-              },
-              `确认出售交易`,
-            );
-            break; // 成功后退出循环
-          }
-
-          logger.info(
-            {
-              mint: rawAccount.mint.toString(),
-              signature: result.signature,
-              error: result.error,
-            },
-            `确认出售交易时出错`,
-          );
-        } catch (error) {
-          logger.debug({ mint: rawAccount.mint.toString(), error }, `确认出售交易时出错`);
-        }
-      }
-    } catch (error) {
-      logger.error({ mint: rawAccount.mint.toString(), error }, `出售代币失败`);
-    } finally {
-      if (this.config.oneTokenAtATime) {
-        this.sellExecutionCount--; // 减少出售执行计数
-      }
-    }
-  }
-
-  // 交换代币
-  private async swap(
-    poolKeys: LiquidityPoolKeysV4,
-    ataIn: PublicKey,
-    ataOut: PublicKey,
-    tokenIn: Token,
-    tokenOut: Token,
-    amountIn: TokenAmount,
-    slippage: number,
-    wallet: Keypair,
-    direction: 'buy' | 'sell', // 购买或出售方向
-  ) {
-    const slippagePercent = new Percent(slippage, 100); // 计算滑点百分比
-    const poolInfo = await Liquidity.fetchInfo({ // 获取池信息
-      connection: this.connection,
-      poolKeys,
-    });
-
-    // 计算输出金额
-    const computedAmountOut = Liquidity.computeAmountOut({
-      poolKeys,
-      poolInfo,
-      amountIn,
-      currencyOut: tokenOut,
-      slippage: slippagePercent,
-    });
-
-    const latestBlockhash = await this.connection.getLatestBlockhash(); // 获取最新区块哈希
-    const { innerTransaction } = Liquidity.makeSwapFixedInInstruction(
-      {
-        poolKeys: poolKeys,
-        userKeys: {
-          tokenAccountIn: ataIn,
-          tokenAccountOut: ataOut,
-          owner: wallet.publicKey,
-        },
-        amountIn: amountIn.raw,
-        minAmountOut: computedAmountOut.minAmountOut.raw,
-      },
-      poolKeys.version,
-    );
-
-    // 创建交易消息
-    const messageV0 = new TransactionMessage({
-      payerKey: wallet.publicKey,
-      recentBlockhash: latestBlockhash.blockhash,
-      instructions: [
-        ...(this.isWarp || this.isJito
-          ? []
-          : [
-            ComputeBudgetProgram.setComputeUnitPrice({ microLamports: this.config.unitPrice }), // 设置计算单元价格
-            ComputeBudgetProgram.setComputeUnitLimit({ units: this.config.unitLimit }), // 设置计算单元限制
-          ]),
-        ...(direction === 'buy'
-          ? [
-            createAssociatedTokenAccountIdempotentInstruction( // 创建代币账户指令
-              wallet.publicKey,
-              ataOut,
-              wallet.publicKey,
-              tokenOut.mint,
-            ),
-          ]
-          : []),
-        ...innerTransaction.instructions,
-        ...(direction === 'sell' ? [createCloseAccountInstruction(ataIn, wallet.publicKey, wallet.publicKey)] : []), // 创建关闭账户指令
-      ],
-    }).compileToV0Message(); // 编译为 V0 消息
-
-    const transaction = new VersionedTransaction(messageV0); // 创建版本化交易
-    transaction.sign([wallet, ...innerTransaction.signers]); // 签名交易
-
-    // 执行并确认交易
-    return this.txExecutor.executeAndConfirm(transaction, wallet, latestBlockhash);
-  }
-
-  // 检查过滤器匹配
-  private async filterMatch(poolKeys: LiquidityPoolKeysV4) {
-    if (this.config.filterCheckInterval === 0 || this.config.filterCheckDuration === 0) {
-      return true; // 如果检查间隔或持续时间为0，直接返回true
-    }
-
-    const timesToCheck = this.config.filterCheckDuration / this.config.filterCheckInterval; // 计算检查次数
-    let timesChecked = 0; // 记录检查次数
-    let matchCount = 0; // 记录匹配次数
-
-    do {
-      try {
-        const shouldBuy = await this.poolFilters.execute(poolKeys); // 执行过滤器
-
-        if (shouldBuy) {
-          matchCount++;
-
-          if (this.config.consecutiveMatchCount <= matchCount) {
-            logger.debug(
-              { mint: poolKeys.baseMint.toString() },
-              `过滤器匹配 ${matchCount}/${this.config.consecutiveMatchCount}`,
-            );
-            return true; // 如果匹配次数达到要求，返回true
-          }
-        } else {
-          matchCount = 0; // 如果不匹配，重置匹配次数
-        }
-
-        await sleep(this.config.filterCheckInterval); // 等待检查间隔
-      } finally {
-        timesChecked++; // 增加检查次数
-      }
-    } while (timesChecked < timesToCheck); // 继续检查直到达到最大次数
-
-    return false; // 没有匹配，返回false
-  }
-
-  // 检查价格匹配
-  private async priceMatch(amountIn: TokenAmount, poolKeys: LiquidityPoolKeysV4) {
-    if (this.config.priceCheckDuration === 0 || this.config.priceCheckInterval === 0) {
-      return; // 如果检查持续时间或间隔为0，直接返回
-    }
-
-    const timesToCheck = this.config.priceCheckDuration / this.config.priceCheckInterval; // 计算检查次数
-    const profitFraction = this.config.quoteAmount.mul(this.config.takeProfit).numerator.div(new BN(100)); // 计算止盈金额
-    const profitAmount = new TokenAmount(this.config.quoteToken, profitFraction, true); // 止盈金额
-    const takeProfit = this.config.quoteAmount.add(profitAmount); // 计算止盈点
-
-    const lossFraction = this.config.quoteAmount.mul(this.config.stopLoss).numerator.div(new BN(100)); // 计算止损金额
-    const lossAmount = new TokenAmount(this.config.quoteToken, lossFraction, true); // 止损金额
-    const stopLoss = this.config.quoteAmount.subtract(lossAmount); // 计算止损点
-    const slippage = new Percent(this.config.sellSlippage, 100); // 计算出售滑点
-    let timesChecked = 0; // 记录检查次数
-
-    do {
-      try {
-        const poolInfo = await Liquidity.fetchInfo({ // 获取池信息
-          connection: this.connection,
-          poolKeys,
-        });
-
-        const amountOut = Liquidity.computeAmountOut({ // 计算输出金额
-          poolKeys,
-          poolInfo,
-          amountIn: amountIn,
-          currencyOut: this.config.quoteToken,
-          slippage,
-        }).amountOut;
-
-        logger.debug(
-          { mint: poolKeys.baseMint.toString() },
-          `止盈: ${takeProfit.toFixed()} | 止损: ${stopLoss.toFixed()} | 当前: ${amountOut.toFixed()}`,
-        );
-
-        // 如果当前输出金额小于止损点，则退出
-        if (amountOut.lt(stopLoss)) {
-          break;
-        }
-
-        // 如果当前输出金额大于止盈点，则退出
-        if (amountOut.gt(takeProfit)) {
-          break;
-        }
-
-        await sleep(this.config.priceCheckInterval); // 等待价格检查间隔
-      } catch (e) {
-        logger.trace({ mint: poolKeys.baseMint.toString(), e }, `检查代币价格时失败`);
-      } finally {
-        timesChecked++; // 增加检查次数
-      }
-    } while (timesChecked < timesToCheck); // 继续检查直到达到最大次数
-  }
-}
Index: 1 AxisBot Solana Sniper Main/.env.copy
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/.env.copy b/1 AxisBot Solana Sniper Main/.env.copy
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/.env.copy	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,50 +0,0 @@
-# Wallet
-PRIVATE_KEY=
-
-# Connection
-RPC_ENDPOINT=https://solana-mainnet.rpc.extrnode.com/5b667693-6518-4921-8ea1-4f65ff09c463
-RPC_WEBSOCKET_ENDPOINT=wss://solana-mainnet.rpc.extrnode.com/5b667693-6518-4921-8ea1-4f65ff09c463
-COMMITMENT_LEVEL=confirmed
-
-# Bot
-LOG_LEVEL=trace
-ONE_TOKEN_AT_A_TIME=true
-PRE_LOAD_EXISTING_MARKETS=false
-CACHE_NEW_MARKETS=false
-# default or warp or jito
-TRANSACTION_EXECUTOR=jito
-# if using default executor, fee below will be applied
-COMPUTE_UNIT_LIMIT=101337
-COMPUTE_UNIT_PRICE=421197
-# if using warp or jito executor, fee below will be applied
-CUSTOM_FEE=0.01
-
-# Buy
-QUOTE_MINT=WSOL
-QUOTE_AMOUNT=0.001
-AUTO_BUY_DELAY=0
-MAX_BUY_RETRIES=10
-BUY_SLIPPAGE=100
-
-# Sell
-AUTO_SELL=true
-MAX_SELL_RETRIES=10
-AUTO_SELL_DELAY=0
-PRICE_CHECK_INTERVAL=2000
-PRICE_CHECK_DURATION=600000
-TAKE_PROFIT=100
-STOP_LOSS=20
-SELL_SLIPPAGE=100
-
-# Filters
-USE_SNIPE_LIST=false
-SNIPE_LIST_REFRESH_INTERVAL=30000
-FILTER_CHECK_DURATION=60000
-FILTER_CHECK_INTERVAL=2000
-CONSECUTIVE_FILTER_MATCHES=3
-CHECK_IF_MUTABLE=false
-CHECK_IF_MINT_IS_RENOUNCED=true
-CHECK_IF_FREEZABLE=false
-CHECK_IF_BURNED=true
-MIN_POOL_SIZE=3
-MAX_POOL_SIZE=20
Index: 1 AxisBot Solana Sniper Main/transactions/transaction-executor.interface.ts
===================================================================
diff --git a/1 AxisBot Solana Sniper Main/transactions/transaction-executor.interface.ts b/1 AxisBot Solana Sniper Main/transactions/transaction-executor.interface.ts
deleted file mode 100644
--- a/1 AxisBot Solana Sniper Main/transactions/transaction-executor.interface.ts	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
+++ /dev/null	(revision 1ba4effa333a11fd8b4f7721611d24b4f59b10e7)
@@ -1,12 +0,0 @@
-// 导入所需的模块和库
-import { BlockhashWithExpiryBlockHeight, Keypair, VersionedTransaction } from '@solana/web3.js'; // Solana 相关库
-
-// 交易执行器接口
-export interface TransactionExecutor {
-  // 执行并确认交易的方法
-  executeAndConfirm(
-    transaction: VersionedTransaction, // 版本化交易
-    payer: Keypair, // 付款方的密钥对
-    latestBlockHash: BlockhashWithExpiryBlockHeight, // 最新区块哈希和过期区块高度
-  ): Promise<{ confirmed: boolean; signature?: string; error?: string }>; // 返回确认结果、交易签名和可能的错误信息
-}
Index: Bot原版/Bot Spam Sniper/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Spam Sniper/package.json b/Bot原版/Bot Spam Sniper/package.json
new file mode 100644
--- /dev/null	(date 1732301213901)
+++ b/Bot原版/Bot Spam Sniper/package.json	(date 1732301213901)
@@ -0,0 +1,20 @@
+{
+  "dependencies": {
+    "@openbook-dex/openbook": "^0.0.9",
+    "@raydium-io/raydium-sdk": "^1.3.1-beta.46",
+    "@solana/spl-token": "^0.3.11",
+    "@solana/web3.js": "^1.87.6",
+    "borsh": "^2.0.0",
+    "bs64": "^0.1.0",
+    "node": "^21.2.0"
+  },
+  "name": "solana",
+  "version": "1.0.0",
+  "main": "tx.js",
+  "scripts": {
+    "test": "echo \"Error: no test specified\" && exit 1"
+  },
+  "author": "",
+  "license": "ISC",
+  "description": ""
+}
Index: Bot原版/Bot Spam Sniper/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Spam Sniper/README.md b/Bot原版/Bot Spam Sniper/README.md
new file mode 100644
--- /dev/null	(date 1732301213950)
+++ b/Bot原版/Bot Spam Sniper/README.md	(date 1732301213950)
@@ -0,0 +1,25 @@
+# AxisBot Solana Spam Sniper
+## Overview
+This project is Solana SPL-Token sniper which aims to swap (purchase) new Raydium liquidity pairs within the first price candle by scanning Solana blockchain transactions.
+## How the program works
+* Scans the Solana blockchain for an "initialize market" transaction which is decoded for all necessary liquidity pool keys and related information.
+* Begins sending/retrying the "swap" transaction until the liquidity pool is live, minimizing the time between the transaction and the creation of the LP.
+* Upon sending a valid transaction, begins to track the users position with current price/percent gain by scanning and decoding on-chain liquidity pool information in order to get the most accurate data.
+npm 18.17.0 or lower
+## Setup
+Use the following instructions to install and run the program (assume node is installed):
+1. Create a Solana wallet and obtain public and private keys (Phantom wallet recommended).
+2. Obtain a Solana RPC/websocket connection, `https://solana-mainnet.rpc.extrnode.com/5b667693-6518-4921-8ea1-4f65ff09c463` and `wss://solana-mainnet.rpc.extrnode.com/5b667693-6518-4921-8ea1-4f65ff09c463` for testing purposes.
+3. Run `npm install`.
+4. Inside the `utils/config.js` file, enter public key, private key, and both RPC connections. Also include amount of SOL to use per swap.
+## Running the scripts
+This project contains two different strategies for sniping new liquidity pairs:\
+### **Strategy #1:**
+* The first strategy obtains necessary liquidity pool keys from the transaction which creates the LP. To run this script with `node strategy1/start1.js`. The transaction may fail multiple times before succeeding as Solana transactions can be dropped with certain RPC nodes.
+* **NOTE:** this script is slower as it must wait for the "add liquidity" transaction to reach "confirmed" status before obtaining pool data. This results in ~30 seconds between the pool creation and swap transaction.
+### **Strategy #2:**
+* The second strategy obtains necessary liquidity pool keys from the "initialize market" transaction which typically occurs ~2 minutes before the LP is live on Raydium. This allows for all pool keys to be precomputed. This script also retries the swap transaction multiple times per second which allows for the swap to be sent during the "processed" state of the "add liquidity" transaction instead of "confirmed", greatly reducing the time between the creation of the LP and the swap transaction. This script can be run with `node strategy2/start2.js`.
+*Both scripts utilize the same swapping/position management system found in `./swap/swap1.js` and `/swap/swap2.js`.*
+### **Additional Notes:**
+* Once the program is started, an output will only be displayed once a new market id/pool is found.
+* "the amm account owner is not match with this program + error 0x1b": This error occurs when the program sends a swap tx to a pool that doesn't have liquidity yet. The tx spam is part of the sniping strategy and the error will occur until the swap to the pool goes through (moment liquidity is added).
\ No newline at end of file
Index: Bot原版/Bot Spam Sniper/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Spam Sniper/.gitignore b/Bot原版/Bot Spam Sniper/.gitignore
new file mode 100644
--- /dev/null	(date 1732301213871)
+++ b/Bot原版/Bot Spam Sniper/.gitignore	(date 1732301213871)
@@ -0,0 +1,2 @@
+**/node_modules
+.DS_Store
\ No newline at end of file
Index: Bot汉化/bot Spam Sniper/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Spam Sniper/package.json b/Bot汉化/bot Spam Sniper/package.json
new file mode 100644
--- /dev/null	(date 1727201869675)
+++ b/Bot汉化/bot Spam Sniper/package.json	(date 1727201869675)
@@ -0,0 +1,20 @@
+{
+  "dependencies": {
+    "@openbook-dex/openbook": "^0.0.9",
+    "@raydium-io/raydium-sdk": "^1.3.1-beta.46",
+    "@solana/spl-token": "^0.3.11",
+    "@solana/web3.js": "^1.87.6",
+    "borsh": "^2.0.0",
+    "bs64": "^0.1.0",
+    "node": "^21.2.0"
+  },
+  "name": "solana",
+  "version": "1.0.0",
+  "main": "tx.js",
+  "scripts": {
+    "test": "echo \"Error: no test specified\" && exit 1"
+  },
+  "author": "",
+  "license": "ISC",
+  "description": ""
+}
Index: Bot汉化/bot Spam Sniper/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Spam Sniper/README.md b/Bot汉化/bot Spam Sniper/README.md
new file mode 100644
--- /dev/null	(date 1727336926405)
+++ b/Bot汉化/bot Spam Sniper/README.md	(date 1727336926405)
@@ -0,0 +1,34 @@
+# AxisBot Solana Spam Sniper
+
+## 概述：
+此项目是一个 Solana SPL 代币的狙击程序，旨在通过扫描 Solana 区块链上的交易，尽早在 Raydium 新流动性对的第一根价格蜡烛内完成代币交换（购买）。
+
+## 程序工作原理：
+- 扫描 Solana 区块链，寻找“初始化市场”交易，并解码以获取所有必要的流动性池密钥和相关信息。
+- 在流动性池上线之前，不断发送和重试“交换”交易，最小化交易与流动性池创建之间的时间差。
+- 当发送有效交易后，开始跟踪用户的位置，扫描并解码链上流动性池信息以获取当前最准确的价格/百分比增益。
+
+## 环境要求：
+需要 npm 版本 18.17.0 或更低。
+
+## 设置步骤：
+按以下说明安装并运行程序（假设已安装 Node.js）：
+1. 创建一个 Solana 钱包，并获取公钥和私钥（推荐使用 Phantom 钱包）。
+2. 获取 Solana RPC/WebSocket 连接，例如 `https://solana-mainnet.rpc.extrnode.com/5b667693-6518-4921-8ea1-4f65ff09c463` 和 `wss://solana-mainnet.rpc.extrnode.com/5b667693-6518-4921-8ea1-4f65ff09c463` 以进行测试。
+3. 运行 `npm install` 来安装依赖项。
+4. 在 `utils/config.js` 文件中，输入公钥、私钥及上述两个 RPC 连接。同时，设置每次交换使用的 SOL 数量。
+
+## 运行脚本：
+该项目包含两种不同的策略用于狙击新流动性对：
+
+### **策略 #1：**
+- 第一种策略从创建流动性池的交易中获取所需的流动性池密钥。运行脚本使用 `node strategy1/start1.js`。由于 Solana 的某些 RPC 节点可能会丢弃交易，因此交易可能会失败多次后才成功。
+- **注意：** 此脚本较慢，必须等待“添加流动性”交易达到“已确认”状态才能获取池数据，这导致从池创建到交换交易之间约有 30 秒的延迟。
+
+### **策略 #2：**
+- 第二种策略从“初始化市场”交易中获取流动性池密钥，该交易通常发生在流动性池上线前大约 2 分钟。这使得所有池密钥可以提前计算。该脚本每秒多次重试交换交易，允许在“添加流动性”交易的“处理中”状态发送交换交易，而非等待“已确认”，大大减少了流动性池创建与交换交易之间的时间差。运行此脚本使用 `node strategy2/start2.js`。
+- **注意：** 两个脚本都使用相同的交换/仓位管理系统，存放于 `./swap/swap1.js` 和 `/swap/swap2.js` 中。
+
+### **附加说明：**
+- 程序启动后，只有在找到新的市场 ID/池时才会显示输出。
+- 关于“amm 账户所有者不匹配该程序 + 错误 0x1b”：此错误发生在程序向尚未有流动性的池发送交换交易时。交易的频繁发送是狙击策略的一部分，直到池子有流动性并成功进行交换，错误会持续出现。
\ No newline at end of file
Index: Bot原版/Bot Spam Sniper/package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Spam Sniper/package-lock.json b/Bot原版/Bot Spam Sniper/package-lock.json
new file mode 100644
--- /dev/null	(date 1732301213921)
+++ b/Bot原版/Bot Spam Sniper/package-lock.json	(date 1732301213921)
@@ -0,0 +1,1751 @@
+{
+  "name": "solana",
+  "version": "1.0.0",
+  "lockfileVersion": 2,
+  "requires": true,
+  "packages": {
+    "": {
+      "name": "solana",
+      "version": "1.0.0",
+      "license": "ISC",
+      "dependencies": {
+        "@openbook-dex/openbook": "^0.0.9",
+        "@raydium-io/raydium-sdk": "^1.3.1-beta.46",
+        "@solana/spl-token": "^0.3.11",
+        "@solana/web3.js": "^1.87.6",
+        "borsh": "^2.0.0",
+        "bs64": "^0.1.0",
+        "node": "^21.2.0"
+      }
+    },
+    "node_modules/@babel/runtime": {
+      "version": "7.23.7",
+      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.23.7.tgz",
+      "integrity": "sha512-w06OXVOFso7LcbzMiDGt+3X7Rh7Ho8MmgPoWU3rarH+8upf+wSU/grlGbWzQyr3DkdN6ZeuMFjpdwW0Q+HxobA==",
+      "dependencies": {
+        "regenerator-runtime": "^0.14.0"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@noble/curves": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/@noble/curves/-/curves-1.3.0.tgz",
+      "integrity": "sha512-t01iSXPuN+Eqzb4eBX0S5oubSqXbK/xXa1Ne18Hj8f9pStxztHCE2gfboSp/dZRLSqfuLpRK2nDXDK+W9puocA==",
+      "dependencies": {
+        "@noble/hashes": "1.3.3"
+      },
+      "funding": {
+        "url": "https://paulmillr.com/funding/"
+      }
+    },
+    "node_modules/@noble/hashes": {
+      "version": "1.3.3",
+      "resolved": "https://registry.npmjs.org/@noble/hashes/-/hashes-1.3.3.tgz",
+      "integrity": "sha512-V7/fPHgl+jsVPXqqeOzT8egNj2iBIVt+ECeMMG8TdcnTikP3oaBtUVqpT/gYCR68aEBJSF+XbYUxStjbFMqIIA==",
+      "engines": {
+        "node": ">= 16"
+      },
+      "funding": {
+        "url": "https://paulmillr.com/funding/"
+      }
+    },
+    "node_modules/@openbook-dex/openbook": {
+      "version": "0.0.9",
+      "resolved": "https://registry.npmjs.org/@openbook-dex/openbook/-/openbook-0.0.9.tgz",
+      "integrity": "sha512-tJPqHS7Tp/Gu3MC/MAZQBUm62WhdBPLzCcId3p62eHV6cRwNqflr0j+eKDh0Lfd5CAnkB1a9wZoVte074+zB5A==",
+      "dependencies": {
+        "@project-serum/anchor": "^0.11.1",
+        "@solana/spl-token": "^0.1.6",
+        "@solana/web3.js": "^1.70.0",
+        "bn.js": "^5.2.1",
+        "buffer-layout": "^1.2.0"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/@openbook-dex/openbook/node_modules/@solana/spl-token": {
+      "version": "0.1.8",
+      "resolved": "https://registry.npmjs.org/@solana/spl-token/-/spl-token-0.1.8.tgz",
+      "integrity": "sha512-LZmYCKcPQDtJgecvWOgT/cnoIQPWjdH+QVyzPcFvyDUiT0DiRjZaam4aqNUyvchLFhzgunv3d9xOoyE34ofdoQ==",
+      "dependencies": {
+        "@babel/runtime": "^7.10.5",
+        "@solana/web3.js": "^1.21.0",
+        "bn.js": "^5.1.0",
+        "buffer": "6.0.3",
+        "buffer-layout": "^1.2.0",
+        "dotenv": "10.0.0"
+      },
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@project-serum/anchor": {
+      "version": "0.11.1",
+      "resolved": "https://registry.npmjs.org/@project-serum/anchor/-/anchor-0.11.1.tgz",
+      "integrity": "sha512-oIdm4vTJkUy6GmE6JgqDAuQPKI7XM4TPJkjtoIzp69RZe0iAD9JP2XHx7lV1jLdYXeYHqDXfBt3zcq7W91K6PA==",
+      "dependencies": {
+        "@project-serum/borsh": "^0.2.2",
+        "@solana/web3.js": "^1.17.0",
+        "base64-js": "^1.5.1",
+        "bn.js": "^5.1.2",
+        "bs58": "^4.0.1",
+        "buffer-layout": "^1.2.0",
+        "camelcase": "^5.3.1",
+        "crypto-hash": "^1.3.0",
+        "eventemitter3": "^4.0.7",
+        "find": "^0.3.0",
+        "js-sha256": "^0.9.0",
+        "pako": "^2.0.3",
+        "snake-case": "^3.0.4",
+        "toml": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=11"
+      }
+    },
+    "node_modules/@project-serum/borsh": {
+      "version": "0.2.5",
+      "resolved": "https://registry.npmjs.org/@project-serum/borsh/-/borsh-0.2.5.tgz",
+      "integrity": "sha512-UmeUkUoKdQ7rhx6Leve1SssMR/Ghv8qrEiyywyxSWg7ooV7StdpPBhciiy5eB3T0qU1BXvdRNC8TdrkxK7WC5Q==",
+      "dependencies": {
+        "bn.js": "^5.1.2",
+        "buffer-layout": "^1.2.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "peerDependencies": {
+        "@solana/web3.js": "^1.2.0"
+      }
+    },
+    "node_modules/@raydium-io/raydium-sdk": {
+      "version": "1.3.1-beta.46",
+      "resolved": "https://registry.npmjs.org/@raydium-io/raydium-sdk/-/raydium-sdk-1.3.1-beta.46.tgz",
+      "integrity": "sha512-hGieqaCeqszEJGRBbNNveXlZk8EIsjV9PTwodx8SWABu1ZZODE8SGRe5Vuq9Jtv1LZzL7jY3+P5UnQxrdQLQUA==",
+      "dependencies": {
+        "@solana/buffer-layout": "^4.0.1",
+        "@solana/spl-token": "^0.3.9",
+        "axios": "^1.6.2",
+        "big.js": "^6.2.1",
+        "bn.js": "^5.2.1",
+        "decimal.js": "^10.4.3",
+        "decimal.js-light": "^2.5.1",
+        "fecha": "^4.2.3",
+        "lodash": "^4.17.21",
+        "toformat": "^2.0.0"
+      },
+      "peerDependencies": {
+        "@solana/web3.js": "^1.73.0"
+      }
+    },
+    "node_modules/@solana/buffer-layout": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/@solana/buffer-layout/-/buffer-layout-4.0.1.tgz",
+      "integrity": "sha512-E1ImOIAD1tBZFRdjeM4/pzTiTApC0AOBGwyAMS4fwIodCWArzJ3DWdoh8cKxeFM2fElkxBh2Aqts1BPC373rHA==",
+      "dependencies": {
+        "buffer": "~6.0.3"
+      },
+      "engines": {
+        "node": ">=5.10"
+      }
+    },
+    "node_modules/@solana/buffer-layout-utils": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/@solana/buffer-layout-utils/-/buffer-layout-utils-0.2.0.tgz",
+      "integrity": "sha512-szG4sxgJGktbuZYDg2FfNmkMi0DYQoVjN2h7ta1W1hPrwzarcFLBq9UpX1UjNXsNpT9dn+chgprtWGioUAr4/g==",
+      "dependencies": {
+        "@solana/buffer-layout": "^4.0.0",
+        "@solana/web3.js": "^1.32.0",
+        "bigint-buffer": "^1.1.5",
+        "bignumber.js": "^9.0.1"
+      },
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@solana/codecs-core": {
+      "version": "2.0.0-experimental.8618508",
+      "resolved": "https://registry.npmjs.org/@solana/codecs-core/-/codecs-core-2.0.0-experimental.8618508.tgz",
+      "integrity": "sha512-JCz7mKjVKtfZxkuDtwMAUgA7YvJcA2BwpZaA1NOLcted4OMC4Prwa3DUe3f3181ixPYaRyptbF0Ikq2MbDkYEA=="
+    },
+    "node_modules/@solana/codecs-data-structures": {
+      "version": "2.0.0-experimental.8618508",
+      "resolved": "https://registry.npmjs.org/@solana/codecs-data-structures/-/codecs-data-structures-2.0.0-experimental.8618508.tgz",
+      "integrity": "sha512-sLpjL9sqzaDdkloBPV61Rht1tgaKq98BCtIKRuyscIrmVPu3wu0Bavk2n/QekmUzaTsj7K1pVSniM0YqCdnEBw==",
+      "dependencies": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
+      }
+    },
+    "node_modules/@solana/codecs-numbers": {
+      "version": "2.0.0-experimental.8618508",
+      "resolved": "https://registry.npmjs.org/@solana/codecs-numbers/-/codecs-numbers-2.0.0-experimental.8618508.tgz",
+      "integrity": "sha512-EXQKfzFr3CkKKNzKSZPOOOzchXsFe90TVONWsSnVkonO9z+nGKALE0/L9uBmIFGgdzhhU9QQVFvxBMclIDJo2Q==",
+      "dependencies": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508"
+      }
+    },
+    "node_modules/@solana/codecs-strings": {
+      "version": "2.0.0-experimental.8618508",
+      "resolved": "https://registry.npmjs.org/@solana/codecs-strings/-/codecs-strings-2.0.0-experimental.8618508.tgz",
+      "integrity": "sha512-b2yhinr1+oe+JDmnnsV0641KQqqDG8AQ16Z/x7GVWO+AWHMpRlHWVXOq8U1yhPMA4VXxl7i+D+C6ql0VGFp0GA==",
+      "dependencies": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
+      },
+      "peerDependencies": {
+        "fastestsmallesttextencoderdecoder": "^1.0.22"
+      }
+    },
+    "node_modules/@solana/options": {
+      "version": "2.0.0-experimental.8618508",
+      "resolved": "https://registry.npmjs.org/@solana/options/-/options-2.0.0-experimental.8618508.tgz",
+      "integrity": "sha512-fy/nIRAMC3QHvnKi63KEd86Xr/zFBVxNW4nEpVEU2OT0gCEKwHY4Z55YHf7XujhyuM3PNpiBKg/YYw5QlRU4vg==",
+      "dependencies": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
+      }
+    },
+    "node_modules/@solana/spl-token": {
+      "version": "0.3.11",
+      "resolved": "https://registry.npmjs.org/@solana/spl-token/-/spl-token-0.3.11.tgz",
+      "integrity": "sha512-bvohO3rIMSVL24Pb+I4EYTJ6cL82eFpInEXD/I8K8upOGjpqHsKUoAempR/RnUlI1qSFNyFlWJfu6MNUgfbCQQ==",
+      "dependencies": {
+        "@solana/buffer-layout": "^4.0.0",
+        "@solana/buffer-layout-utils": "^0.2.0",
+        "@solana/spl-token-metadata": "^0.1.2",
+        "buffer": "^6.0.3"
+      },
+      "engines": {
+        "node": ">=16"
+      },
+      "peerDependencies": {
+        "@solana/web3.js": "^1.88.0"
+      }
+    },
+    "node_modules/@solana/spl-token-metadata": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/@solana/spl-token-metadata/-/spl-token-metadata-0.1.2.tgz",
+      "integrity": "sha512-hJYnAJNkDrtkE2Q41YZhCpeOGU/0JgRFXbtrtOuGGeKc3pkEUHB9DDoxZAxx+XRno13GozUleyBi0qypz4c3bw==",
+      "dependencies": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-data-structures": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508",
+        "@solana/codecs-strings": "2.0.0-experimental.8618508",
+        "@solana/options": "2.0.0-experimental.8618508",
+        "@solana/spl-type-length-value": "0.1.0"
+      },
+      "engines": {
+        "node": ">=16"
+      },
+      "peerDependencies": {
+        "@solana/web3.js": "^1.87.6"
+      }
+    },
+    "node_modules/@solana/spl-type-length-value": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/@solana/spl-type-length-value/-/spl-type-length-value-0.1.0.tgz",
+      "integrity": "sha512-JBMGB0oR4lPttOZ5XiUGyvylwLQjt1CPJa6qQ5oM+MBCndfjz2TKKkw0eATlLLcYmq1jBVsNlJ2cD6ns2GR7lA==",
+      "dependencies": {
+        "buffer": "^6.0.3"
+      },
+      "engines": {
+        "node": ">=16"
+      }
+    },
+    "node_modules/@solana/web3.js": {
+      "version": "1.89.1",
+      "resolved": "https://registry.npmjs.org/@solana/web3.js/-/web3.js-1.89.1.tgz",
+      "integrity": "sha512-t9TTLtPQxtQB3SAf/5E8xPXfVDsC6WGOsgKY02l2cbe0HLymT7ynE8Hu48Lk5qynHCquj6nhISfEHcjMkYpu/A==",
+      "dependencies": {
+        "@babel/runtime": "^7.23.4",
+        "@noble/curves": "^1.2.0",
+        "@noble/hashes": "^1.3.2",
+        "@solana/buffer-layout": "^4.0.1",
+        "agentkeepalive": "^4.5.0",
+        "bigint-buffer": "^1.1.5",
+        "bn.js": "^5.2.1",
+        "borsh": "^0.7.0",
+        "bs58": "^4.0.1",
+        "buffer": "6.0.3",
+        "fast-stable-stringify": "^1.0.0",
+        "jayson": "^4.1.0",
+        "node-fetch": "^2.7.0",
+        "rpc-websockets": "^7.5.1",
+        "superstruct": "^0.14.2"
+      }
+    },
+    "node_modules/@solana/web3.js/node_modules/borsh": {
+      "version": "0.7.0",
+      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.7.0.tgz",
+      "integrity": "sha512-CLCsZGIBCFnPtkNnieW/a8wmreDmfUtjU2m9yHrzPXIlNbqVs0AQrSatSG6vdNYUqdc83tkQi2eHfF98ubzQLA==",
+      "dependencies": {
+        "bn.js": "^5.2.0",
+        "bs58": "^4.0.0",
+        "text-encoding-utf-8": "^1.0.2"
+      }
+    },
+    "node_modules/@types/connect": {
+      "version": "3.4.38",
+      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
+      "integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
+      "dependencies": {
+        "@types/node": "*"
+      }
+    },
+    "node_modules/@types/node": {
+      "version": "12.20.55",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-12.20.55.tgz",
+      "integrity": "sha512-J8xLz7q2OFulZ2cyGTLE1TbbZcjpno7FaN6zdJNrgAdrJ+DZzh/uFR6YrTb4C+nXakvud8Q4+rbhoIWlYQbUFQ=="
+    },
+    "node_modules/@types/ws": {
+      "version": "7.4.7",
+      "resolved": "https://registry.npmjs.org/@types/ws/-/ws-7.4.7.tgz",
+      "integrity": "sha512-JQbbmxZTZehdc2iszGKs5oC3NFnjeay7mtAWrdt7qNtAVK0g19muApzAy4bm9byz79xa2ZnO/BOBC2R8RC5Lww==",
+      "dependencies": {
+        "@types/node": "*"
+      }
+    },
+    "node_modules/agentkeepalive": {
+      "version": "4.5.0",
+      "resolved": "https://registry.npmjs.org/agentkeepalive/-/agentkeepalive-4.5.0.tgz",
+      "integrity": "sha512-5GG/5IbQQpC9FpkRGsSvZI5QYeSCzlJHdpBQntCsuTOxhKD8lqKhrleg2Yi7yvMIf82Ycmmqln9U8V9qwEiJew==",
+      "dependencies": {
+        "humanize-ms": "^1.2.1"
+      },
+      "engines": {
+        "node": ">= 8.0.0"
+      }
+    },
+    "node_modules/asynckit": {
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
+      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="
+    },
+    "node_modules/axios": {
+      "version": "1.6.4",
+      "resolved": "https://registry.npmjs.org/axios/-/axios-1.6.4.tgz",
+      "integrity": "sha512-heJnIs6N4aa1eSthhN9M5ioILu8Wi8vmQW9iHQ9NUvfkJb0lEEDUiIdQNAuBtfUt3FxReaKdpQA5DbmMOqzF/A==",
+      "dependencies": {
+        "follow-redirects": "^1.15.4",
+        "form-data": "^4.0.0",
+        "proxy-from-env": "^1.1.0"
+      }
+    },
+    "node_modules/base-x": {
+      "version": "3.0.9",
+      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
+      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
+      "dependencies": {
+        "safe-buffer": "^5.0.1"
+      }
+    },
+    "node_modules/base64-js": {
+      "version": "1.5.1",
+      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
+      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ]
+    },
+    "node_modules/big.js": {
+      "version": "6.2.1",
+      "resolved": "https://registry.npmjs.org/big.js/-/big.js-6.2.1.tgz",
+      "integrity": "sha512-bCtHMwL9LeDIozFn+oNhhFoq+yQ3BNdnsLSASUxLciOb1vgvpHsIO1dsENiGMgbb4SkP5TrzWzRiLddn8ahVOQ==",
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/bigjs"
+      }
+    },
+    "node_modules/bigint-buffer": {
+      "version": "1.1.5",
+      "resolved": "https://registry.npmjs.org/bigint-buffer/-/bigint-buffer-1.1.5.tgz",
+      "integrity": "sha512-trfYco6AoZ+rKhKnxA0hgX0HAbVP/s808/EuDSe2JDzUnCp/xAsli35Orvk67UrTEcwuxZqYZDmfA2RXJgxVvA==",
+      "hasInstallScript": true,
+      "dependencies": {
+        "bindings": "^1.3.0"
+      },
+      "engines": {
+        "node": ">= 10.0.0"
+      }
+    },
+    "node_modules/bignumber.js": {
+      "version": "9.1.2",
+      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.1.2.tgz",
+      "integrity": "sha512-2/mKyZH9K85bzOEfhXDBFZTGd1CTs+5IHpeFQo9luiBG7hghdC851Pj2WAhb6E3R6b9tZj/XKhbg4fum+Kepug==",
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/bindings": {
+      "version": "1.5.0",
+      "resolved": "https://registry.npmjs.org/bindings/-/bindings-1.5.0.tgz",
+      "integrity": "sha512-p2q/t/mhvuOj/UeLlV6566GD/guowlr0hHxClI0W9m7MWYkL1F0hLo+0Aexs9HSPCtR1SXQ0TD3MMKrXZajbiQ==",
+      "dependencies": {
+        "file-uri-to-path": "1.0.0"
+      }
+    },
+    "node_modules/bn.js": {
+      "version": "5.2.1",
+      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.1.tgz",
+      "integrity": "sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ=="
+    },
+    "node_modules/borsh": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/borsh/-/borsh-2.0.0.tgz",
+      "integrity": "sha512-kc9+BgR3zz9+cjbwM8ODoUB4fs3X3I5A/HtX7LZKxCLaMrEeDFoBpnhZY//DTS1VZBSs6S5v46RZRbZjRFspEg=="
+    },
+    "node_modules/bs58": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
+      "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
+      "dependencies": {
+        "base-x": "^3.0.2"
+      }
+    },
+    "node_modules/bs64": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/bs64/-/bs64-0.1.0.tgz",
+      "integrity": "sha512-0rK20fzECR6FFR2VRhvDOUTlPmWFS8PddRtk9KNqsfj9S8++WHSDKzf0f9S/89sthwBg+bEgFitRLEC6COTi8Q==",
+      "dependencies": {
+        "convert-string": "~0.1.0"
+      }
+    },
+    "node_modules/buffer": {
+      "version": "6.0.3",
+      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
+      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "dependencies": {
+        "base64-js": "^1.3.1",
+        "ieee754": "^1.2.1"
+      }
+    },
+    "node_modules/buffer-layout": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/buffer-layout/-/buffer-layout-1.2.2.tgz",
+      "integrity": "sha512-kWSuLN694+KTk8SrYvCqwP2WcgQjoRCiF5b4QDvkkz8EmgD+aWAIceGFKMIAdmF/pH+vpgNV3d3kAKorcdAmWA==",
+      "engines": {
+        "node": ">=4.5"
+      }
+    },
+    "node_modules/bufferutil": {
+      "version": "4.0.8",
+      "resolved": "https://registry.npmjs.org/bufferutil/-/bufferutil-4.0.8.tgz",
+      "integrity": "sha512-4T53u4PdgsXqKaIctwF8ifXlRTTmEPJ8iEPWFdGZvcf7sbwYo6FKFEX9eNNAnzFZ7EzJAQ3CJeOtCRA4rDp7Pw==",
+      "hasInstallScript": true,
+      "optional": true,
+      "dependencies": {
+        "node-gyp-build": "^4.3.0"
+      },
+      "engines": {
+        "node": ">=6.14.2"
+      }
+    },
+    "node_modules/camelcase": {
+      "version": "5.3.1",
+      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
+      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/combined-stream": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
+      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
+      "dependencies": {
+        "delayed-stream": "~1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/commander": {
+      "version": "2.20.3",
+      "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
+      "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ=="
+    },
+    "node_modules/convert-string": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/convert-string/-/convert-string-0.1.0.tgz",
+      "integrity": "sha512-1KX9ESmtl8xpT2LN2tFnKSbV4NiarbVi8DVb39ZriijvtTklyrT+4dT1wsGMHKD3CJUjXgvJzstm9qL9ICojGA=="
+    },
+    "node_modules/crypto-hash": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/crypto-hash/-/crypto-hash-1.3.0.tgz",
+      "integrity": "sha512-lyAZ0EMyjDkVvz8WOeVnuCPvKVBXcMv1l5SVqO1yC7PzTwrD/pPje/BIRbWhMoPe436U+Y2nD7f5bFx0kt+Sbg==",
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/decimal.js": {
+      "version": "10.4.3",
+      "resolved": "https://registry.npmjs.org/decimal.js/-/decimal.js-10.4.3.tgz",
+      "integrity": "sha512-VBBaLc1MgL5XpzgIP7ny5Z6Nx3UrRkIViUkPUdtl9aya5amy3De1gsUUSB1g3+3sExYNjCAsAznmukyxCb1GRA=="
+    },
+    "node_modules/decimal.js-light": {
+      "version": "2.5.1",
+      "resolved": "https://registry.npmjs.org/decimal.js-light/-/decimal.js-light-2.5.1.tgz",
+      "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg=="
+    },
+    "node_modules/delay": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/delay/-/delay-5.0.0.tgz",
+      "integrity": "sha512-ReEBKkIfe4ya47wlPYf/gu5ib6yUG0/Aez0JQZQz94kiWtRQvZIQbTiehsnwHvLSWJnQdhVeqYue7Id1dKr0qw==",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/delayed-stream": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
+      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
+    "node_modules/dot-case": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/dot-case/-/dot-case-3.0.4.tgz",
+      "integrity": "sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w==",
+      "dependencies": {
+        "no-case": "^3.0.4",
+        "tslib": "^2.0.3"
+      }
+    },
+    "node_modules/dotenv": {
+      "version": "10.0.0",
+      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-10.0.0.tgz",
+      "integrity": "sha512-rlBi9d8jpv9Sf1klPjNfFAuWDjKLwTIJJ/VxtoTwIR6hnZxcEOQCZg2oIL3MWBYw5GpUDKOEnND7LXTbIpQ03Q==",
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/es6-promise": {
+      "version": "4.2.8",
+      "resolved": "https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz",
+      "integrity": "sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w=="
+    },
+    "node_modules/es6-promisify": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/es6-promisify/-/es6-promisify-5.0.0.tgz",
+      "integrity": "sha512-C+d6UdsYDk0lMebHNR4S2NybQMMngAOnOwYBQjTOiv0MkoJMP0Myw2mgpDLBcpfCmRLxyFqYhS/CfOENq4SJhQ==",
+      "dependencies": {
+        "es6-promise": "^4.0.3"
+      }
+    },
+    "node_modules/eventemitter3": {
+      "version": "4.0.7",
+      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
+      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw=="
+    },
+    "node_modules/eyes": {
+      "version": "0.1.8",
+      "resolved": "https://registry.npmjs.org/eyes/-/eyes-0.1.8.tgz",
+      "integrity": "sha512-GipyPsXO1anza0AOZdy69Im7hGFCNB7Y/NGjDlZGJ3GJJLtwNSb2vrzYrTYJRrRloVx7pl+bhUaTB8yiccPvFQ==",
+      "engines": {
+        "node": "> 0.1.90"
+      }
+    },
+    "node_modules/fast-stable-stringify": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/fast-stable-stringify/-/fast-stable-stringify-1.0.0.tgz",
+      "integrity": "sha512-wpYMUmFu5f00Sm0cj2pfivpmawLZ0NKdviQ4w9zJeR8JVtOpOxHmLaJuj0vxvGqMJQWyP/COUkF75/57OKyRag=="
+    },
+    "node_modules/fastestsmallesttextencoderdecoder": {
+      "version": "1.0.22",
+      "resolved": "https://registry.npmjs.org/fastestsmallesttextencoderdecoder/-/fastestsmallesttextencoderdecoder-1.0.22.tgz",
+      "integrity": "sha512-Pb8d48e+oIuY4MaM64Cd7OW1gt4nxCHs7/ddPPZ/Ic3sg8yVGM7O9wDvZ7us6ScaUupzM+pfBolwtYhN1IxBIw==",
+      "peer": true
+    },
+    "node_modules/fecha": {
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/fecha/-/fecha-4.2.3.tgz",
+      "integrity": "sha512-OP2IUU6HeYKJi3i0z4A19kHMQoLVs4Hc+DPqqxI2h/DPZHTm/vjsfC6P0b4jCMy14XizLBqvndQ+UilD7707Jw=="
+    },
+    "node_modules/file-uri-to-path": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/file-uri-to-path/-/file-uri-to-path-1.0.0.tgz",
+      "integrity": "sha512-0Zt+s3L7Vf1biwWZ29aARiVYLx7iMGnEUl9x33fbB/j3jR81u/O2LbqK+Bm1CDSNDKVtJ/YjwY7TUd5SkeLQLw=="
+    },
+    "node_modules/find": {
+      "version": "0.3.0",
+      "resolved": "https://registry.npmjs.org/find/-/find-0.3.0.tgz",
+      "integrity": "sha512-iSd+O4OEYV/I36Zl8MdYJO0xD82wH528SaCieTVHhclgiYNe9y+yPKSwK+A7/WsmHL1EZ+pYUJBXWTL5qofksw==",
+      "dependencies": {
+        "traverse-chain": "~0.1.0"
+      }
+    },
+    "node_modules/follow-redirects": {
+      "version": "1.15.4",
+      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.4.tgz",
+      "integrity": "sha512-Cr4D/5wlrb0z9dgERpUL3LrmPKVDsETIJhaCMeDfuFYcqa5bldGV6wBsAN6X/vxlXQtFBMrXdXxdL8CbDTGniw==",
+      "funding": [
+        {
+          "type": "individual",
+          "url": "https://github.com/sponsors/RubenVerborgh"
+        }
+      ],
+      "engines": {
+        "node": ">=4.0"
+      },
+      "peerDependenciesMeta": {
+        "debug": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/form-data": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
+      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
+      "dependencies": {
+        "asynckit": "^0.4.0",
+        "combined-stream": "^1.0.8",
+        "mime-types": "^2.1.12"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/humanize-ms": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/humanize-ms/-/humanize-ms-1.2.1.tgz",
+      "integrity": "sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==",
+      "dependencies": {
+        "ms": "^2.0.0"
+      }
+    },
+    "node_modules/ieee754": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
+      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ]
+    },
+    "node_modules/isomorphic-ws": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/isomorphic-ws/-/isomorphic-ws-4.0.1.tgz",
+      "integrity": "sha512-BhBvN2MBpWTaSHdWRb/bwdZJ1WaehQ2L1KngkCkfLUGF0mAWAT1sQUQacEmQ0jXkFw/czDXPNQSL5u2/Krsz1w==",
+      "peerDependencies": {
+        "ws": "*"
+      }
+    },
+    "node_modules/jayson": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/jayson/-/jayson-4.1.0.tgz",
+      "integrity": "sha512-R6JlbyLN53Mjku329XoRT2zJAE6ZgOQ8f91ucYdMCD4nkGCF9kZSrcGXpHIU4jeKj58zUZke2p+cdQchU7Ly7A==",
+      "dependencies": {
+        "@types/connect": "^3.4.33",
+        "@types/node": "^12.12.54",
+        "@types/ws": "^7.4.4",
+        "commander": "^2.20.3",
+        "delay": "^5.0.0",
+        "es6-promisify": "^5.0.0",
+        "eyes": "^0.1.8",
+        "isomorphic-ws": "^4.0.1",
+        "json-stringify-safe": "^5.0.1",
+        "JSONStream": "^1.3.5",
+        "uuid": "^8.3.2",
+        "ws": "^7.4.5"
+      },
+      "bin": {
+        "jayson": "bin/jayson.js"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/js-sha256": {
+      "version": "0.9.0",
+      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
+      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
+    },
+    "node_modules/json-stringify-safe": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
+      "integrity": "sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA=="
+    },
+    "node_modules/jsonparse": {
+      "version": "1.3.1",
+      "resolved": "https://registry.npmjs.org/jsonparse/-/jsonparse-1.3.1.tgz",
+      "integrity": "sha512-POQXvpdL69+CluYsillJ7SUhKvytYjW9vG/GKpnf+xP8UWgYEM/RaMzHHofbALDiKbbP1W8UEYmgGl39WkPZsg==",
+      "engines": [
+        "node >= 0.2.0"
+      ]
+    },
+    "node_modules/JSONStream": {
+      "version": "1.3.5",
+      "resolved": "https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.5.tgz",
+      "integrity": "sha512-E+iruNOY8VV9s4JEbe1aNEm6MiszPRr/UfcHMz0TQh1BXSxHK+ASV1R6W4HpjBhSeS+54PIsAMCBmwD06LLsqQ==",
+      "dependencies": {
+        "jsonparse": "^1.2.0",
+        "through": ">=2.2.7 <3"
+      },
+      "bin": {
+        "JSONStream": "bin.js"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/lodash": {
+      "version": "4.17.21",
+      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
+      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
+    },
+    "node_modules/lower-case": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/lower-case/-/lower-case-2.0.2.tgz",
+      "integrity": "sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==",
+      "dependencies": {
+        "tslib": "^2.0.3"
+      }
+    },
+    "node_modules/mime-db": {
+      "version": "1.52.0",
+      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
+      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/mime-types": {
+      "version": "2.1.35",
+      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
+      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
+      "dependencies": {
+        "mime-db": "1.52.0"
+      },
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/ms": {
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
+    },
+    "node_modules/no-case": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/no-case/-/no-case-3.0.4.tgz",
+      "integrity": "sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==",
+      "dependencies": {
+        "lower-case": "^2.0.2",
+        "tslib": "^2.0.3"
+      }
+    },
+    "node_modules/node": {
+      "version": "21.2.0",
+      "resolved": "https://registry.npmjs.org/node/-/node-21.2.0.tgz",
+      "integrity": "sha512-oiHX7SXGdO1wyg0/lZ1ZMy1iS7GgumsT5Ptt5BOye1WniC8OJ2TtYRuWfqNoKrUlYzI4+Bv1+NH5eDgxuThU2A==",
+      "hasInstallScript": true,
+      "dependencies": {
+        "node-bin-setup": "^1.0.0"
+      },
+      "bin": {
+        "node": "bin/node"
+      },
+      "engines": {
+        "npm": ">=5.0.0"
+      }
+    },
+    "node_modules/node-bin-setup": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/node-bin-setup/-/node-bin-setup-1.1.3.tgz",
+      "integrity": "sha512-opgw9iSCAzT2+6wJOETCpeRYAQxSopqQ2z+N6BXwIMsQQ7Zj5M8MaafQY8JMlolRR6R1UXg2WmhKp0p9lSOivg=="
+    },
+    "node_modules/node-fetch": {
+      "version": "2.7.0",
+      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
+      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
+      "dependencies": {
+        "whatwg-url": "^5.0.0"
+      },
+      "engines": {
+        "node": "4.x || >=6.0.0"
+      },
+      "peerDependencies": {
+        "encoding": "^0.1.0"
+      },
+      "peerDependenciesMeta": {
+        "encoding": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/node-gyp-build": {
+      "version": "4.7.1",
+      "resolved": "https://registry.npmjs.org/node-gyp-build/-/node-gyp-build-4.7.1.tgz",
+      "integrity": "sha512-wTSrZ+8lsRRa3I3H8Xr65dLWSgCvY2l4AOnaeKdPA9TB/WYMPaTcrzf3rXvFoVvjKNVnu0CcWSx54qq9GKRUYg==",
+      "optional": true,
+      "bin": {
+        "node-gyp-build": "bin.js",
+        "node-gyp-build-optional": "optional.js",
+        "node-gyp-build-test": "build-test.js"
+      }
+    },
+    "node_modules/pako": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/pako/-/pako-2.1.0.tgz",
+      "integrity": "sha512-w+eufiZ1WuJYgPXbV/PO3NCMEc3xqylkKHzp8bxp1uW4qaSNQUkwmLLEc3kKsfz8lpV1F8Ht3U1Cm+9Srog2ug=="
+    },
+    "node_modules/proxy-from-env": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
+      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
+    },
+    "node_modules/regenerator-runtime": {
+      "version": "0.14.1",
+      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.14.1.tgz",
+      "integrity": "sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw=="
+    },
+    "node_modules/rpc-websockets": {
+      "version": "7.9.0",
+      "resolved": "https://registry.npmjs.org/rpc-websockets/-/rpc-websockets-7.9.0.tgz",
+      "integrity": "sha512-DwKewQz1IUA5wfLvgM8wDpPRcr+nWSxuFxx5CbrI2z/MyyZ4nXLM86TvIA+cI1ZAdqC8JIBR1mZR55dzaLU+Hw==",
+      "dependencies": {
+        "@babel/runtime": "^7.17.2",
+        "eventemitter3": "^4.0.7",
+        "uuid": "^8.3.2",
+        "ws": "^8.5.0"
+      },
+      "funding": {
+        "type": "paypal",
+        "url": "https://paypal.me/kozjak"
+      },
+      "optionalDependencies": {
+        "bufferutil": "^4.0.1",
+        "utf-8-validate": "^5.0.2"
+      }
+    },
+    "node_modules/rpc-websockets/node_modules/ws": {
+      "version": "8.16.0",
+      "resolved": "https://registry.npmjs.org/ws/-/ws-8.16.0.tgz",
+      "integrity": "sha512-HS0c//TP7Ina87TfiPUz1rQzMhHrl/SG2guqRcTOIUYD2q8uhUdNHZYJUaQ8aTGPzCh+c6oawMKW35nFl1dxyQ==",
+      "engines": {
+        "node": ">=10.0.0"
+      },
+      "peerDependencies": {
+        "bufferutil": "^4.0.1",
+        "utf-8-validate": ">=5.0.2"
+      },
+      "peerDependenciesMeta": {
+        "bufferutil": {
+          "optional": true
+        },
+        "utf-8-validate": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/safe-buffer": {
+      "version": "5.2.1",
+      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
+      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ]
+    },
+    "node_modules/snake-case": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/snake-case/-/snake-case-3.0.4.tgz",
+      "integrity": "sha512-LAOh4z89bGQvl9pFfNF8V146i7o7/CqFPbqzYgP+yYzDIDeS9HaNFtXABamRW+AQzEVODcvE79ljJ+8a9YSdMg==",
+      "dependencies": {
+        "dot-case": "^3.0.4",
+        "tslib": "^2.0.3"
+      }
+    },
+    "node_modules/superstruct": {
+      "version": "0.14.2",
+      "resolved": "https://registry.npmjs.org/superstruct/-/superstruct-0.14.2.tgz",
+      "integrity": "sha512-nPewA6m9mR3d6k7WkZ8N8zpTWfenFH3q9pA2PkuiZxINr9DKB2+40wEQf0ixn8VaGuJ78AB6iWOtStI+/4FKZQ=="
+    },
+    "node_modules/text-encoding-utf-8": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
+      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
+    },
+    "node_modules/through": {
+      "version": "2.3.8",
+      "resolved": "https://registry.npmjs.org/through/-/through-2.3.8.tgz",
+      "integrity": "sha512-w89qg7PI8wAdvX60bMDP+bFoD5Dvhm9oLheFp5O4a2QF0cSBGsBX4qZmadPMvVqlLJBBci+WqGGOAPvcDeNSVg=="
+    },
+    "node_modules/toformat": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/toformat/-/toformat-2.0.0.tgz",
+      "integrity": "sha512-03SWBVop6nU8bpyZCx7SodpYznbZF5R4ljwNLBcTQzKOD9xuihRo/psX58llS1BMFhhAI08H3luot5GoXJz2pQ=="
+    },
+    "node_modules/toml": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/toml/-/toml-3.0.0.tgz",
+      "integrity": "sha512-y/mWCZinnvxjTKYhJ+pYxwD0mRLVvOtdS2Awbgxln6iEnt4rk0yBxeSBHkGJcPucRiG0e55mwWp+g/05rsrd6w=="
+    },
+    "node_modules/tr46": {
+      "version": "0.0.3",
+      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
+      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
+    },
+    "node_modules/traverse-chain": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/traverse-chain/-/traverse-chain-0.1.0.tgz",
+      "integrity": "sha512-up6Yvai4PYKhpNp5PkYtx50m3KbwQrqDwbuZP/ItyL64YEWHAvH6Md83LFLV/GRSk/BoUVwwgUzX6SOQSbsfAg=="
+    },
+    "node_modules/tslib": {
+      "version": "2.6.2",
+      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.6.2.tgz",
+      "integrity": "sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q=="
+    },
+    "node_modules/utf-8-validate": {
+      "version": "5.0.10",
+      "resolved": "https://registry.npmjs.org/utf-8-validate/-/utf-8-validate-5.0.10.tgz",
+      "integrity": "sha512-Z6czzLq4u8fPOyx7TU6X3dvUZVvoJmxSQ+IcrlmagKhilxlhZgxPK6C5Jqbkw1IDUmFTM+cz9QDnnLTwDz/2gQ==",
+      "hasInstallScript": true,
+      "optional": true,
+      "dependencies": {
+        "node-gyp-build": "^4.3.0"
+      },
+      "engines": {
+        "node": ">=6.14.2"
+      }
+    },
+    "node_modules/uuid": {
+      "version": "8.3.2",
+      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
+      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
+      "bin": {
+        "uuid": "dist/bin/uuid"
+      }
+    },
+    "node_modules/webidl-conversions": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
+      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
+    },
+    "node_modules/whatwg-url": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
+      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
+      "dependencies": {
+        "tr46": "~0.0.3",
+        "webidl-conversions": "^3.0.0"
+      }
+    },
+    "node_modules/ws": {
+      "version": "7.5.9",
+      "resolved": "https://registry.npmjs.org/ws/-/ws-7.5.9.tgz",
+      "integrity": "sha512-F+P9Jil7UiSKSkppIiD94dN07AwvFixvLIj1Og1Rl9GGMuNipJnV9JzjD6XuqmAeiswGvUmNLjr5cFuXwNS77Q==",
+      "engines": {
+        "node": ">=8.3.0"
+      },
+      "peerDependencies": {
+        "bufferutil": "^4.0.1",
+        "utf-8-validate": "^5.0.2"
+      },
+      "peerDependenciesMeta": {
+        "bufferutil": {
+          "optional": true
+        },
+        "utf-8-validate": {
+          "optional": true
+        }
+      }
+    }
+  },
+  "dependencies": {
+    "@babel/runtime": {
+      "version": "7.23.7",
+      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.23.7.tgz",
+      "integrity": "sha512-w06OXVOFso7LcbzMiDGt+3X7Rh7Ho8MmgPoWU3rarH+8upf+wSU/grlGbWzQyr3DkdN6ZeuMFjpdwW0Q+HxobA==",
+      "requires": {
+        "regenerator-runtime": "^0.14.0"
+      }
+    },
+    "@noble/curves": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/@noble/curves/-/curves-1.3.0.tgz",
+      "integrity": "sha512-t01iSXPuN+Eqzb4eBX0S5oubSqXbK/xXa1Ne18Hj8f9pStxztHCE2gfboSp/dZRLSqfuLpRK2nDXDK+W9puocA==",
+      "requires": {
+        "@noble/hashes": "1.3.3"
+      }
+    },
+    "@noble/hashes": {
+      "version": "1.3.3",
+      "resolved": "https://registry.npmjs.org/@noble/hashes/-/hashes-1.3.3.tgz",
+      "integrity": "sha512-V7/fPHgl+jsVPXqqeOzT8egNj2iBIVt+ECeMMG8TdcnTikP3oaBtUVqpT/gYCR68aEBJSF+XbYUxStjbFMqIIA=="
+    },
+    "@openbook-dex/openbook": {
+      "version": "0.0.9",
+      "resolved": "https://registry.npmjs.org/@openbook-dex/openbook/-/openbook-0.0.9.tgz",
+      "integrity": "sha512-tJPqHS7Tp/Gu3MC/MAZQBUm62WhdBPLzCcId3p62eHV6cRwNqflr0j+eKDh0Lfd5CAnkB1a9wZoVte074+zB5A==",
+      "requires": {
+        "@project-serum/anchor": "^0.11.1",
+        "@solana/spl-token": "^0.1.6",
+        "@solana/web3.js": "^1.70.0",
+        "bn.js": "^5.2.1",
+        "buffer-layout": "^1.2.0"
+      },
+      "dependencies": {
+        "@solana/spl-token": {
+          "version": "0.1.8",
+          "resolved": "https://registry.npmjs.org/@solana/spl-token/-/spl-token-0.1.8.tgz",
+          "integrity": "sha512-LZmYCKcPQDtJgecvWOgT/cnoIQPWjdH+QVyzPcFvyDUiT0DiRjZaam4aqNUyvchLFhzgunv3d9xOoyE34ofdoQ==",
+          "requires": {
+            "@babel/runtime": "^7.10.5",
+            "@solana/web3.js": "^1.21.0",
+            "bn.js": "^5.1.0",
+            "buffer": "6.0.3",
+            "buffer-layout": "^1.2.0",
+            "dotenv": "10.0.0"
+          }
+        }
+      }
+    },
+    "@project-serum/anchor": {
+      "version": "0.11.1",
+      "resolved": "https://registry.npmjs.org/@project-serum/anchor/-/anchor-0.11.1.tgz",
+      "integrity": "sha512-oIdm4vTJkUy6GmE6JgqDAuQPKI7XM4TPJkjtoIzp69RZe0iAD9JP2XHx7lV1jLdYXeYHqDXfBt3zcq7W91K6PA==",
+      "requires": {
+        "@project-serum/borsh": "^0.2.2",
+        "@solana/web3.js": "^1.17.0",
+        "base64-js": "^1.5.1",
+        "bn.js": "^5.1.2",
+        "bs58": "^4.0.1",
+        "buffer-layout": "^1.2.0",
+        "camelcase": "^5.3.1",
+        "crypto-hash": "^1.3.0",
+        "eventemitter3": "^4.0.7",
+        "find": "^0.3.0",
+        "js-sha256": "^0.9.0",
+        "pako": "^2.0.3",
+        "snake-case": "^3.0.4",
+        "toml": "^3.0.0"
+      }
+    },
+    "@project-serum/borsh": {
+      "version": "0.2.5",
+      "resolved": "https://registry.npmjs.org/@project-serum/borsh/-/borsh-0.2.5.tgz",
+      "integrity": "sha512-UmeUkUoKdQ7rhx6Leve1SssMR/Ghv8qrEiyywyxSWg7ooV7StdpPBhciiy5eB3T0qU1BXvdRNC8TdrkxK7WC5Q==",
+      "requires": {
+        "bn.js": "^5.1.2",
+        "buffer-layout": "^1.2.0"
+      }
+    },
+    "@raydium-io/raydium-sdk": {
+      "version": "1.3.1-beta.46",
+      "resolved": "https://registry.npmjs.org/@raydium-io/raydium-sdk/-/raydium-sdk-1.3.1-beta.46.tgz",
+      "integrity": "sha512-hGieqaCeqszEJGRBbNNveXlZk8EIsjV9PTwodx8SWABu1ZZODE8SGRe5Vuq9Jtv1LZzL7jY3+P5UnQxrdQLQUA==",
+      "requires": {
+        "@solana/buffer-layout": "^4.0.1",
+        "@solana/spl-token": "^0.3.9",
+        "axios": "^1.6.2",
+        "big.js": "^6.2.1",
+        "bn.js": "^5.2.1",
+        "decimal.js": "^10.4.3",
+        "decimal.js-light": "^2.5.1",
+        "fecha": "^4.2.3",
+        "lodash": "^4.17.21",
+        "toformat": "^2.0.0"
+      }
+    },
+    "@solana/buffer-layout": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/@solana/buffer-layout/-/buffer-layout-4.0.1.tgz",
+      "integrity": "sha512-E1ImOIAD1tBZFRdjeM4/pzTiTApC0AOBGwyAMS4fwIodCWArzJ3DWdoh8cKxeFM2fElkxBh2Aqts1BPC373rHA==",
+      "requires": {
+        "buffer": "~6.0.3"
+      }
+    },
+    "@solana/buffer-layout-utils": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/@solana/buffer-layout-utils/-/buffer-layout-utils-0.2.0.tgz",
+      "integrity": "sha512-szG4sxgJGktbuZYDg2FfNmkMi0DYQoVjN2h7ta1W1hPrwzarcFLBq9UpX1UjNXsNpT9dn+chgprtWGioUAr4/g==",
+      "requires": {
+        "@solana/buffer-layout": "^4.0.0",
+        "@solana/web3.js": "^1.32.0",
+        "bigint-buffer": "^1.1.5",
+        "bignumber.js": "^9.0.1"
+      }
+    },
+    "@solana/codecs-core": {
+      "version": "2.0.0-experimental.8618508",
+      "resolved": "https://registry.npmjs.org/@solana/codecs-core/-/codecs-core-2.0.0-experimental.8618508.tgz",
+      "integrity": "sha512-JCz7mKjVKtfZxkuDtwMAUgA7YvJcA2BwpZaA1NOLcted4OMC4Prwa3DUe3f3181ixPYaRyptbF0Ikq2MbDkYEA=="
+    },
+    "@solana/codecs-data-structures": {
+      "version": "2.0.0-experimental.8618508",
+      "resolved": "https://registry.npmjs.org/@solana/codecs-data-structures/-/codecs-data-structures-2.0.0-experimental.8618508.tgz",
+      "integrity": "sha512-sLpjL9sqzaDdkloBPV61Rht1tgaKq98BCtIKRuyscIrmVPu3wu0Bavk2n/QekmUzaTsj7K1pVSniM0YqCdnEBw==",
+      "requires": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
+      }
+    },
+    "@solana/codecs-numbers": {
+      "version": "2.0.0-experimental.8618508",
+      "resolved": "https://registry.npmjs.org/@solana/codecs-numbers/-/codecs-numbers-2.0.0-experimental.8618508.tgz",
+      "integrity": "sha512-EXQKfzFr3CkKKNzKSZPOOOzchXsFe90TVONWsSnVkonO9z+nGKALE0/L9uBmIFGgdzhhU9QQVFvxBMclIDJo2Q==",
+      "requires": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508"
+      }
+    },
+    "@solana/codecs-strings": {
+      "version": "2.0.0-experimental.8618508",
+      "resolved": "https://registry.npmjs.org/@solana/codecs-strings/-/codecs-strings-2.0.0-experimental.8618508.tgz",
+      "integrity": "sha512-b2yhinr1+oe+JDmnnsV0641KQqqDG8AQ16Z/x7GVWO+AWHMpRlHWVXOq8U1yhPMA4VXxl7i+D+C6ql0VGFp0GA==",
+      "requires": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
+      }
+    },
+    "@solana/options": {
+      "version": "2.0.0-experimental.8618508",
+      "resolved": "https://registry.npmjs.org/@solana/options/-/options-2.0.0-experimental.8618508.tgz",
+      "integrity": "sha512-fy/nIRAMC3QHvnKi63KEd86Xr/zFBVxNW4nEpVEU2OT0gCEKwHY4Z55YHf7XujhyuM3PNpiBKg/YYw5QlRU4vg==",
+      "requires": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
+      }
+    },
+    "@solana/spl-token": {
+      "version": "0.3.11",
+      "resolved": "https://registry.npmjs.org/@solana/spl-token/-/spl-token-0.3.11.tgz",
+      "integrity": "sha512-bvohO3rIMSVL24Pb+I4EYTJ6cL82eFpInEXD/I8K8upOGjpqHsKUoAempR/RnUlI1qSFNyFlWJfu6MNUgfbCQQ==",
+      "requires": {
+        "@solana/buffer-layout": "^4.0.0",
+        "@solana/buffer-layout-utils": "^0.2.0",
+        "@solana/spl-token-metadata": "^0.1.2",
+        "buffer": "^6.0.3"
+      }
+    },
+    "@solana/spl-token-metadata": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/@solana/spl-token-metadata/-/spl-token-metadata-0.1.2.tgz",
+      "integrity": "sha512-hJYnAJNkDrtkE2Q41YZhCpeOGU/0JgRFXbtrtOuGGeKc3pkEUHB9DDoxZAxx+XRno13GozUleyBi0qypz4c3bw==",
+      "requires": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-data-structures": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508",
+        "@solana/codecs-strings": "2.0.0-experimental.8618508",
+        "@solana/options": "2.0.0-experimental.8618508",
+        "@solana/spl-type-length-value": "0.1.0"
+      }
+    },
+    "@solana/spl-type-length-value": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/@solana/spl-type-length-value/-/spl-type-length-value-0.1.0.tgz",
+      "integrity": "sha512-JBMGB0oR4lPttOZ5XiUGyvylwLQjt1CPJa6qQ5oM+MBCndfjz2TKKkw0eATlLLcYmq1jBVsNlJ2cD6ns2GR7lA==",
+      "requires": {
+        "buffer": "^6.0.3"
+      }
+    },
+    "@solana/web3.js": {
+      "version": "1.89.1",
+      "resolved": "https://registry.npmjs.org/@solana/web3.js/-/web3.js-1.89.1.tgz",
+      "integrity": "sha512-t9TTLtPQxtQB3SAf/5E8xPXfVDsC6WGOsgKY02l2cbe0HLymT7ynE8Hu48Lk5qynHCquj6nhISfEHcjMkYpu/A==",
+      "requires": {
+        "@babel/runtime": "^7.23.4",
+        "@noble/curves": "^1.2.0",
+        "@noble/hashes": "^1.3.2",
+        "@solana/buffer-layout": "^4.0.1",
+        "agentkeepalive": "^4.5.0",
+        "bigint-buffer": "^1.1.5",
+        "bn.js": "^5.2.1",
+        "borsh": "^0.7.0",
+        "bs58": "^4.0.1",
+        "buffer": "6.0.3",
+        "fast-stable-stringify": "^1.0.0",
+        "jayson": "^4.1.0",
+        "node-fetch": "^2.7.0",
+        "rpc-websockets": "^7.5.1",
+        "superstruct": "^0.14.2"
+      },
+      "dependencies": {
+        "borsh": {
+          "version": "0.7.0",
+          "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.7.0.tgz",
+          "integrity": "sha512-CLCsZGIBCFnPtkNnieW/a8wmreDmfUtjU2m9yHrzPXIlNbqVs0AQrSatSG6vdNYUqdc83tkQi2eHfF98ubzQLA==",
+          "requires": {
+            "bn.js": "^5.2.0",
+            "bs58": "^4.0.0",
+            "text-encoding-utf-8": "^1.0.2"
+          }
+        }
+      }
+    },
+    "@types/connect": {
+      "version": "3.4.38",
+      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
+      "integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
+      "requires": {
+        "@types/node": "*"
+      }
+    },
+    "@types/node": {
+      "version": "12.20.55",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-12.20.55.tgz",
+      "integrity": "sha512-J8xLz7q2OFulZ2cyGTLE1TbbZcjpno7FaN6zdJNrgAdrJ+DZzh/uFR6YrTb4C+nXakvud8Q4+rbhoIWlYQbUFQ=="
+    },
+    "@types/ws": {
+      "version": "7.4.7",
+      "resolved": "https://registry.npmjs.org/@types/ws/-/ws-7.4.7.tgz",
+      "integrity": "sha512-JQbbmxZTZehdc2iszGKs5oC3NFnjeay7mtAWrdt7qNtAVK0g19muApzAy4bm9byz79xa2ZnO/BOBC2R8RC5Lww==",
+      "requires": {
+        "@types/node": "*"
+      }
+    },
+    "agentkeepalive": {
+      "version": "4.5.0",
+      "resolved": "https://registry.npmjs.org/agentkeepalive/-/agentkeepalive-4.5.0.tgz",
+      "integrity": "sha512-5GG/5IbQQpC9FpkRGsSvZI5QYeSCzlJHdpBQntCsuTOxhKD8lqKhrleg2Yi7yvMIf82Ycmmqln9U8V9qwEiJew==",
+      "requires": {
+        "humanize-ms": "^1.2.1"
+      }
+    },
+    "asynckit": {
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
+      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="
+    },
+    "axios": {
+      "version": "1.6.4",
+      "resolved": "https://registry.npmjs.org/axios/-/axios-1.6.4.tgz",
+      "integrity": "sha512-heJnIs6N4aa1eSthhN9M5ioILu8Wi8vmQW9iHQ9NUvfkJb0lEEDUiIdQNAuBtfUt3FxReaKdpQA5DbmMOqzF/A==",
+      "requires": {
+        "follow-redirects": "^1.15.4",
+        "form-data": "^4.0.0",
+        "proxy-from-env": "^1.1.0"
+      }
+    },
+    "base-x": {
+      "version": "3.0.9",
+      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
+      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
+      "requires": {
+        "safe-buffer": "^5.0.1"
+      }
+    },
+    "base64-js": {
+      "version": "1.5.1",
+      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
+      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA=="
+    },
+    "big.js": {
+      "version": "6.2.1",
+      "resolved": "https://registry.npmjs.org/big.js/-/big.js-6.2.1.tgz",
+      "integrity": "sha512-bCtHMwL9LeDIozFn+oNhhFoq+yQ3BNdnsLSASUxLciOb1vgvpHsIO1dsENiGMgbb4SkP5TrzWzRiLddn8ahVOQ=="
+    },
+    "bigint-buffer": {
+      "version": "1.1.5",
+      "resolved": "https://registry.npmjs.org/bigint-buffer/-/bigint-buffer-1.1.5.tgz",
+      "integrity": "sha512-trfYco6AoZ+rKhKnxA0hgX0HAbVP/s808/EuDSe2JDzUnCp/xAsli35Orvk67UrTEcwuxZqYZDmfA2RXJgxVvA==",
+      "requires": {
+        "bindings": "^1.3.0"
+      }
+    },
+    "bignumber.js": {
+      "version": "9.1.2",
+      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.1.2.tgz",
+      "integrity": "sha512-2/mKyZH9K85bzOEfhXDBFZTGd1CTs+5IHpeFQo9luiBG7hghdC851Pj2WAhb6E3R6b9tZj/XKhbg4fum+Kepug=="
+    },
+    "bindings": {
+      "version": "1.5.0",
+      "resolved": "https://registry.npmjs.org/bindings/-/bindings-1.5.0.tgz",
+      "integrity": "sha512-p2q/t/mhvuOj/UeLlV6566GD/guowlr0hHxClI0W9m7MWYkL1F0hLo+0Aexs9HSPCtR1SXQ0TD3MMKrXZajbiQ==",
+      "requires": {
+        "file-uri-to-path": "1.0.0"
+      }
+    },
+    "bn.js": {
+      "version": "5.2.1",
+      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.1.tgz",
+      "integrity": "sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ=="
+    },
+    "borsh": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/borsh/-/borsh-2.0.0.tgz",
+      "integrity": "sha512-kc9+BgR3zz9+cjbwM8ODoUB4fs3X3I5A/HtX7LZKxCLaMrEeDFoBpnhZY//DTS1VZBSs6S5v46RZRbZjRFspEg=="
+    },
+    "bs58": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
+      "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
+      "requires": {
+        "base-x": "^3.0.2"
+      }
+    },
+    "bs64": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/bs64/-/bs64-0.1.0.tgz",
+      "integrity": "sha512-0rK20fzECR6FFR2VRhvDOUTlPmWFS8PddRtk9KNqsfj9S8++WHSDKzf0f9S/89sthwBg+bEgFitRLEC6COTi8Q==",
+      "requires": {
+        "convert-string": "~0.1.0"
+      }
+    },
+    "buffer": {
+      "version": "6.0.3",
+      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
+      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
+      "requires": {
+        "base64-js": "^1.3.1",
+        "ieee754": "^1.2.1"
+      }
+    },
+    "buffer-layout": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/buffer-layout/-/buffer-layout-1.2.2.tgz",
+      "integrity": "sha512-kWSuLN694+KTk8SrYvCqwP2WcgQjoRCiF5b4QDvkkz8EmgD+aWAIceGFKMIAdmF/pH+vpgNV3d3kAKorcdAmWA=="
+    },
+    "bufferutil": {
+      "version": "4.0.8",
+      "resolved": "https://registry.npmjs.org/bufferutil/-/bufferutil-4.0.8.tgz",
+      "integrity": "sha512-4T53u4PdgsXqKaIctwF8ifXlRTTmEPJ8iEPWFdGZvcf7sbwYo6FKFEX9eNNAnzFZ7EzJAQ3CJeOtCRA4rDp7Pw==",
+      "optional": true,
+      "requires": {
+        "node-gyp-build": "^4.3.0"
+      }
+    },
+    "camelcase": {
+      "version": "5.3.1",
+      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
+      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg=="
+    },
+    "combined-stream": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
+      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
+      "requires": {
+        "delayed-stream": "~1.0.0"
+      }
+    },
+    "commander": {
+      "version": "2.20.3",
+      "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
+      "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ=="
+    },
+    "convert-string": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/convert-string/-/convert-string-0.1.0.tgz",
+      "integrity": "sha512-1KX9ESmtl8xpT2LN2tFnKSbV4NiarbVi8DVb39ZriijvtTklyrT+4dT1wsGMHKD3CJUjXgvJzstm9qL9ICojGA=="
+    },
+    "crypto-hash": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/crypto-hash/-/crypto-hash-1.3.0.tgz",
+      "integrity": "sha512-lyAZ0EMyjDkVvz8WOeVnuCPvKVBXcMv1l5SVqO1yC7PzTwrD/pPje/BIRbWhMoPe436U+Y2nD7f5bFx0kt+Sbg=="
+    },
+    "decimal.js": {
+      "version": "10.4.3",
+      "resolved": "https://registry.npmjs.org/decimal.js/-/decimal.js-10.4.3.tgz",
+      "integrity": "sha512-VBBaLc1MgL5XpzgIP7ny5Z6Nx3UrRkIViUkPUdtl9aya5amy3De1gsUUSB1g3+3sExYNjCAsAznmukyxCb1GRA=="
+    },
+    "decimal.js-light": {
+      "version": "2.5.1",
+      "resolved": "https://registry.npmjs.org/decimal.js-light/-/decimal.js-light-2.5.1.tgz",
+      "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg=="
+    },
+    "delay": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/delay/-/delay-5.0.0.tgz",
+      "integrity": "sha512-ReEBKkIfe4ya47wlPYf/gu5ib6yUG0/Aez0JQZQz94kiWtRQvZIQbTiehsnwHvLSWJnQdhVeqYue7Id1dKr0qw=="
+    },
+    "delayed-stream": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
+      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ=="
+    },
+    "dot-case": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/dot-case/-/dot-case-3.0.4.tgz",
+      "integrity": "sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w==",
+      "requires": {
+        "no-case": "^3.0.4",
+        "tslib": "^2.0.3"
+      }
+    },
+    "dotenv": {
+      "version": "10.0.0",
+      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-10.0.0.tgz",
+      "integrity": "sha512-rlBi9d8jpv9Sf1klPjNfFAuWDjKLwTIJJ/VxtoTwIR6hnZxcEOQCZg2oIL3MWBYw5GpUDKOEnND7LXTbIpQ03Q=="
+    },
+    "es6-promise": {
+      "version": "4.2.8",
+      "resolved": "https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz",
+      "integrity": "sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w=="
+    },
+    "es6-promisify": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/es6-promisify/-/es6-promisify-5.0.0.tgz",
+      "integrity": "sha512-C+d6UdsYDk0lMebHNR4S2NybQMMngAOnOwYBQjTOiv0MkoJMP0Myw2mgpDLBcpfCmRLxyFqYhS/CfOENq4SJhQ==",
+      "requires": {
+        "es6-promise": "^4.0.3"
+      }
+    },
+    "eventemitter3": {
+      "version": "4.0.7",
+      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
+      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw=="
+    },
+    "eyes": {
+      "version": "0.1.8",
+      "resolved": "https://registry.npmjs.org/eyes/-/eyes-0.1.8.tgz",
+      "integrity": "sha512-GipyPsXO1anza0AOZdy69Im7hGFCNB7Y/NGjDlZGJ3GJJLtwNSb2vrzYrTYJRrRloVx7pl+bhUaTB8yiccPvFQ=="
+    },
+    "fast-stable-stringify": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/fast-stable-stringify/-/fast-stable-stringify-1.0.0.tgz",
+      "integrity": "sha512-wpYMUmFu5f00Sm0cj2pfivpmawLZ0NKdviQ4w9zJeR8JVtOpOxHmLaJuj0vxvGqMJQWyP/COUkF75/57OKyRag=="
+    },
+    "fastestsmallesttextencoderdecoder": {
+      "version": "1.0.22",
+      "resolved": "https://registry.npmjs.org/fastestsmallesttextencoderdecoder/-/fastestsmallesttextencoderdecoder-1.0.22.tgz",
+      "integrity": "sha512-Pb8d48e+oIuY4MaM64Cd7OW1gt4nxCHs7/ddPPZ/Ic3sg8yVGM7O9wDvZ7us6ScaUupzM+pfBolwtYhN1IxBIw==",
+      "peer": true
+    },
+    "fecha": {
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/fecha/-/fecha-4.2.3.tgz",
+      "integrity": "sha512-OP2IUU6HeYKJi3i0z4A19kHMQoLVs4Hc+DPqqxI2h/DPZHTm/vjsfC6P0b4jCMy14XizLBqvndQ+UilD7707Jw=="
+    },
+    "file-uri-to-path": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/file-uri-to-path/-/file-uri-to-path-1.0.0.tgz",
+      "integrity": "sha512-0Zt+s3L7Vf1biwWZ29aARiVYLx7iMGnEUl9x33fbB/j3jR81u/O2LbqK+Bm1CDSNDKVtJ/YjwY7TUd5SkeLQLw=="
+    },
+    "find": {
+      "version": "0.3.0",
+      "resolved": "https://registry.npmjs.org/find/-/find-0.3.0.tgz",
+      "integrity": "sha512-iSd+O4OEYV/I36Zl8MdYJO0xD82wH528SaCieTVHhclgiYNe9y+yPKSwK+A7/WsmHL1EZ+pYUJBXWTL5qofksw==",
+      "requires": {
+        "traverse-chain": "~0.1.0"
+      }
+    },
+    "follow-redirects": {
+      "version": "1.15.4",
+      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.4.tgz",
+      "integrity": "sha512-Cr4D/5wlrb0z9dgERpUL3LrmPKVDsETIJhaCMeDfuFYcqa5bldGV6wBsAN6X/vxlXQtFBMrXdXxdL8CbDTGniw=="
+    },
+    "form-data": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
+      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
+      "requires": {
+        "asynckit": "^0.4.0",
+        "combined-stream": "^1.0.8",
+        "mime-types": "^2.1.12"
+      }
+    },
+    "humanize-ms": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/humanize-ms/-/humanize-ms-1.2.1.tgz",
+      "integrity": "sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==",
+      "requires": {
+        "ms": "^2.0.0"
+      }
+    },
+    "ieee754": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
+      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA=="
+    },
+    "isomorphic-ws": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/isomorphic-ws/-/isomorphic-ws-4.0.1.tgz",
+      "integrity": "sha512-BhBvN2MBpWTaSHdWRb/bwdZJ1WaehQ2L1KngkCkfLUGF0mAWAT1sQUQacEmQ0jXkFw/czDXPNQSL5u2/Krsz1w==",
+      "requires": {}
+    },
+    "jayson": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/jayson/-/jayson-4.1.0.tgz",
+      "integrity": "sha512-R6JlbyLN53Mjku329XoRT2zJAE6ZgOQ8f91ucYdMCD4nkGCF9kZSrcGXpHIU4jeKj58zUZke2p+cdQchU7Ly7A==",
+      "requires": {
+        "@types/connect": "^3.4.33",
+        "@types/node": "^12.12.54",
+        "@types/ws": "^7.4.4",
+        "commander": "^2.20.3",
+        "delay": "^5.0.0",
+        "es6-promisify": "^5.0.0",
+        "eyes": "^0.1.8",
+        "isomorphic-ws": "^4.0.1",
+        "json-stringify-safe": "^5.0.1",
+        "JSONStream": "^1.3.5",
+        "uuid": "^8.3.2",
+        "ws": "^7.4.5"
+      }
+    },
+    "js-sha256": {
+      "version": "0.9.0",
+      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
+      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
+    },
+    "json-stringify-safe": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
+      "integrity": "sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA=="
+    },
+    "jsonparse": {
+      "version": "1.3.1",
+      "resolved": "https://registry.npmjs.org/jsonparse/-/jsonparse-1.3.1.tgz",
+      "integrity": "sha512-POQXvpdL69+CluYsillJ7SUhKvytYjW9vG/GKpnf+xP8UWgYEM/RaMzHHofbALDiKbbP1W8UEYmgGl39WkPZsg=="
+    },
+    "JSONStream": {
+      "version": "1.3.5",
+      "resolved": "https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.5.tgz",
+      "integrity": "sha512-E+iruNOY8VV9s4JEbe1aNEm6MiszPRr/UfcHMz0TQh1BXSxHK+ASV1R6W4HpjBhSeS+54PIsAMCBmwD06LLsqQ==",
+      "requires": {
+        "jsonparse": "^1.2.0",
+        "through": ">=2.2.7 <3"
+      }
+    },
+    "lodash": {
+      "version": "4.17.21",
+      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
+      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
+    },
+    "lower-case": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/lower-case/-/lower-case-2.0.2.tgz",
+      "integrity": "sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==",
+      "requires": {
+        "tslib": "^2.0.3"
+      }
+    },
+    "mime-db": {
+      "version": "1.52.0",
+      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
+      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg=="
+    },
+    "mime-types": {
+      "version": "2.1.35",
+      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
+      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
+      "requires": {
+        "mime-db": "1.52.0"
+      }
+    },
+    "ms": {
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
+    },
+    "no-case": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/no-case/-/no-case-3.0.4.tgz",
+      "integrity": "sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==",
+      "requires": {
+        "lower-case": "^2.0.2",
+        "tslib": "^2.0.3"
+      }
+    },
+    "node": {
+      "version": "21.2.0",
+      "resolved": "https://registry.npmjs.org/node/-/node-21.2.0.tgz",
+      "integrity": "sha512-oiHX7SXGdO1wyg0/lZ1ZMy1iS7GgumsT5Ptt5BOye1WniC8OJ2TtYRuWfqNoKrUlYzI4+Bv1+NH5eDgxuThU2A==",
+      "requires": {
+        "node-bin-setup": "^1.0.0"
+      }
+    },
+    "node-bin-setup": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/node-bin-setup/-/node-bin-setup-1.1.3.tgz",
+      "integrity": "sha512-opgw9iSCAzT2+6wJOETCpeRYAQxSopqQ2z+N6BXwIMsQQ7Zj5M8MaafQY8JMlolRR6R1UXg2WmhKp0p9lSOivg=="
+    },
+    "node-fetch": {
+      "version": "2.7.0",
+      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
+      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
+      "requires": {
+        "whatwg-url": "^5.0.0"
+      }
+    },
+    "node-gyp-build": {
+      "version": "4.7.1",
+      "resolved": "https://registry.npmjs.org/node-gyp-build/-/node-gyp-build-4.7.1.tgz",
+      "integrity": "sha512-wTSrZ+8lsRRa3I3H8Xr65dLWSgCvY2l4AOnaeKdPA9TB/WYMPaTcrzf3rXvFoVvjKNVnu0CcWSx54qq9GKRUYg==",
+      "optional": true
+    },
+    "pako": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/pako/-/pako-2.1.0.tgz",
+      "integrity": "sha512-w+eufiZ1WuJYgPXbV/PO3NCMEc3xqylkKHzp8bxp1uW4qaSNQUkwmLLEc3kKsfz8lpV1F8Ht3U1Cm+9Srog2ug=="
+    },
+    "proxy-from-env": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
+      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
+    },
+    "regenerator-runtime": {
+      "version": "0.14.1",
+      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.14.1.tgz",
+      "integrity": "sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw=="
+    },
+    "rpc-websockets": {
+      "version": "7.9.0",
+      "resolved": "https://registry.npmjs.org/rpc-websockets/-/rpc-websockets-7.9.0.tgz",
+      "integrity": "sha512-DwKewQz1IUA5wfLvgM8wDpPRcr+nWSxuFxx5CbrI2z/MyyZ4nXLM86TvIA+cI1ZAdqC8JIBR1mZR55dzaLU+Hw==",
+      "requires": {
+        "@babel/runtime": "^7.17.2",
+        "bufferutil": "^4.0.1",
+        "eventemitter3": "^4.0.7",
+        "utf-8-validate": "^5.0.2",
+        "uuid": "^8.3.2",
+        "ws": "^8.5.0"
+      },
+      "dependencies": {
+        "ws": {
+          "version": "8.16.0",
+          "resolved": "https://registry.npmjs.org/ws/-/ws-8.16.0.tgz",
+          "integrity": "sha512-HS0c//TP7Ina87TfiPUz1rQzMhHrl/SG2guqRcTOIUYD2q8uhUdNHZYJUaQ8aTGPzCh+c6oawMKW35nFl1dxyQ==",
+          "requires": {}
+        }
+      }
+    },
+    "safe-buffer": {
+      "version": "5.2.1",
+      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
+      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ=="
+    },
+    "snake-case": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/snake-case/-/snake-case-3.0.4.tgz",
+      "integrity": "sha512-LAOh4z89bGQvl9pFfNF8V146i7o7/CqFPbqzYgP+yYzDIDeS9HaNFtXABamRW+AQzEVODcvE79ljJ+8a9YSdMg==",
+      "requires": {
+        "dot-case": "^3.0.4",
+        "tslib": "^2.0.3"
+      }
+    },
+    "superstruct": {
+      "version": "0.14.2",
+      "resolved": "https://registry.npmjs.org/superstruct/-/superstruct-0.14.2.tgz",
+      "integrity": "sha512-nPewA6m9mR3d6k7WkZ8N8zpTWfenFH3q9pA2PkuiZxINr9DKB2+40wEQf0ixn8VaGuJ78AB6iWOtStI+/4FKZQ=="
+    },
+    "text-encoding-utf-8": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
+      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
+    },
+    "through": {
+      "version": "2.3.8",
+      "resolved": "https://registry.npmjs.org/through/-/through-2.3.8.tgz",
+      "integrity": "sha512-w89qg7PI8wAdvX60bMDP+bFoD5Dvhm9oLheFp5O4a2QF0cSBGsBX4qZmadPMvVqlLJBBci+WqGGOAPvcDeNSVg=="
+    },
+    "toformat": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/toformat/-/toformat-2.0.0.tgz",
+      "integrity": "sha512-03SWBVop6nU8bpyZCx7SodpYznbZF5R4ljwNLBcTQzKOD9xuihRo/psX58llS1BMFhhAI08H3luot5GoXJz2pQ=="
+    },
+    "toml": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/toml/-/toml-3.0.0.tgz",
+      "integrity": "sha512-y/mWCZinnvxjTKYhJ+pYxwD0mRLVvOtdS2Awbgxln6iEnt4rk0yBxeSBHkGJcPucRiG0e55mwWp+g/05rsrd6w=="
+    },
+    "tr46": {
+      "version": "0.0.3",
+      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
+      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
+    },
+    "traverse-chain": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/traverse-chain/-/traverse-chain-0.1.0.tgz",
+      "integrity": "sha512-up6Yvai4PYKhpNp5PkYtx50m3KbwQrqDwbuZP/ItyL64YEWHAvH6Md83LFLV/GRSk/BoUVwwgUzX6SOQSbsfAg=="
+    },
+    "tslib": {
+      "version": "2.6.2",
+      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.6.2.tgz",
+      "integrity": "sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q=="
+    },
+    "utf-8-validate": {
+      "version": "5.0.10",
+      "resolved": "https://registry.npmjs.org/utf-8-validate/-/utf-8-validate-5.0.10.tgz",
+      "integrity": "sha512-Z6czzLq4u8fPOyx7TU6X3dvUZVvoJmxSQ+IcrlmagKhilxlhZgxPK6C5Jqbkw1IDUmFTM+cz9QDnnLTwDz/2gQ==",
+      "optional": true,
+      "requires": {
+        "node-gyp-build": "^4.3.0"
+      }
+    },
+    "uuid": {
+      "version": "8.3.2",
+      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
+      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg=="
+    },
+    "webidl-conversions": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
+      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
+    },
+    "whatwg-url": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
+      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
+      "requires": {
+        "tr46": "~0.0.3",
+        "webidl-conversions": "^3.0.0"
+      }
+    },
+    "ws": {
+      "version": "7.5.9",
+      "resolved": "https://registry.npmjs.org/ws/-/ws-7.5.9.tgz",
+      "integrity": "sha512-F+P9Jil7UiSKSkppIiD94dN07AwvFixvLIj1Og1Rl9GGMuNipJnV9JzjD6XuqmAeiswGvUmNLjr5cFuXwNS77Q==",
+      "requires": {}
+    }
+  }
+}
Index: Bot汉化/bot Spam Sniper/utils/decoderaylog.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Spam Sniper/utils/decoderaylog.js b/Bot汉化/bot Spam Sniper/utils/decoderaylog.js
new file mode 100644
--- /dev/null	(date 1727201870134)
+++ b/Bot汉化/bot Spam Sniper/utils/decoderaylog.js	(date 1727201870134)
@@ -0,0 +1,53 @@
+const web3 = require('@solana/web3.js');
+const WebSocket = require('ws');
+const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
+const bs64 = require('bs64');
+const config = require('./config');
+
+const connection = config.connection;
+
+const feeAddress = '7YttLkHDoNj9wyDur5pM1ejNaAvT9X4eqaYcHQqtj2G5'
+const rayProgram = new web3.PublicKey('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8');
+
+const ws = new WebSocket(config.websocketConnection)
+    ws.onopen = () => {
+        ws.send(
+            JSON.stringify({
+                jsonrpc: '2.0',
+                id: 1,
+                method: 'logsSubscribe',
+                params: [{"mentions": [feeAddress]}, {"commitment": "processed"}]
+            })
+        )
+    }
+
+ws.on('message', (evt) => {
+    try {
+        const buffer = evt.toString('utf8');
+        parseLogs(JSON.parse(buffer));
+        return;
+    } catch (e) {
+        console.log(e)
+    }
+})
+
+function parseLogs(buffer){
+    if(buffer.params === undefined){
+        return;
+    }
+    let now = new Date();
+    let utcString = now.toUTCString();
+    console.log(utcString);
+    const allLogs = buffer.params.result.value.logs;
+    for(const log of allLogs){
+        if(log.includes("ray_log")){
+            const rayLogSplit = log.split(" ");
+            const rayLog = rayLogSplit[3];
+            const logData = Buffer.from(rayLog, "base64");
+            const market = new web3.PublicKey(logData.subarray(75 - 32), 75);
+            console.log(market)
+            const pool = raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), market.toBuffer(), Buffer.from('amm_associated_seed', 'utf-8')], rayProgram)['publicKey'];
+            console.log(pool);
+        }
+    }
+}
\ No newline at end of file
Index: Bot汉化/bot Spam Sniper/utils/util.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Spam Sniper/utils/util.js b/Bot汉化/bot Spam Sniper/utils/util.js
new file mode 100644
--- /dev/null	(date 1727201870169)
+++ b/Bot汉化/bot Spam Sniper/utils/util.js	(date 1727201870169)
@@ -0,0 +1,70 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.sleepTime = exports.getATAAddress = exports.buildAndSendTx = exports.getWalletTokenAccount = exports.sendTx = void 0;
+const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
+const web3_js_1 = require("@solana/web3.js");
+const config_1 = require("./config");
+function sendTx(connection, payer, txs, options) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const txids = [];
+        for (const iTx of txs) {
+            if (iTx instanceof web3_js_1.VersionedTransaction) {
+                iTx.sign([payer]);
+                txids.push(yield connection.sendTransaction(iTx, options));
+            }
+            else {
+                txids.push(yield connection.sendTransaction(iTx, [payer], options));
+            }
+        }
+        return txids;
+    });
+}
+exports.sendTx = sendTx;
+function getWalletTokenAccount(connection, wallet) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const walletTokenAccount = yield connection.getTokenAccountsByOwner(wallet, {
+            programId: raydium_sdk_1.TOKEN_PROGRAM_ID,
+        });
+        return walletTokenAccount.value.map((i) => ({
+            pubkey: i.pubkey,
+            programId: i.account.owner,
+            accountInfo: raydium_sdk_1.SPL_ACCOUNT_LAYOUT.decode(i.account.data),
+        }));
+    });
+}
+exports.getWalletTokenAccount = getWalletTokenAccount;
+function buildAndSendTx(innerSimpleV0Transaction, options) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const willSendTx = yield (0, raydium_sdk_1.buildSimpleTransaction)({
+            connection: config_1.connection,
+            makeTxVersion: config_1.makeTxVersion,
+            payer: config_1.wallet.publicKey,
+            innerTransactions: innerSimpleV0Transaction,
+            addLookupTableInfo: config_1.addLookupTableInfo,
+        });
+        return yield sendTx(config_1.connection, config_1.wallet, willSendTx, options);
+    });
+}
+exports.buildAndSendTx = buildAndSendTx;
+function getATAAddress(programId, owner, mint) {
+    const { publicKey, nonce } = (0, raydium_sdk_1.findProgramAddress)([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], new web3_js_1.PublicKey("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"));
+    return { publicKey, nonce };
+}
+exports.getATAAddress = getATAAddress;
+function sleepTime(ms) {
+    return __awaiter(this, void 0, void 0, function* () {
+        console.log((new Date()).toLocaleString(), 'sleepTime', ms);
+        return new Promise(resolve => setTimeout(resolve, ms));
+    });
+}
+exports.sleepTime = sleepTime;
+//# sourceMappingURL=util.js.map
\ No newline at end of file
Index: Bot原版/Bot Spam Sniper/utils/config.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Spam Sniper/utils/config.js b/Bot原版/Bot Spam Sniper/utils/config.js
new file mode 100644
--- /dev/null	(date 1732301214181)
+++ b/Bot原版/Bot Spam Sniper/utils/config.js	(date 1732301214181)
@@ -0,0 +1,16 @@
+const bs58 = require('bs58');
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.DEFAULT_TOKEN = exports.addLookupTableInfo = exports.makeTxVersion = exports.RAYDIUM_MAINNET_API = exports.ENDPOINT = exports.PROGRAMIDS = exports.connection = exports.wallet = exports.rpcToken = exports.rpcUrl = void 0;
+const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
+const web3_js_1 = require("@solana/web3.js");
+exports.ownerAddress = '<YOUR WALLET PUBLIC KEY>';
+exports.wallet = web3_js_1.Keypair.fromSecretKey(bs58.decode('<YOUR PRIVATE KEY>'));
+exports.connection = new web3_js_1.Connection('<YOUR RPC CONNECTION URL>');
+exports.websocketConnection = '<YOUR WEBSOCKET CONNECTION URL>';
+exports.amtBuySol = '<INTEGER AMOUNT OF SOL TO USER PER SWAP, EX. 0.001>';
+exports.PROGRAMIDS = raydium_sdk_1.MAINNET_PROGRAM_ID;
+exports.ENDPOINT = raydium_sdk_1.ENDPOINT;
+exports.RAYDIUM_MAINNET_API = raydium_sdk_1.RAYDIUM_MAINNET;
+exports.makeTxVersion = raydium_sdk_1.TxVersion.V0; // LEGACY
+exports.addLookupTableInfo = raydium_sdk_1.LOOKUP_TABLE_CACHE;
Index: Bot汉化/bot Spam Sniper/utils/config.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Spam Sniper/utils/config.js b/Bot汉化/bot Spam Sniper/utils/config.js
new file mode 100644
--- /dev/null	(date 1727201870095)
+++ b/Bot汉化/bot Spam Sniper/utils/config.js	(date 1727201870095)
@@ -0,0 +1,16 @@
+const bs58 = require('bs58');
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.DEFAULT_TOKEN = exports.addLookupTableInfo = exports.makeTxVersion = exports.RAYDIUM_MAINNET_API = exports.ENDPOINT = exports.PROGRAMIDS = exports.connection = exports.wallet = exports.rpcToken = exports.rpcUrl = void 0;
+const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
+const web3_js_1 = require("@solana/web3.js");
+exports.ownerAddress = '<YOUR WALLET PUBLIC KEY>';
+exports.wallet = web3_js_1.Keypair.fromSecretKey(bs58.decode('<YOUR PRIVATE KEY>'));
+exports.connection = new web3_js_1.Connection('<YOUR RPC CONNECTION URL>');
+exports.websocketConnection = '<YOUR WEBSOCKET CONNECTION URL>';
+exports.amtBuySol = '<INTEGER AMOUNT OF SOL TO USER PER SWAP, EX. 0.001>';
+exports.PROGRAMIDS = raydium_sdk_1.MAINNET_PROGRAM_ID;
+exports.ENDPOINT = raydium_sdk_1.ENDPOINT;
+exports.RAYDIUM_MAINNET_API = raydium_sdk_1.RAYDIUM_MAINNET;
+exports.makeTxVersion = raydium_sdk_1.TxVersion.V0; // LEGACY
+exports.addLookupTableInfo = raydium_sdk_1.LOOKUP_TABLE_CACHE;
Index: Bot汉化/bot Spam Sniper/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Spam Sniper/.gitignore b/Bot汉化/bot Spam Sniper/.gitignore
new file mode 100644
--- /dev/null	(date 1727201869649)
+++ b/Bot汉化/bot Spam Sniper/.gitignore	(date 1727201869649)
@@ -0,0 +1,2 @@
+**/node_modules
+.DS_Store
\ No newline at end of file
Index: Bot汉化/bot Spam Sniper/package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Spam Sniper/package-lock.json b/Bot汉化/bot Spam Sniper/package-lock.json
new file mode 100644
--- /dev/null	(date 1727201869703)
+++ b/Bot汉化/bot Spam Sniper/package-lock.json	(date 1727201869703)
@@ -0,0 +1,1751 @@
+{
+  "name": "solana",
+  "version": "1.0.0",
+  "lockfileVersion": 2,
+  "requires": true,
+  "packages": {
+    "": {
+      "name": "solana",
+      "version": "1.0.0",
+      "license": "ISC",
+      "dependencies": {
+        "@openbook-dex/openbook": "^0.0.9",
+        "@raydium-io/raydium-sdk": "^1.3.1-beta.46",
+        "@solana/spl-token": "^0.3.11",
+        "@solana/web3.js": "^1.87.6",
+        "borsh": "^2.0.0",
+        "bs64": "^0.1.0",
+        "node": "^21.2.0"
+      }
+    },
+    "node_modules/@babel/runtime": {
+      "version": "7.23.7",
+      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.23.7.tgz",
+      "integrity": "sha512-w06OXVOFso7LcbzMiDGt+3X7Rh7Ho8MmgPoWU3rarH+8upf+wSU/grlGbWzQyr3DkdN6ZeuMFjpdwW0Q+HxobA==",
+      "dependencies": {
+        "regenerator-runtime": "^0.14.0"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@noble/curves": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/@noble/curves/-/curves-1.3.0.tgz",
+      "integrity": "sha512-t01iSXPuN+Eqzb4eBX0S5oubSqXbK/xXa1Ne18Hj8f9pStxztHCE2gfboSp/dZRLSqfuLpRK2nDXDK+W9puocA==",
+      "dependencies": {
+        "@noble/hashes": "1.3.3"
+      },
+      "funding": {
+        "url": "https://paulmillr.com/funding/"
+      }
+    },
+    "node_modules/@noble/hashes": {
+      "version": "1.3.3",
+      "resolved": "https://registry.npmjs.org/@noble/hashes/-/hashes-1.3.3.tgz",
+      "integrity": "sha512-V7/fPHgl+jsVPXqqeOzT8egNj2iBIVt+ECeMMG8TdcnTikP3oaBtUVqpT/gYCR68aEBJSF+XbYUxStjbFMqIIA==",
+      "engines": {
+        "node": ">= 16"
+      },
+      "funding": {
+        "url": "https://paulmillr.com/funding/"
+      }
+    },
+    "node_modules/@openbook-dex/openbook": {
+      "version": "0.0.9",
+      "resolved": "https://registry.npmjs.org/@openbook-dex/openbook/-/openbook-0.0.9.tgz",
+      "integrity": "sha512-tJPqHS7Tp/Gu3MC/MAZQBUm62WhdBPLzCcId3p62eHV6cRwNqflr0j+eKDh0Lfd5CAnkB1a9wZoVte074+zB5A==",
+      "dependencies": {
+        "@project-serum/anchor": "^0.11.1",
+        "@solana/spl-token": "^0.1.6",
+        "@solana/web3.js": "^1.70.0",
+        "bn.js": "^5.2.1",
+        "buffer-layout": "^1.2.0"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/@openbook-dex/openbook/node_modules/@solana/spl-token": {
+      "version": "0.1.8",
+      "resolved": "https://registry.npmjs.org/@solana/spl-token/-/spl-token-0.1.8.tgz",
+      "integrity": "sha512-LZmYCKcPQDtJgecvWOgT/cnoIQPWjdH+QVyzPcFvyDUiT0DiRjZaam4aqNUyvchLFhzgunv3d9xOoyE34ofdoQ==",
+      "dependencies": {
+        "@babel/runtime": "^7.10.5",
+        "@solana/web3.js": "^1.21.0",
+        "bn.js": "^5.1.0",
+        "buffer": "6.0.3",
+        "buffer-layout": "^1.2.0",
+        "dotenv": "10.0.0"
+      },
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@project-serum/anchor": {
+      "version": "0.11.1",
+      "resolved": "https://registry.npmjs.org/@project-serum/anchor/-/anchor-0.11.1.tgz",
+      "integrity": "sha512-oIdm4vTJkUy6GmE6JgqDAuQPKI7XM4TPJkjtoIzp69RZe0iAD9JP2XHx7lV1jLdYXeYHqDXfBt3zcq7W91K6PA==",
+      "dependencies": {
+        "@project-serum/borsh": "^0.2.2",
+        "@solana/web3.js": "^1.17.0",
+        "base64-js": "^1.5.1",
+        "bn.js": "^5.1.2",
+        "bs58": "^4.0.1",
+        "buffer-layout": "^1.2.0",
+        "camelcase": "^5.3.1",
+        "crypto-hash": "^1.3.0",
+        "eventemitter3": "^4.0.7",
+        "find": "^0.3.0",
+        "js-sha256": "^0.9.0",
+        "pako": "^2.0.3",
+        "snake-case": "^3.0.4",
+        "toml": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=11"
+      }
+    },
+    "node_modules/@project-serum/borsh": {
+      "version": "0.2.5",
+      "resolved": "https://registry.npmjs.org/@project-serum/borsh/-/borsh-0.2.5.tgz",
+      "integrity": "sha512-UmeUkUoKdQ7rhx6Leve1SssMR/Ghv8qrEiyywyxSWg7ooV7StdpPBhciiy5eB3T0qU1BXvdRNC8TdrkxK7WC5Q==",
+      "dependencies": {
+        "bn.js": "^5.1.2",
+        "buffer-layout": "^1.2.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "peerDependencies": {
+        "@solana/web3.js": "^1.2.0"
+      }
+    },
+    "node_modules/@raydium-io/raydium-sdk": {
+      "version": "1.3.1-beta.46",
+      "resolved": "https://registry.npmjs.org/@raydium-io/raydium-sdk/-/raydium-sdk-1.3.1-beta.46.tgz",
+      "integrity": "sha512-hGieqaCeqszEJGRBbNNveXlZk8EIsjV9PTwodx8SWABu1ZZODE8SGRe5Vuq9Jtv1LZzL7jY3+P5UnQxrdQLQUA==",
+      "dependencies": {
+        "@solana/buffer-layout": "^4.0.1",
+        "@solana/spl-token": "^0.3.9",
+        "axios": "^1.6.2",
+        "big.js": "^6.2.1",
+        "bn.js": "^5.2.1",
+        "decimal.js": "^10.4.3",
+        "decimal.js-light": "^2.5.1",
+        "fecha": "^4.2.3",
+        "lodash": "^4.17.21",
+        "toformat": "^2.0.0"
+      },
+      "peerDependencies": {
+        "@solana/web3.js": "^1.73.0"
+      }
+    },
+    "node_modules/@solana/buffer-layout": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/@solana/buffer-layout/-/buffer-layout-4.0.1.tgz",
+      "integrity": "sha512-E1ImOIAD1tBZFRdjeM4/pzTiTApC0AOBGwyAMS4fwIodCWArzJ3DWdoh8cKxeFM2fElkxBh2Aqts1BPC373rHA==",
+      "dependencies": {
+        "buffer": "~6.0.3"
+      },
+      "engines": {
+        "node": ">=5.10"
+      }
+    },
+    "node_modules/@solana/buffer-layout-utils": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/@solana/buffer-layout-utils/-/buffer-layout-utils-0.2.0.tgz",
+      "integrity": "sha512-szG4sxgJGktbuZYDg2FfNmkMi0DYQoVjN2h7ta1W1hPrwzarcFLBq9UpX1UjNXsNpT9dn+chgprtWGioUAr4/g==",
+      "dependencies": {
+        "@solana/buffer-layout": "^4.0.0",
+        "@solana/web3.js": "^1.32.0",
+        "bigint-buffer": "^1.1.5",
+        "bignumber.js": "^9.0.1"
+      },
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@solana/codecs-core": {
+      "version": "2.0.0-experimental.8618508",
+      "resolved": "https://registry.npmjs.org/@solana/codecs-core/-/codecs-core-2.0.0-experimental.8618508.tgz",
+      "integrity": "sha512-JCz7mKjVKtfZxkuDtwMAUgA7YvJcA2BwpZaA1NOLcted4OMC4Prwa3DUe3f3181ixPYaRyptbF0Ikq2MbDkYEA=="
+    },
+    "node_modules/@solana/codecs-data-structures": {
+      "version": "2.0.0-experimental.8618508",
+      "resolved": "https://registry.npmjs.org/@solana/codecs-data-structures/-/codecs-data-structures-2.0.0-experimental.8618508.tgz",
+      "integrity": "sha512-sLpjL9sqzaDdkloBPV61Rht1tgaKq98BCtIKRuyscIrmVPu3wu0Bavk2n/QekmUzaTsj7K1pVSniM0YqCdnEBw==",
+      "dependencies": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
+      }
+    },
+    "node_modules/@solana/codecs-numbers": {
+      "version": "2.0.0-experimental.8618508",
+      "resolved": "https://registry.npmjs.org/@solana/codecs-numbers/-/codecs-numbers-2.0.0-experimental.8618508.tgz",
+      "integrity": "sha512-EXQKfzFr3CkKKNzKSZPOOOzchXsFe90TVONWsSnVkonO9z+nGKALE0/L9uBmIFGgdzhhU9QQVFvxBMclIDJo2Q==",
+      "dependencies": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508"
+      }
+    },
+    "node_modules/@solana/codecs-strings": {
+      "version": "2.0.0-experimental.8618508",
+      "resolved": "https://registry.npmjs.org/@solana/codecs-strings/-/codecs-strings-2.0.0-experimental.8618508.tgz",
+      "integrity": "sha512-b2yhinr1+oe+JDmnnsV0641KQqqDG8AQ16Z/x7GVWO+AWHMpRlHWVXOq8U1yhPMA4VXxl7i+D+C6ql0VGFp0GA==",
+      "dependencies": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
+      },
+      "peerDependencies": {
+        "fastestsmallesttextencoderdecoder": "^1.0.22"
+      }
+    },
+    "node_modules/@solana/options": {
+      "version": "2.0.0-experimental.8618508",
+      "resolved": "https://registry.npmjs.org/@solana/options/-/options-2.0.0-experimental.8618508.tgz",
+      "integrity": "sha512-fy/nIRAMC3QHvnKi63KEd86Xr/zFBVxNW4nEpVEU2OT0gCEKwHY4Z55YHf7XujhyuM3PNpiBKg/YYw5QlRU4vg==",
+      "dependencies": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
+      }
+    },
+    "node_modules/@solana/spl-token": {
+      "version": "0.3.11",
+      "resolved": "https://registry.npmjs.org/@solana/spl-token/-/spl-token-0.3.11.tgz",
+      "integrity": "sha512-bvohO3rIMSVL24Pb+I4EYTJ6cL82eFpInEXD/I8K8upOGjpqHsKUoAempR/RnUlI1qSFNyFlWJfu6MNUgfbCQQ==",
+      "dependencies": {
+        "@solana/buffer-layout": "^4.0.0",
+        "@solana/buffer-layout-utils": "^0.2.0",
+        "@solana/spl-token-metadata": "^0.1.2",
+        "buffer": "^6.0.3"
+      },
+      "engines": {
+        "node": ">=16"
+      },
+      "peerDependencies": {
+        "@solana/web3.js": "^1.88.0"
+      }
+    },
+    "node_modules/@solana/spl-token-metadata": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/@solana/spl-token-metadata/-/spl-token-metadata-0.1.2.tgz",
+      "integrity": "sha512-hJYnAJNkDrtkE2Q41YZhCpeOGU/0JgRFXbtrtOuGGeKc3pkEUHB9DDoxZAxx+XRno13GozUleyBi0qypz4c3bw==",
+      "dependencies": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-data-structures": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508",
+        "@solana/codecs-strings": "2.0.0-experimental.8618508",
+        "@solana/options": "2.0.0-experimental.8618508",
+        "@solana/spl-type-length-value": "0.1.0"
+      },
+      "engines": {
+        "node": ">=16"
+      },
+      "peerDependencies": {
+        "@solana/web3.js": "^1.87.6"
+      }
+    },
+    "node_modules/@solana/spl-type-length-value": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/@solana/spl-type-length-value/-/spl-type-length-value-0.1.0.tgz",
+      "integrity": "sha512-JBMGB0oR4lPttOZ5XiUGyvylwLQjt1CPJa6qQ5oM+MBCndfjz2TKKkw0eATlLLcYmq1jBVsNlJ2cD6ns2GR7lA==",
+      "dependencies": {
+        "buffer": "^6.0.3"
+      },
+      "engines": {
+        "node": ">=16"
+      }
+    },
+    "node_modules/@solana/web3.js": {
+      "version": "1.89.1",
+      "resolved": "https://registry.npmjs.org/@solana/web3.js/-/web3.js-1.89.1.tgz",
+      "integrity": "sha512-t9TTLtPQxtQB3SAf/5E8xPXfVDsC6WGOsgKY02l2cbe0HLymT7ynE8Hu48Lk5qynHCquj6nhISfEHcjMkYpu/A==",
+      "dependencies": {
+        "@babel/runtime": "^7.23.4",
+        "@noble/curves": "^1.2.0",
+        "@noble/hashes": "^1.3.2",
+        "@solana/buffer-layout": "^4.0.1",
+        "agentkeepalive": "^4.5.0",
+        "bigint-buffer": "^1.1.5",
+        "bn.js": "^5.2.1",
+        "borsh": "^0.7.0",
+        "bs58": "^4.0.1",
+        "buffer": "6.0.3",
+        "fast-stable-stringify": "^1.0.0",
+        "jayson": "^4.1.0",
+        "node-fetch": "^2.7.0",
+        "rpc-websockets": "^7.5.1",
+        "superstruct": "^0.14.2"
+      }
+    },
+    "node_modules/@solana/web3.js/node_modules/borsh": {
+      "version": "0.7.0",
+      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.7.0.tgz",
+      "integrity": "sha512-CLCsZGIBCFnPtkNnieW/a8wmreDmfUtjU2m9yHrzPXIlNbqVs0AQrSatSG6vdNYUqdc83tkQi2eHfF98ubzQLA==",
+      "dependencies": {
+        "bn.js": "^5.2.0",
+        "bs58": "^4.0.0",
+        "text-encoding-utf-8": "^1.0.2"
+      }
+    },
+    "node_modules/@types/connect": {
+      "version": "3.4.38",
+      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
+      "integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
+      "dependencies": {
+        "@types/node": "*"
+      }
+    },
+    "node_modules/@types/node": {
+      "version": "12.20.55",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-12.20.55.tgz",
+      "integrity": "sha512-J8xLz7q2OFulZ2cyGTLE1TbbZcjpno7FaN6zdJNrgAdrJ+DZzh/uFR6YrTb4C+nXakvud8Q4+rbhoIWlYQbUFQ=="
+    },
+    "node_modules/@types/ws": {
+      "version": "7.4.7",
+      "resolved": "https://registry.npmjs.org/@types/ws/-/ws-7.4.7.tgz",
+      "integrity": "sha512-JQbbmxZTZehdc2iszGKs5oC3NFnjeay7mtAWrdt7qNtAVK0g19muApzAy4bm9byz79xa2ZnO/BOBC2R8RC5Lww==",
+      "dependencies": {
+        "@types/node": "*"
+      }
+    },
+    "node_modules/agentkeepalive": {
+      "version": "4.5.0",
+      "resolved": "https://registry.npmjs.org/agentkeepalive/-/agentkeepalive-4.5.0.tgz",
+      "integrity": "sha512-5GG/5IbQQpC9FpkRGsSvZI5QYeSCzlJHdpBQntCsuTOxhKD8lqKhrleg2Yi7yvMIf82Ycmmqln9U8V9qwEiJew==",
+      "dependencies": {
+        "humanize-ms": "^1.2.1"
+      },
+      "engines": {
+        "node": ">= 8.0.0"
+      }
+    },
+    "node_modules/asynckit": {
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
+      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="
+    },
+    "node_modules/axios": {
+      "version": "1.6.4",
+      "resolved": "https://registry.npmjs.org/axios/-/axios-1.6.4.tgz",
+      "integrity": "sha512-heJnIs6N4aa1eSthhN9M5ioILu8Wi8vmQW9iHQ9NUvfkJb0lEEDUiIdQNAuBtfUt3FxReaKdpQA5DbmMOqzF/A==",
+      "dependencies": {
+        "follow-redirects": "^1.15.4",
+        "form-data": "^4.0.0",
+        "proxy-from-env": "^1.1.0"
+      }
+    },
+    "node_modules/base-x": {
+      "version": "3.0.9",
+      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
+      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
+      "dependencies": {
+        "safe-buffer": "^5.0.1"
+      }
+    },
+    "node_modules/base64-js": {
+      "version": "1.5.1",
+      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
+      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ]
+    },
+    "node_modules/big.js": {
+      "version": "6.2.1",
+      "resolved": "https://registry.npmjs.org/big.js/-/big.js-6.2.1.tgz",
+      "integrity": "sha512-bCtHMwL9LeDIozFn+oNhhFoq+yQ3BNdnsLSASUxLciOb1vgvpHsIO1dsENiGMgbb4SkP5TrzWzRiLddn8ahVOQ==",
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/bigjs"
+      }
+    },
+    "node_modules/bigint-buffer": {
+      "version": "1.1.5",
+      "resolved": "https://registry.npmjs.org/bigint-buffer/-/bigint-buffer-1.1.5.tgz",
+      "integrity": "sha512-trfYco6AoZ+rKhKnxA0hgX0HAbVP/s808/EuDSe2JDzUnCp/xAsli35Orvk67UrTEcwuxZqYZDmfA2RXJgxVvA==",
+      "hasInstallScript": true,
+      "dependencies": {
+        "bindings": "^1.3.0"
+      },
+      "engines": {
+        "node": ">= 10.0.0"
+      }
+    },
+    "node_modules/bignumber.js": {
+      "version": "9.1.2",
+      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.1.2.tgz",
+      "integrity": "sha512-2/mKyZH9K85bzOEfhXDBFZTGd1CTs+5IHpeFQo9luiBG7hghdC851Pj2WAhb6E3R6b9tZj/XKhbg4fum+Kepug==",
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/bindings": {
+      "version": "1.5.0",
+      "resolved": "https://registry.npmjs.org/bindings/-/bindings-1.5.0.tgz",
+      "integrity": "sha512-p2q/t/mhvuOj/UeLlV6566GD/guowlr0hHxClI0W9m7MWYkL1F0hLo+0Aexs9HSPCtR1SXQ0TD3MMKrXZajbiQ==",
+      "dependencies": {
+        "file-uri-to-path": "1.0.0"
+      }
+    },
+    "node_modules/bn.js": {
+      "version": "5.2.1",
+      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.1.tgz",
+      "integrity": "sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ=="
+    },
+    "node_modules/borsh": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/borsh/-/borsh-2.0.0.tgz",
+      "integrity": "sha512-kc9+BgR3zz9+cjbwM8ODoUB4fs3X3I5A/HtX7LZKxCLaMrEeDFoBpnhZY//DTS1VZBSs6S5v46RZRbZjRFspEg=="
+    },
+    "node_modules/bs58": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
+      "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
+      "dependencies": {
+        "base-x": "^3.0.2"
+      }
+    },
+    "node_modules/bs64": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/bs64/-/bs64-0.1.0.tgz",
+      "integrity": "sha512-0rK20fzECR6FFR2VRhvDOUTlPmWFS8PddRtk9KNqsfj9S8++WHSDKzf0f9S/89sthwBg+bEgFitRLEC6COTi8Q==",
+      "dependencies": {
+        "convert-string": "~0.1.0"
+      }
+    },
+    "node_modules/buffer": {
+      "version": "6.0.3",
+      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
+      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "dependencies": {
+        "base64-js": "^1.3.1",
+        "ieee754": "^1.2.1"
+      }
+    },
+    "node_modules/buffer-layout": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/buffer-layout/-/buffer-layout-1.2.2.tgz",
+      "integrity": "sha512-kWSuLN694+KTk8SrYvCqwP2WcgQjoRCiF5b4QDvkkz8EmgD+aWAIceGFKMIAdmF/pH+vpgNV3d3kAKorcdAmWA==",
+      "engines": {
+        "node": ">=4.5"
+      }
+    },
+    "node_modules/bufferutil": {
+      "version": "4.0.8",
+      "resolved": "https://registry.npmjs.org/bufferutil/-/bufferutil-4.0.8.tgz",
+      "integrity": "sha512-4T53u4PdgsXqKaIctwF8ifXlRTTmEPJ8iEPWFdGZvcf7sbwYo6FKFEX9eNNAnzFZ7EzJAQ3CJeOtCRA4rDp7Pw==",
+      "hasInstallScript": true,
+      "optional": true,
+      "dependencies": {
+        "node-gyp-build": "^4.3.0"
+      },
+      "engines": {
+        "node": ">=6.14.2"
+      }
+    },
+    "node_modules/camelcase": {
+      "version": "5.3.1",
+      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
+      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/combined-stream": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
+      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
+      "dependencies": {
+        "delayed-stream": "~1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/commander": {
+      "version": "2.20.3",
+      "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
+      "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ=="
+    },
+    "node_modules/convert-string": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/convert-string/-/convert-string-0.1.0.tgz",
+      "integrity": "sha512-1KX9ESmtl8xpT2LN2tFnKSbV4NiarbVi8DVb39ZriijvtTklyrT+4dT1wsGMHKD3CJUjXgvJzstm9qL9ICojGA=="
+    },
+    "node_modules/crypto-hash": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/crypto-hash/-/crypto-hash-1.3.0.tgz",
+      "integrity": "sha512-lyAZ0EMyjDkVvz8WOeVnuCPvKVBXcMv1l5SVqO1yC7PzTwrD/pPje/BIRbWhMoPe436U+Y2nD7f5bFx0kt+Sbg==",
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/decimal.js": {
+      "version": "10.4.3",
+      "resolved": "https://registry.npmjs.org/decimal.js/-/decimal.js-10.4.3.tgz",
+      "integrity": "sha512-VBBaLc1MgL5XpzgIP7ny5Z6Nx3UrRkIViUkPUdtl9aya5amy3De1gsUUSB1g3+3sExYNjCAsAznmukyxCb1GRA=="
+    },
+    "node_modules/decimal.js-light": {
+      "version": "2.5.1",
+      "resolved": "https://registry.npmjs.org/decimal.js-light/-/decimal.js-light-2.5.1.tgz",
+      "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg=="
+    },
+    "node_modules/delay": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/delay/-/delay-5.0.0.tgz",
+      "integrity": "sha512-ReEBKkIfe4ya47wlPYf/gu5ib6yUG0/Aez0JQZQz94kiWtRQvZIQbTiehsnwHvLSWJnQdhVeqYue7Id1dKr0qw==",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/delayed-stream": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
+      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
+    "node_modules/dot-case": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/dot-case/-/dot-case-3.0.4.tgz",
+      "integrity": "sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w==",
+      "dependencies": {
+        "no-case": "^3.0.4",
+        "tslib": "^2.0.3"
+      }
+    },
+    "node_modules/dotenv": {
+      "version": "10.0.0",
+      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-10.0.0.tgz",
+      "integrity": "sha512-rlBi9d8jpv9Sf1klPjNfFAuWDjKLwTIJJ/VxtoTwIR6hnZxcEOQCZg2oIL3MWBYw5GpUDKOEnND7LXTbIpQ03Q==",
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/es6-promise": {
+      "version": "4.2.8",
+      "resolved": "https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz",
+      "integrity": "sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w=="
+    },
+    "node_modules/es6-promisify": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/es6-promisify/-/es6-promisify-5.0.0.tgz",
+      "integrity": "sha512-C+d6UdsYDk0lMebHNR4S2NybQMMngAOnOwYBQjTOiv0MkoJMP0Myw2mgpDLBcpfCmRLxyFqYhS/CfOENq4SJhQ==",
+      "dependencies": {
+        "es6-promise": "^4.0.3"
+      }
+    },
+    "node_modules/eventemitter3": {
+      "version": "4.0.7",
+      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
+      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw=="
+    },
+    "node_modules/eyes": {
+      "version": "0.1.8",
+      "resolved": "https://registry.npmjs.org/eyes/-/eyes-0.1.8.tgz",
+      "integrity": "sha512-GipyPsXO1anza0AOZdy69Im7hGFCNB7Y/NGjDlZGJ3GJJLtwNSb2vrzYrTYJRrRloVx7pl+bhUaTB8yiccPvFQ==",
+      "engines": {
+        "node": "> 0.1.90"
+      }
+    },
+    "node_modules/fast-stable-stringify": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/fast-stable-stringify/-/fast-stable-stringify-1.0.0.tgz",
+      "integrity": "sha512-wpYMUmFu5f00Sm0cj2pfivpmawLZ0NKdviQ4w9zJeR8JVtOpOxHmLaJuj0vxvGqMJQWyP/COUkF75/57OKyRag=="
+    },
+    "node_modules/fastestsmallesttextencoderdecoder": {
+      "version": "1.0.22",
+      "resolved": "https://registry.npmjs.org/fastestsmallesttextencoderdecoder/-/fastestsmallesttextencoderdecoder-1.0.22.tgz",
+      "integrity": "sha512-Pb8d48e+oIuY4MaM64Cd7OW1gt4nxCHs7/ddPPZ/Ic3sg8yVGM7O9wDvZ7us6ScaUupzM+pfBolwtYhN1IxBIw==",
+      "peer": true
+    },
+    "node_modules/fecha": {
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/fecha/-/fecha-4.2.3.tgz",
+      "integrity": "sha512-OP2IUU6HeYKJi3i0z4A19kHMQoLVs4Hc+DPqqxI2h/DPZHTm/vjsfC6P0b4jCMy14XizLBqvndQ+UilD7707Jw=="
+    },
+    "node_modules/file-uri-to-path": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/file-uri-to-path/-/file-uri-to-path-1.0.0.tgz",
+      "integrity": "sha512-0Zt+s3L7Vf1biwWZ29aARiVYLx7iMGnEUl9x33fbB/j3jR81u/O2LbqK+Bm1CDSNDKVtJ/YjwY7TUd5SkeLQLw=="
+    },
+    "node_modules/find": {
+      "version": "0.3.0",
+      "resolved": "https://registry.npmjs.org/find/-/find-0.3.0.tgz",
+      "integrity": "sha512-iSd+O4OEYV/I36Zl8MdYJO0xD82wH528SaCieTVHhclgiYNe9y+yPKSwK+A7/WsmHL1EZ+pYUJBXWTL5qofksw==",
+      "dependencies": {
+        "traverse-chain": "~0.1.0"
+      }
+    },
+    "node_modules/follow-redirects": {
+      "version": "1.15.4",
+      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.4.tgz",
+      "integrity": "sha512-Cr4D/5wlrb0z9dgERpUL3LrmPKVDsETIJhaCMeDfuFYcqa5bldGV6wBsAN6X/vxlXQtFBMrXdXxdL8CbDTGniw==",
+      "funding": [
+        {
+          "type": "individual",
+          "url": "https://github.com/sponsors/RubenVerborgh"
+        }
+      ],
+      "engines": {
+        "node": ">=4.0"
+      },
+      "peerDependenciesMeta": {
+        "debug": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/form-data": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
+      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
+      "dependencies": {
+        "asynckit": "^0.4.0",
+        "combined-stream": "^1.0.8",
+        "mime-types": "^2.1.12"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/humanize-ms": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/humanize-ms/-/humanize-ms-1.2.1.tgz",
+      "integrity": "sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==",
+      "dependencies": {
+        "ms": "^2.0.0"
+      }
+    },
+    "node_modules/ieee754": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
+      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ]
+    },
+    "node_modules/isomorphic-ws": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/isomorphic-ws/-/isomorphic-ws-4.0.1.tgz",
+      "integrity": "sha512-BhBvN2MBpWTaSHdWRb/bwdZJ1WaehQ2L1KngkCkfLUGF0mAWAT1sQUQacEmQ0jXkFw/czDXPNQSL5u2/Krsz1w==",
+      "peerDependencies": {
+        "ws": "*"
+      }
+    },
+    "node_modules/jayson": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/jayson/-/jayson-4.1.0.tgz",
+      "integrity": "sha512-R6JlbyLN53Mjku329XoRT2zJAE6ZgOQ8f91ucYdMCD4nkGCF9kZSrcGXpHIU4jeKj58zUZke2p+cdQchU7Ly7A==",
+      "dependencies": {
+        "@types/connect": "^3.4.33",
+        "@types/node": "^12.12.54",
+        "@types/ws": "^7.4.4",
+        "commander": "^2.20.3",
+        "delay": "^5.0.0",
+        "es6-promisify": "^5.0.0",
+        "eyes": "^0.1.8",
+        "isomorphic-ws": "^4.0.1",
+        "json-stringify-safe": "^5.0.1",
+        "JSONStream": "^1.3.5",
+        "uuid": "^8.3.2",
+        "ws": "^7.4.5"
+      },
+      "bin": {
+        "jayson": "bin/jayson.js"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/js-sha256": {
+      "version": "0.9.0",
+      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
+      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
+    },
+    "node_modules/json-stringify-safe": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
+      "integrity": "sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA=="
+    },
+    "node_modules/jsonparse": {
+      "version": "1.3.1",
+      "resolved": "https://registry.npmjs.org/jsonparse/-/jsonparse-1.3.1.tgz",
+      "integrity": "sha512-POQXvpdL69+CluYsillJ7SUhKvytYjW9vG/GKpnf+xP8UWgYEM/RaMzHHofbALDiKbbP1W8UEYmgGl39WkPZsg==",
+      "engines": [
+        "node >= 0.2.0"
+      ]
+    },
+    "node_modules/JSONStream": {
+      "version": "1.3.5",
+      "resolved": "https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.5.tgz",
+      "integrity": "sha512-E+iruNOY8VV9s4JEbe1aNEm6MiszPRr/UfcHMz0TQh1BXSxHK+ASV1R6W4HpjBhSeS+54PIsAMCBmwD06LLsqQ==",
+      "dependencies": {
+        "jsonparse": "^1.2.0",
+        "through": ">=2.2.7 <3"
+      },
+      "bin": {
+        "JSONStream": "bin.js"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/lodash": {
+      "version": "4.17.21",
+      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
+      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
+    },
+    "node_modules/lower-case": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/lower-case/-/lower-case-2.0.2.tgz",
+      "integrity": "sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==",
+      "dependencies": {
+        "tslib": "^2.0.3"
+      }
+    },
+    "node_modules/mime-db": {
+      "version": "1.52.0",
+      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
+      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/mime-types": {
+      "version": "2.1.35",
+      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
+      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
+      "dependencies": {
+        "mime-db": "1.52.0"
+      },
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/ms": {
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
+    },
+    "node_modules/no-case": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/no-case/-/no-case-3.0.4.tgz",
+      "integrity": "sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==",
+      "dependencies": {
+        "lower-case": "^2.0.2",
+        "tslib": "^2.0.3"
+      }
+    },
+    "node_modules/node": {
+      "version": "21.2.0",
+      "resolved": "https://registry.npmjs.org/node/-/node-21.2.0.tgz",
+      "integrity": "sha512-oiHX7SXGdO1wyg0/lZ1ZMy1iS7GgumsT5Ptt5BOye1WniC8OJ2TtYRuWfqNoKrUlYzI4+Bv1+NH5eDgxuThU2A==",
+      "hasInstallScript": true,
+      "dependencies": {
+        "node-bin-setup": "^1.0.0"
+      },
+      "bin": {
+        "node": "bin/node"
+      },
+      "engines": {
+        "npm": ">=5.0.0"
+      }
+    },
+    "node_modules/node-bin-setup": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/node-bin-setup/-/node-bin-setup-1.1.3.tgz",
+      "integrity": "sha512-opgw9iSCAzT2+6wJOETCpeRYAQxSopqQ2z+N6BXwIMsQQ7Zj5M8MaafQY8JMlolRR6R1UXg2WmhKp0p9lSOivg=="
+    },
+    "node_modules/node-fetch": {
+      "version": "2.7.0",
+      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
+      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
+      "dependencies": {
+        "whatwg-url": "^5.0.0"
+      },
+      "engines": {
+        "node": "4.x || >=6.0.0"
+      },
+      "peerDependencies": {
+        "encoding": "^0.1.0"
+      },
+      "peerDependenciesMeta": {
+        "encoding": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/node-gyp-build": {
+      "version": "4.7.1",
+      "resolved": "https://registry.npmjs.org/node-gyp-build/-/node-gyp-build-4.7.1.tgz",
+      "integrity": "sha512-wTSrZ+8lsRRa3I3H8Xr65dLWSgCvY2l4AOnaeKdPA9TB/WYMPaTcrzf3rXvFoVvjKNVnu0CcWSx54qq9GKRUYg==",
+      "optional": true,
+      "bin": {
+        "node-gyp-build": "bin.js",
+        "node-gyp-build-optional": "optional.js",
+        "node-gyp-build-test": "build-test.js"
+      }
+    },
+    "node_modules/pako": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/pako/-/pako-2.1.0.tgz",
+      "integrity": "sha512-w+eufiZ1WuJYgPXbV/PO3NCMEc3xqylkKHzp8bxp1uW4qaSNQUkwmLLEc3kKsfz8lpV1F8Ht3U1Cm+9Srog2ug=="
+    },
+    "node_modules/proxy-from-env": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
+      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
+    },
+    "node_modules/regenerator-runtime": {
+      "version": "0.14.1",
+      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.14.1.tgz",
+      "integrity": "sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw=="
+    },
+    "node_modules/rpc-websockets": {
+      "version": "7.9.0",
+      "resolved": "https://registry.npmjs.org/rpc-websockets/-/rpc-websockets-7.9.0.tgz",
+      "integrity": "sha512-DwKewQz1IUA5wfLvgM8wDpPRcr+nWSxuFxx5CbrI2z/MyyZ4nXLM86TvIA+cI1ZAdqC8JIBR1mZR55dzaLU+Hw==",
+      "dependencies": {
+        "@babel/runtime": "^7.17.2",
+        "eventemitter3": "^4.0.7",
+        "uuid": "^8.3.2",
+        "ws": "^8.5.0"
+      },
+      "funding": {
+        "type": "paypal",
+        "url": "https://paypal.me/kozjak"
+      },
+      "optionalDependencies": {
+        "bufferutil": "^4.0.1",
+        "utf-8-validate": "^5.0.2"
+      }
+    },
+    "node_modules/rpc-websockets/node_modules/ws": {
+      "version": "8.16.0",
+      "resolved": "https://registry.npmjs.org/ws/-/ws-8.16.0.tgz",
+      "integrity": "sha512-HS0c//TP7Ina87TfiPUz1rQzMhHrl/SG2guqRcTOIUYD2q8uhUdNHZYJUaQ8aTGPzCh+c6oawMKW35nFl1dxyQ==",
+      "engines": {
+        "node": ">=10.0.0"
+      },
+      "peerDependencies": {
+        "bufferutil": "^4.0.1",
+        "utf-8-validate": ">=5.0.2"
+      },
+      "peerDependenciesMeta": {
+        "bufferutil": {
+          "optional": true
+        },
+        "utf-8-validate": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/safe-buffer": {
+      "version": "5.2.1",
+      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
+      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ]
+    },
+    "node_modules/snake-case": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/snake-case/-/snake-case-3.0.4.tgz",
+      "integrity": "sha512-LAOh4z89bGQvl9pFfNF8V146i7o7/CqFPbqzYgP+yYzDIDeS9HaNFtXABamRW+AQzEVODcvE79ljJ+8a9YSdMg==",
+      "dependencies": {
+        "dot-case": "^3.0.4",
+        "tslib": "^2.0.3"
+      }
+    },
+    "node_modules/superstruct": {
+      "version": "0.14.2",
+      "resolved": "https://registry.npmjs.org/superstruct/-/superstruct-0.14.2.tgz",
+      "integrity": "sha512-nPewA6m9mR3d6k7WkZ8N8zpTWfenFH3q9pA2PkuiZxINr9DKB2+40wEQf0ixn8VaGuJ78AB6iWOtStI+/4FKZQ=="
+    },
+    "node_modules/text-encoding-utf-8": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
+      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
+    },
+    "node_modules/through": {
+      "version": "2.3.8",
+      "resolved": "https://registry.npmjs.org/through/-/through-2.3.8.tgz",
+      "integrity": "sha512-w89qg7PI8wAdvX60bMDP+bFoD5Dvhm9oLheFp5O4a2QF0cSBGsBX4qZmadPMvVqlLJBBci+WqGGOAPvcDeNSVg=="
+    },
+    "node_modules/toformat": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/toformat/-/toformat-2.0.0.tgz",
+      "integrity": "sha512-03SWBVop6nU8bpyZCx7SodpYznbZF5R4ljwNLBcTQzKOD9xuihRo/psX58llS1BMFhhAI08H3luot5GoXJz2pQ=="
+    },
+    "node_modules/toml": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/toml/-/toml-3.0.0.tgz",
+      "integrity": "sha512-y/mWCZinnvxjTKYhJ+pYxwD0mRLVvOtdS2Awbgxln6iEnt4rk0yBxeSBHkGJcPucRiG0e55mwWp+g/05rsrd6w=="
+    },
+    "node_modules/tr46": {
+      "version": "0.0.3",
+      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
+      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
+    },
+    "node_modules/traverse-chain": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/traverse-chain/-/traverse-chain-0.1.0.tgz",
+      "integrity": "sha512-up6Yvai4PYKhpNp5PkYtx50m3KbwQrqDwbuZP/ItyL64YEWHAvH6Md83LFLV/GRSk/BoUVwwgUzX6SOQSbsfAg=="
+    },
+    "node_modules/tslib": {
+      "version": "2.6.2",
+      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.6.2.tgz",
+      "integrity": "sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q=="
+    },
+    "node_modules/utf-8-validate": {
+      "version": "5.0.10",
+      "resolved": "https://registry.npmjs.org/utf-8-validate/-/utf-8-validate-5.0.10.tgz",
+      "integrity": "sha512-Z6czzLq4u8fPOyx7TU6X3dvUZVvoJmxSQ+IcrlmagKhilxlhZgxPK6C5Jqbkw1IDUmFTM+cz9QDnnLTwDz/2gQ==",
+      "hasInstallScript": true,
+      "optional": true,
+      "dependencies": {
+        "node-gyp-build": "^4.3.0"
+      },
+      "engines": {
+        "node": ">=6.14.2"
+      }
+    },
+    "node_modules/uuid": {
+      "version": "8.3.2",
+      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
+      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
+      "bin": {
+        "uuid": "dist/bin/uuid"
+      }
+    },
+    "node_modules/webidl-conversions": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
+      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
+    },
+    "node_modules/whatwg-url": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
+      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
+      "dependencies": {
+        "tr46": "~0.0.3",
+        "webidl-conversions": "^3.0.0"
+      }
+    },
+    "node_modules/ws": {
+      "version": "7.5.9",
+      "resolved": "https://registry.npmjs.org/ws/-/ws-7.5.9.tgz",
+      "integrity": "sha512-F+P9Jil7UiSKSkppIiD94dN07AwvFixvLIj1Og1Rl9GGMuNipJnV9JzjD6XuqmAeiswGvUmNLjr5cFuXwNS77Q==",
+      "engines": {
+        "node": ">=8.3.0"
+      },
+      "peerDependencies": {
+        "bufferutil": "^4.0.1",
+        "utf-8-validate": "^5.0.2"
+      },
+      "peerDependenciesMeta": {
+        "bufferutil": {
+          "optional": true
+        },
+        "utf-8-validate": {
+          "optional": true
+        }
+      }
+    }
+  },
+  "dependencies": {
+    "@babel/runtime": {
+      "version": "7.23.7",
+      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.23.7.tgz",
+      "integrity": "sha512-w06OXVOFso7LcbzMiDGt+3X7Rh7Ho8MmgPoWU3rarH+8upf+wSU/grlGbWzQyr3DkdN6ZeuMFjpdwW0Q+HxobA==",
+      "requires": {
+        "regenerator-runtime": "^0.14.0"
+      }
+    },
+    "@noble/curves": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/@noble/curves/-/curves-1.3.0.tgz",
+      "integrity": "sha512-t01iSXPuN+Eqzb4eBX0S5oubSqXbK/xXa1Ne18Hj8f9pStxztHCE2gfboSp/dZRLSqfuLpRK2nDXDK+W9puocA==",
+      "requires": {
+        "@noble/hashes": "1.3.3"
+      }
+    },
+    "@noble/hashes": {
+      "version": "1.3.3",
+      "resolved": "https://registry.npmjs.org/@noble/hashes/-/hashes-1.3.3.tgz",
+      "integrity": "sha512-V7/fPHgl+jsVPXqqeOzT8egNj2iBIVt+ECeMMG8TdcnTikP3oaBtUVqpT/gYCR68aEBJSF+XbYUxStjbFMqIIA=="
+    },
+    "@openbook-dex/openbook": {
+      "version": "0.0.9",
+      "resolved": "https://registry.npmjs.org/@openbook-dex/openbook/-/openbook-0.0.9.tgz",
+      "integrity": "sha512-tJPqHS7Tp/Gu3MC/MAZQBUm62WhdBPLzCcId3p62eHV6cRwNqflr0j+eKDh0Lfd5CAnkB1a9wZoVte074+zB5A==",
+      "requires": {
+        "@project-serum/anchor": "^0.11.1",
+        "@solana/spl-token": "^0.1.6",
+        "@solana/web3.js": "^1.70.0",
+        "bn.js": "^5.2.1",
+        "buffer-layout": "^1.2.0"
+      },
+      "dependencies": {
+        "@solana/spl-token": {
+          "version": "0.1.8",
+          "resolved": "https://registry.npmjs.org/@solana/spl-token/-/spl-token-0.1.8.tgz",
+          "integrity": "sha512-LZmYCKcPQDtJgecvWOgT/cnoIQPWjdH+QVyzPcFvyDUiT0DiRjZaam4aqNUyvchLFhzgunv3d9xOoyE34ofdoQ==",
+          "requires": {
+            "@babel/runtime": "^7.10.5",
+            "@solana/web3.js": "^1.21.0",
+            "bn.js": "^5.1.0",
+            "buffer": "6.0.3",
+            "buffer-layout": "^1.2.0",
+            "dotenv": "10.0.0"
+          }
+        }
+      }
+    },
+    "@project-serum/anchor": {
+      "version": "0.11.1",
+      "resolved": "https://registry.npmjs.org/@project-serum/anchor/-/anchor-0.11.1.tgz",
+      "integrity": "sha512-oIdm4vTJkUy6GmE6JgqDAuQPKI7XM4TPJkjtoIzp69RZe0iAD9JP2XHx7lV1jLdYXeYHqDXfBt3zcq7W91K6PA==",
+      "requires": {
+        "@project-serum/borsh": "^0.2.2",
+        "@solana/web3.js": "^1.17.0",
+        "base64-js": "^1.5.1",
+        "bn.js": "^5.1.2",
+        "bs58": "^4.0.1",
+        "buffer-layout": "^1.2.0",
+        "camelcase": "^5.3.1",
+        "crypto-hash": "^1.3.0",
+        "eventemitter3": "^4.0.7",
+        "find": "^0.3.0",
+        "js-sha256": "^0.9.0",
+        "pako": "^2.0.3",
+        "snake-case": "^3.0.4",
+        "toml": "^3.0.0"
+      }
+    },
+    "@project-serum/borsh": {
+      "version": "0.2.5",
+      "resolved": "https://registry.npmjs.org/@project-serum/borsh/-/borsh-0.2.5.tgz",
+      "integrity": "sha512-UmeUkUoKdQ7rhx6Leve1SssMR/Ghv8qrEiyywyxSWg7ooV7StdpPBhciiy5eB3T0qU1BXvdRNC8TdrkxK7WC5Q==",
+      "requires": {
+        "bn.js": "^5.1.2",
+        "buffer-layout": "^1.2.0"
+      }
+    },
+    "@raydium-io/raydium-sdk": {
+      "version": "1.3.1-beta.46",
+      "resolved": "https://registry.npmjs.org/@raydium-io/raydium-sdk/-/raydium-sdk-1.3.1-beta.46.tgz",
+      "integrity": "sha512-hGieqaCeqszEJGRBbNNveXlZk8EIsjV9PTwodx8SWABu1ZZODE8SGRe5Vuq9Jtv1LZzL7jY3+P5UnQxrdQLQUA==",
+      "requires": {
+        "@solana/buffer-layout": "^4.0.1",
+        "@solana/spl-token": "^0.3.9",
+        "axios": "^1.6.2",
+        "big.js": "^6.2.1",
+        "bn.js": "^5.2.1",
+        "decimal.js": "^10.4.3",
+        "decimal.js-light": "^2.5.1",
+        "fecha": "^4.2.3",
+        "lodash": "^4.17.21",
+        "toformat": "^2.0.0"
+      }
+    },
+    "@solana/buffer-layout": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/@solana/buffer-layout/-/buffer-layout-4.0.1.tgz",
+      "integrity": "sha512-E1ImOIAD1tBZFRdjeM4/pzTiTApC0AOBGwyAMS4fwIodCWArzJ3DWdoh8cKxeFM2fElkxBh2Aqts1BPC373rHA==",
+      "requires": {
+        "buffer": "~6.0.3"
+      }
+    },
+    "@solana/buffer-layout-utils": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/@solana/buffer-layout-utils/-/buffer-layout-utils-0.2.0.tgz",
+      "integrity": "sha512-szG4sxgJGktbuZYDg2FfNmkMi0DYQoVjN2h7ta1W1hPrwzarcFLBq9UpX1UjNXsNpT9dn+chgprtWGioUAr4/g==",
+      "requires": {
+        "@solana/buffer-layout": "^4.0.0",
+        "@solana/web3.js": "^1.32.0",
+        "bigint-buffer": "^1.1.5",
+        "bignumber.js": "^9.0.1"
+      }
+    },
+    "@solana/codecs-core": {
+      "version": "2.0.0-experimental.8618508",
+      "resolved": "https://registry.npmjs.org/@solana/codecs-core/-/codecs-core-2.0.0-experimental.8618508.tgz",
+      "integrity": "sha512-JCz7mKjVKtfZxkuDtwMAUgA7YvJcA2BwpZaA1NOLcted4OMC4Prwa3DUe3f3181ixPYaRyptbF0Ikq2MbDkYEA=="
+    },
+    "@solana/codecs-data-structures": {
+      "version": "2.0.0-experimental.8618508",
+      "resolved": "https://registry.npmjs.org/@solana/codecs-data-structures/-/codecs-data-structures-2.0.0-experimental.8618508.tgz",
+      "integrity": "sha512-sLpjL9sqzaDdkloBPV61Rht1tgaKq98BCtIKRuyscIrmVPu3wu0Bavk2n/QekmUzaTsj7K1pVSniM0YqCdnEBw==",
+      "requires": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
+      }
+    },
+    "@solana/codecs-numbers": {
+      "version": "2.0.0-experimental.8618508",
+      "resolved": "https://registry.npmjs.org/@solana/codecs-numbers/-/codecs-numbers-2.0.0-experimental.8618508.tgz",
+      "integrity": "sha512-EXQKfzFr3CkKKNzKSZPOOOzchXsFe90TVONWsSnVkonO9z+nGKALE0/L9uBmIFGgdzhhU9QQVFvxBMclIDJo2Q==",
+      "requires": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508"
+      }
+    },
+    "@solana/codecs-strings": {
+      "version": "2.0.0-experimental.8618508",
+      "resolved": "https://registry.npmjs.org/@solana/codecs-strings/-/codecs-strings-2.0.0-experimental.8618508.tgz",
+      "integrity": "sha512-b2yhinr1+oe+JDmnnsV0641KQqqDG8AQ16Z/x7GVWO+AWHMpRlHWVXOq8U1yhPMA4VXxl7i+D+C6ql0VGFp0GA==",
+      "requires": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
+      }
+    },
+    "@solana/options": {
+      "version": "2.0.0-experimental.8618508",
+      "resolved": "https://registry.npmjs.org/@solana/options/-/options-2.0.0-experimental.8618508.tgz",
+      "integrity": "sha512-fy/nIRAMC3QHvnKi63KEd86Xr/zFBVxNW4nEpVEU2OT0gCEKwHY4Z55YHf7XujhyuM3PNpiBKg/YYw5QlRU4vg==",
+      "requires": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
+      }
+    },
+    "@solana/spl-token": {
+      "version": "0.3.11",
+      "resolved": "https://registry.npmjs.org/@solana/spl-token/-/spl-token-0.3.11.tgz",
+      "integrity": "sha512-bvohO3rIMSVL24Pb+I4EYTJ6cL82eFpInEXD/I8K8upOGjpqHsKUoAempR/RnUlI1qSFNyFlWJfu6MNUgfbCQQ==",
+      "requires": {
+        "@solana/buffer-layout": "^4.0.0",
+        "@solana/buffer-layout-utils": "^0.2.0",
+        "@solana/spl-token-metadata": "^0.1.2",
+        "buffer": "^6.0.3"
+      }
+    },
+    "@solana/spl-token-metadata": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/@solana/spl-token-metadata/-/spl-token-metadata-0.1.2.tgz",
+      "integrity": "sha512-hJYnAJNkDrtkE2Q41YZhCpeOGU/0JgRFXbtrtOuGGeKc3pkEUHB9DDoxZAxx+XRno13GozUleyBi0qypz4c3bw==",
+      "requires": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-data-structures": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508",
+        "@solana/codecs-strings": "2.0.0-experimental.8618508",
+        "@solana/options": "2.0.0-experimental.8618508",
+        "@solana/spl-type-length-value": "0.1.0"
+      }
+    },
+    "@solana/spl-type-length-value": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/@solana/spl-type-length-value/-/spl-type-length-value-0.1.0.tgz",
+      "integrity": "sha512-JBMGB0oR4lPttOZ5XiUGyvylwLQjt1CPJa6qQ5oM+MBCndfjz2TKKkw0eATlLLcYmq1jBVsNlJ2cD6ns2GR7lA==",
+      "requires": {
+        "buffer": "^6.0.3"
+      }
+    },
+    "@solana/web3.js": {
+      "version": "1.89.1",
+      "resolved": "https://registry.npmjs.org/@solana/web3.js/-/web3.js-1.89.1.tgz",
+      "integrity": "sha512-t9TTLtPQxtQB3SAf/5E8xPXfVDsC6WGOsgKY02l2cbe0HLymT7ynE8Hu48Lk5qynHCquj6nhISfEHcjMkYpu/A==",
+      "requires": {
+        "@babel/runtime": "^7.23.4",
+        "@noble/curves": "^1.2.0",
+        "@noble/hashes": "^1.3.2",
+        "@solana/buffer-layout": "^4.0.1",
+        "agentkeepalive": "^4.5.0",
+        "bigint-buffer": "^1.1.5",
+        "bn.js": "^5.2.1",
+        "borsh": "^0.7.0",
+        "bs58": "^4.0.1",
+        "buffer": "6.0.3",
+        "fast-stable-stringify": "^1.0.0",
+        "jayson": "^4.1.0",
+        "node-fetch": "^2.7.0",
+        "rpc-websockets": "^7.5.1",
+        "superstruct": "^0.14.2"
+      },
+      "dependencies": {
+        "borsh": {
+          "version": "0.7.0",
+          "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.7.0.tgz",
+          "integrity": "sha512-CLCsZGIBCFnPtkNnieW/a8wmreDmfUtjU2m9yHrzPXIlNbqVs0AQrSatSG6vdNYUqdc83tkQi2eHfF98ubzQLA==",
+          "requires": {
+            "bn.js": "^5.2.0",
+            "bs58": "^4.0.0",
+            "text-encoding-utf-8": "^1.0.2"
+          }
+        }
+      }
+    },
+    "@types/connect": {
+      "version": "3.4.38",
+      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
+      "integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
+      "requires": {
+        "@types/node": "*"
+      }
+    },
+    "@types/node": {
+      "version": "12.20.55",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-12.20.55.tgz",
+      "integrity": "sha512-J8xLz7q2OFulZ2cyGTLE1TbbZcjpno7FaN6zdJNrgAdrJ+DZzh/uFR6YrTb4C+nXakvud8Q4+rbhoIWlYQbUFQ=="
+    },
+    "@types/ws": {
+      "version": "7.4.7",
+      "resolved": "https://registry.npmjs.org/@types/ws/-/ws-7.4.7.tgz",
+      "integrity": "sha512-JQbbmxZTZehdc2iszGKs5oC3NFnjeay7mtAWrdt7qNtAVK0g19muApzAy4bm9byz79xa2ZnO/BOBC2R8RC5Lww==",
+      "requires": {
+        "@types/node": "*"
+      }
+    },
+    "agentkeepalive": {
+      "version": "4.5.0",
+      "resolved": "https://registry.npmjs.org/agentkeepalive/-/agentkeepalive-4.5.0.tgz",
+      "integrity": "sha512-5GG/5IbQQpC9FpkRGsSvZI5QYeSCzlJHdpBQntCsuTOxhKD8lqKhrleg2Yi7yvMIf82Ycmmqln9U8V9qwEiJew==",
+      "requires": {
+        "humanize-ms": "^1.2.1"
+      }
+    },
+    "asynckit": {
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
+      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="
+    },
+    "axios": {
+      "version": "1.6.4",
+      "resolved": "https://registry.npmjs.org/axios/-/axios-1.6.4.tgz",
+      "integrity": "sha512-heJnIs6N4aa1eSthhN9M5ioILu8Wi8vmQW9iHQ9NUvfkJb0lEEDUiIdQNAuBtfUt3FxReaKdpQA5DbmMOqzF/A==",
+      "requires": {
+        "follow-redirects": "^1.15.4",
+        "form-data": "^4.0.0",
+        "proxy-from-env": "^1.1.0"
+      }
+    },
+    "base-x": {
+      "version": "3.0.9",
+      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
+      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
+      "requires": {
+        "safe-buffer": "^5.0.1"
+      }
+    },
+    "base64-js": {
+      "version": "1.5.1",
+      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
+      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA=="
+    },
+    "big.js": {
+      "version": "6.2.1",
+      "resolved": "https://registry.npmjs.org/big.js/-/big.js-6.2.1.tgz",
+      "integrity": "sha512-bCtHMwL9LeDIozFn+oNhhFoq+yQ3BNdnsLSASUxLciOb1vgvpHsIO1dsENiGMgbb4SkP5TrzWzRiLddn8ahVOQ=="
+    },
+    "bigint-buffer": {
+      "version": "1.1.5",
+      "resolved": "https://registry.npmjs.org/bigint-buffer/-/bigint-buffer-1.1.5.tgz",
+      "integrity": "sha512-trfYco6AoZ+rKhKnxA0hgX0HAbVP/s808/EuDSe2JDzUnCp/xAsli35Orvk67UrTEcwuxZqYZDmfA2RXJgxVvA==",
+      "requires": {
+        "bindings": "^1.3.0"
+      }
+    },
+    "bignumber.js": {
+      "version": "9.1.2",
+      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.1.2.tgz",
+      "integrity": "sha512-2/mKyZH9K85bzOEfhXDBFZTGd1CTs+5IHpeFQo9luiBG7hghdC851Pj2WAhb6E3R6b9tZj/XKhbg4fum+Kepug=="
+    },
+    "bindings": {
+      "version": "1.5.0",
+      "resolved": "https://registry.npmjs.org/bindings/-/bindings-1.5.0.tgz",
+      "integrity": "sha512-p2q/t/mhvuOj/UeLlV6566GD/guowlr0hHxClI0W9m7MWYkL1F0hLo+0Aexs9HSPCtR1SXQ0TD3MMKrXZajbiQ==",
+      "requires": {
+        "file-uri-to-path": "1.0.0"
+      }
+    },
+    "bn.js": {
+      "version": "5.2.1",
+      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.1.tgz",
+      "integrity": "sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ=="
+    },
+    "borsh": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/borsh/-/borsh-2.0.0.tgz",
+      "integrity": "sha512-kc9+BgR3zz9+cjbwM8ODoUB4fs3X3I5A/HtX7LZKxCLaMrEeDFoBpnhZY//DTS1VZBSs6S5v46RZRbZjRFspEg=="
+    },
+    "bs58": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
+      "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
+      "requires": {
+        "base-x": "^3.0.2"
+      }
+    },
+    "bs64": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/bs64/-/bs64-0.1.0.tgz",
+      "integrity": "sha512-0rK20fzECR6FFR2VRhvDOUTlPmWFS8PddRtk9KNqsfj9S8++WHSDKzf0f9S/89sthwBg+bEgFitRLEC6COTi8Q==",
+      "requires": {
+        "convert-string": "~0.1.0"
+      }
+    },
+    "buffer": {
+      "version": "6.0.3",
+      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
+      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
+      "requires": {
+        "base64-js": "^1.3.1",
+        "ieee754": "^1.2.1"
+      }
+    },
+    "buffer-layout": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/buffer-layout/-/buffer-layout-1.2.2.tgz",
+      "integrity": "sha512-kWSuLN694+KTk8SrYvCqwP2WcgQjoRCiF5b4QDvkkz8EmgD+aWAIceGFKMIAdmF/pH+vpgNV3d3kAKorcdAmWA=="
+    },
+    "bufferutil": {
+      "version": "4.0.8",
+      "resolved": "https://registry.npmjs.org/bufferutil/-/bufferutil-4.0.8.tgz",
+      "integrity": "sha512-4T53u4PdgsXqKaIctwF8ifXlRTTmEPJ8iEPWFdGZvcf7sbwYo6FKFEX9eNNAnzFZ7EzJAQ3CJeOtCRA4rDp7Pw==",
+      "optional": true,
+      "requires": {
+        "node-gyp-build": "^4.3.0"
+      }
+    },
+    "camelcase": {
+      "version": "5.3.1",
+      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
+      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg=="
+    },
+    "combined-stream": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
+      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
+      "requires": {
+        "delayed-stream": "~1.0.0"
+      }
+    },
+    "commander": {
+      "version": "2.20.3",
+      "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
+      "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ=="
+    },
+    "convert-string": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/convert-string/-/convert-string-0.1.0.tgz",
+      "integrity": "sha512-1KX9ESmtl8xpT2LN2tFnKSbV4NiarbVi8DVb39ZriijvtTklyrT+4dT1wsGMHKD3CJUjXgvJzstm9qL9ICojGA=="
+    },
+    "crypto-hash": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/crypto-hash/-/crypto-hash-1.3.0.tgz",
+      "integrity": "sha512-lyAZ0EMyjDkVvz8WOeVnuCPvKVBXcMv1l5SVqO1yC7PzTwrD/pPje/BIRbWhMoPe436U+Y2nD7f5bFx0kt+Sbg=="
+    },
+    "decimal.js": {
+      "version": "10.4.3",
+      "resolved": "https://registry.npmjs.org/decimal.js/-/decimal.js-10.4.3.tgz",
+      "integrity": "sha512-VBBaLc1MgL5XpzgIP7ny5Z6Nx3UrRkIViUkPUdtl9aya5amy3De1gsUUSB1g3+3sExYNjCAsAznmukyxCb1GRA=="
+    },
+    "decimal.js-light": {
+      "version": "2.5.1",
+      "resolved": "https://registry.npmjs.org/decimal.js-light/-/decimal.js-light-2.5.1.tgz",
+      "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg=="
+    },
+    "delay": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/delay/-/delay-5.0.0.tgz",
+      "integrity": "sha512-ReEBKkIfe4ya47wlPYf/gu5ib6yUG0/Aez0JQZQz94kiWtRQvZIQbTiehsnwHvLSWJnQdhVeqYue7Id1dKr0qw=="
+    },
+    "delayed-stream": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
+      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ=="
+    },
+    "dot-case": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/dot-case/-/dot-case-3.0.4.tgz",
+      "integrity": "sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w==",
+      "requires": {
+        "no-case": "^3.0.4",
+        "tslib": "^2.0.3"
+      }
+    },
+    "dotenv": {
+      "version": "10.0.0",
+      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-10.0.0.tgz",
+      "integrity": "sha512-rlBi9d8jpv9Sf1klPjNfFAuWDjKLwTIJJ/VxtoTwIR6hnZxcEOQCZg2oIL3MWBYw5GpUDKOEnND7LXTbIpQ03Q=="
+    },
+    "es6-promise": {
+      "version": "4.2.8",
+      "resolved": "https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz",
+      "integrity": "sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w=="
+    },
+    "es6-promisify": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/es6-promisify/-/es6-promisify-5.0.0.tgz",
+      "integrity": "sha512-C+d6UdsYDk0lMebHNR4S2NybQMMngAOnOwYBQjTOiv0MkoJMP0Myw2mgpDLBcpfCmRLxyFqYhS/CfOENq4SJhQ==",
+      "requires": {
+        "es6-promise": "^4.0.3"
+      }
+    },
+    "eventemitter3": {
+      "version": "4.0.7",
+      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
+      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw=="
+    },
+    "eyes": {
+      "version": "0.1.8",
+      "resolved": "https://registry.npmjs.org/eyes/-/eyes-0.1.8.tgz",
+      "integrity": "sha512-GipyPsXO1anza0AOZdy69Im7hGFCNB7Y/NGjDlZGJ3GJJLtwNSb2vrzYrTYJRrRloVx7pl+bhUaTB8yiccPvFQ=="
+    },
+    "fast-stable-stringify": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/fast-stable-stringify/-/fast-stable-stringify-1.0.0.tgz",
+      "integrity": "sha512-wpYMUmFu5f00Sm0cj2pfivpmawLZ0NKdviQ4w9zJeR8JVtOpOxHmLaJuj0vxvGqMJQWyP/COUkF75/57OKyRag=="
+    },
+    "fastestsmallesttextencoderdecoder": {
+      "version": "1.0.22",
+      "resolved": "https://registry.npmjs.org/fastestsmallesttextencoderdecoder/-/fastestsmallesttextencoderdecoder-1.0.22.tgz",
+      "integrity": "sha512-Pb8d48e+oIuY4MaM64Cd7OW1gt4nxCHs7/ddPPZ/Ic3sg8yVGM7O9wDvZ7us6ScaUupzM+pfBolwtYhN1IxBIw==",
+      "peer": true
+    },
+    "fecha": {
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/fecha/-/fecha-4.2.3.tgz",
+      "integrity": "sha512-OP2IUU6HeYKJi3i0z4A19kHMQoLVs4Hc+DPqqxI2h/DPZHTm/vjsfC6P0b4jCMy14XizLBqvndQ+UilD7707Jw=="
+    },
+    "file-uri-to-path": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/file-uri-to-path/-/file-uri-to-path-1.0.0.tgz",
+      "integrity": "sha512-0Zt+s3L7Vf1biwWZ29aARiVYLx7iMGnEUl9x33fbB/j3jR81u/O2LbqK+Bm1CDSNDKVtJ/YjwY7TUd5SkeLQLw=="
+    },
+    "find": {
+      "version": "0.3.0",
+      "resolved": "https://registry.npmjs.org/find/-/find-0.3.0.tgz",
+      "integrity": "sha512-iSd+O4OEYV/I36Zl8MdYJO0xD82wH528SaCieTVHhclgiYNe9y+yPKSwK+A7/WsmHL1EZ+pYUJBXWTL5qofksw==",
+      "requires": {
+        "traverse-chain": "~0.1.0"
+      }
+    },
+    "follow-redirects": {
+      "version": "1.15.4",
+      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.4.tgz",
+      "integrity": "sha512-Cr4D/5wlrb0z9dgERpUL3LrmPKVDsETIJhaCMeDfuFYcqa5bldGV6wBsAN6X/vxlXQtFBMrXdXxdL8CbDTGniw=="
+    },
+    "form-data": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
+      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
+      "requires": {
+        "asynckit": "^0.4.0",
+        "combined-stream": "^1.0.8",
+        "mime-types": "^2.1.12"
+      }
+    },
+    "humanize-ms": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/humanize-ms/-/humanize-ms-1.2.1.tgz",
+      "integrity": "sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==",
+      "requires": {
+        "ms": "^2.0.0"
+      }
+    },
+    "ieee754": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
+      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA=="
+    },
+    "isomorphic-ws": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/isomorphic-ws/-/isomorphic-ws-4.0.1.tgz",
+      "integrity": "sha512-BhBvN2MBpWTaSHdWRb/bwdZJ1WaehQ2L1KngkCkfLUGF0mAWAT1sQUQacEmQ0jXkFw/czDXPNQSL5u2/Krsz1w==",
+      "requires": {}
+    },
+    "jayson": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/jayson/-/jayson-4.1.0.tgz",
+      "integrity": "sha512-R6JlbyLN53Mjku329XoRT2zJAE6ZgOQ8f91ucYdMCD4nkGCF9kZSrcGXpHIU4jeKj58zUZke2p+cdQchU7Ly7A==",
+      "requires": {
+        "@types/connect": "^3.4.33",
+        "@types/node": "^12.12.54",
+        "@types/ws": "^7.4.4",
+        "commander": "^2.20.3",
+        "delay": "^5.0.0",
+        "es6-promisify": "^5.0.0",
+        "eyes": "^0.1.8",
+        "isomorphic-ws": "^4.0.1",
+        "json-stringify-safe": "^5.0.1",
+        "JSONStream": "^1.3.5",
+        "uuid": "^8.3.2",
+        "ws": "^7.4.5"
+      }
+    },
+    "js-sha256": {
+      "version": "0.9.0",
+      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
+      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
+    },
+    "json-stringify-safe": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
+      "integrity": "sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA=="
+    },
+    "jsonparse": {
+      "version": "1.3.1",
+      "resolved": "https://registry.npmjs.org/jsonparse/-/jsonparse-1.3.1.tgz",
+      "integrity": "sha512-POQXvpdL69+CluYsillJ7SUhKvytYjW9vG/GKpnf+xP8UWgYEM/RaMzHHofbALDiKbbP1W8UEYmgGl39WkPZsg=="
+    },
+    "JSONStream": {
+      "version": "1.3.5",
+      "resolved": "https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.5.tgz",
+      "integrity": "sha512-E+iruNOY8VV9s4JEbe1aNEm6MiszPRr/UfcHMz0TQh1BXSxHK+ASV1R6W4HpjBhSeS+54PIsAMCBmwD06LLsqQ==",
+      "requires": {
+        "jsonparse": "^1.2.0",
+        "through": ">=2.2.7 <3"
+      }
+    },
+    "lodash": {
+      "version": "4.17.21",
+      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
+      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
+    },
+    "lower-case": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/lower-case/-/lower-case-2.0.2.tgz",
+      "integrity": "sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==",
+      "requires": {
+        "tslib": "^2.0.3"
+      }
+    },
+    "mime-db": {
+      "version": "1.52.0",
+      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
+      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg=="
+    },
+    "mime-types": {
+      "version": "2.1.35",
+      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
+      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
+      "requires": {
+        "mime-db": "1.52.0"
+      }
+    },
+    "ms": {
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
+    },
+    "no-case": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/no-case/-/no-case-3.0.4.tgz",
+      "integrity": "sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==",
+      "requires": {
+        "lower-case": "^2.0.2",
+        "tslib": "^2.0.3"
+      }
+    },
+    "node": {
+      "version": "21.2.0",
+      "resolved": "https://registry.npmjs.org/node/-/node-21.2.0.tgz",
+      "integrity": "sha512-oiHX7SXGdO1wyg0/lZ1ZMy1iS7GgumsT5Ptt5BOye1WniC8OJ2TtYRuWfqNoKrUlYzI4+Bv1+NH5eDgxuThU2A==",
+      "requires": {
+        "node-bin-setup": "^1.0.0"
+      }
+    },
+    "node-bin-setup": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/node-bin-setup/-/node-bin-setup-1.1.3.tgz",
+      "integrity": "sha512-opgw9iSCAzT2+6wJOETCpeRYAQxSopqQ2z+N6BXwIMsQQ7Zj5M8MaafQY8JMlolRR6R1UXg2WmhKp0p9lSOivg=="
+    },
+    "node-fetch": {
+      "version": "2.7.0",
+      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
+      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
+      "requires": {
+        "whatwg-url": "^5.0.0"
+      }
+    },
+    "node-gyp-build": {
+      "version": "4.7.1",
+      "resolved": "https://registry.npmjs.org/node-gyp-build/-/node-gyp-build-4.7.1.tgz",
+      "integrity": "sha512-wTSrZ+8lsRRa3I3H8Xr65dLWSgCvY2l4AOnaeKdPA9TB/WYMPaTcrzf3rXvFoVvjKNVnu0CcWSx54qq9GKRUYg==",
+      "optional": true
+    },
+    "pako": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/pako/-/pako-2.1.0.tgz",
+      "integrity": "sha512-w+eufiZ1WuJYgPXbV/PO3NCMEc3xqylkKHzp8bxp1uW4qaSNQUkwmLLEc3kKsfz8lpV1F8Ht3U1Cm+9Srog2ug=="
+    },
+    "proxy-from-env": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
+      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
+    },
+    "regenerator-runtime": {
+      "version": "0.14.1",
+      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.14.1.tgz",
+      "integrity": "sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw=="
+    },
+    "rpc-websockets": {
+      "version": "7.9.0",
+      "resolved": "https://registry.npmjs.org/rpc-websockets/-/rpc-websockets-7.9.0.tgz",
+      "integrity": "sha512-DwKewQz1IUA5wfLvgM8wDpPRcr+nWSxuFxx5CbrI2z/MyyZ4nXLM86TvIA+cI1ZAdqC8JIBR1mZR55dzaLU+Hw==",
+      "requires": {
+        "@babel/runtime": "^7.17.2",
+        "bufferutil": "^4.0.1",
+        "eventemitter3": "^4.0.7",
+        "utf-8-validate": "^5.0.2",
+        "uuid": "^8.3.2",
+        "ws": "^8.5.0"
+      },
+      "dependencies": {
+        "ws": {
+          "version": "8.16.0",
+          "resolved": "https://registry.npmjs.org/ws/-/ws-8.16.0.tgz",
+          "integrity": "sha512-HS0c//TP7Ina87TfiPUz1rQzMhHrl/SG2guqRcTOIUYD2q8uhUdNHZYJUaQ8aTGPzCh+c6oawMKW35nFl1dxyQ==",
+          "requires": {}
+        }
+      }
+    },
+    "safe-buffer": {
+      "version": "5.2.1",
+      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
+      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ=="
+    },
+    "snake-case": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/snake-case/-/snake-case-3.0.4.tgz",
+      "integrity": "sha512-LAOh4z89bGQvl9pFfNF8V146i7o7/CqFPbqzYgP+yYzDIDeS9HaNFtXABamRW+AQzEVODcvE79ljJ+8a9YSdMg==",
+      "requires": {
+        "dot-case": "^3.0.4",
+        "tslib": "^2.0.3"
+      }
+    },
+    "superstruct": {
+      "version": "0.14.2",
+      "resolved": "https://registry.npmjs.org/superstruct/-/superstruct-0.14.2.tgz",
+      "integrity": "sha512-nPewA6m9mR3d6k7WkZ8N8zpTWfenFH3q9pA2PkuiZxINr9DKB2+40wEQf0ixn8VaGuJ78AB6iWOtStI+/4FKZQ=="
+    },
+    "text-encoding-utf-8": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
+      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
+    },
+    "through": {
+      "version": "2.3.8",
+      "resolved": "https://registry.npmjs.org/through/-/through-2.3.8.tgz",
+      "integrity": "sha512-w89qg7PI8wAdvX60bMDP+bFoD5Dvhm9oLheFp5O4a2QF0cSBGsBX4qZmadPMvVqlLJBBci+WqGGOAPvcDeNSVg=="
+    },
+    "toformat": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/toformat/-/toformat-2.0.0.tgz",
+      "integrity": "sha512-03SWBVop6nU8bpyZCx7SodpYznbZF5R4ljwNLBcTQzKOD9xuihRo/psX58llS1BMFhhAI08H3luot5GoXJz2pQ=="
+    },
+    "toml": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/toml/-/toml-3.0.0.tgz",
+      "integrity": "sha512-y/mWCZinnvxjTKYhJ+pYxwD0mRLVvOtdS2Awbgxln6iEnt4rk0yBxeSBHkGJcPucRiG0e55mwWp+g/05rsrd6w=="
+    },
+    "tr46": {
+      "version": "0.0.3",
+      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
+      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
+    },
+    "traverse-chain": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/traverse-chain/-/traverse-chain-0.1.0.tgz",
+      "integrity": "sha512-up6Yvai4PYKhpNp5PkYtx50m3KbwQrqDwbuZP/ItyL64YEWHAvH6Md83LFLV/GRSk/BoUVwwgUzX6SOQSbsfAg=="
+    },
+    "tslib": {
+      "version": "2.6.2",
+      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.6.2.tgz",
+      "integrity": "sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q=="
+    },
+    "utf-8-validate": {
+      "version": "5.0.10",
+      "resolved": "https://registry.npmjs.org/utf-8-validate/-/utf-8-validate-5.0.10.tgz",
+      "integrity": "sha512-Z6czzLq4u8fPOyx7TU6X3dvUZVvoJmxSQ+IcrlmagKhilxlhZgxPK6C5Jqbkw1IDUmFTM+cz9QDnnLTwDz/2gQ==",
+      "optional": true,
+      "requires": {
+        "node-gyp-build": "^4.3.0"
+      }
+    },
+    "uuid": {
+      "version": "8.3.2",
+      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
+      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg=="
+    },
+    "webidl-conversions": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
+      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
+    },
+    "whatwg-url": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
+      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
+      "requires": {
+        "tr46": "~0.0.3",
+        "webidl-conversions": "^3.0.0"
+      }
+    },
+    "ws": {
+      "version": "7.5.9",
+      "resolved": "https://registry.npmjs.org/ws/-/ws-7.5.9.tgz",
+      "integrity": "sha512-F+P9Jil7UiSKSkppIiD94dN07AwvFixvLIj1Og1Rl9GGMuNipJnV9JzjD6XuqmAeiswGvUmNLjr5cFuXwNS77Q==",
+      "requires": {}
+    }
+  }
+}
Index: Bot原版/Bot Solana Sniper Main/.prettierrc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/.prettierrc b/Bot原版/Bot Solana Sniper Main/.prettierrc
new file mode 100644
--- /dev/null	(date 1732301213231)
+++ b/Bot原版/Bot Solana Sniper Main/.prettierrc	(date 1732301213231)
@@ -0,0 +1,5 @@
+{
+  "singleQuote": true,
+  "trailingComma": "all",
+  "printWidth": 120
+}
\ No newline at end of file
Index: Bot汉化/bot Solana Sniper Main/bot.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/bot.ts b/Bot汉化/bot Solana Sniper Main/bot.ts
new file mode 100644
--- /dev/null	(date 1727206188668)
+++ b/Bot汉化/bot Solana Sniper Main/bot.ts	(date 1727206188668)
@@ -0,0 +1,468 @@
+// 导入所需的模块和库
+import {
+  ComputeBudgetProgram,
+  Connection,
+  Keypair,
+  PublicKey,
+  TransactionMessage,
+  VersionedTransaction,
+} from '@solana/web3.js'; // Solana 相关库
+import {
+  createAssociatedTokenAccountIdempotentInstruction,
+  createCloseAccountInstruction,
+  getAccount,
+  getAssociatedTokenAddress,
+  RawAccount,
+  TOKEN_PROGRAM_ID,
+} from '@solana/spl-token'; // 代币相关操作
+import { Liquidity, LiquidityPoolKeysV4, LiquidityStateV4, Percent, Token, TokenAmount } from '@raydium-io/raydium-sdk'; // Raydium SDK
+import { MarketCache, PoolCache, SnipeListCache } from './cache'; // 缓存相关
+import { PoolFilters } from './filters'; // 过滤器
+import { TransactionExecutor } from './transactions'; // 交易执行器
+import { createPoolKeys, logger, NETWORK, sleep } from './helpers'; // 辅助函数和常量
+import { Mutex } from 'async-mutex'; // 互斥锁
+import BN from 'bn.js'; // 大数字库
+import { WarpTransactionExecutor } from './transactions/warp-transaction-executor'; // Warp 交易执行器
+import { JitoTransactionExecutor } from './transactions/jito-rpc-transaction-executor'; // Jito 交易执行器
+
+// 机器人配置接口
+export interface BotConfig {
+  wallet: Keypair; // 钱包密钥对
+  checkRenounced: boolean; // 检查代币是否被放弃
+  checkFreezable: boolean; // 检查代币是否可冻结
+  checkBurned: boolean; // 检查代币是否已销毁
+  minPoolSize: TokenAmount; // 最小池大小
+  maxPoolSize: TokenAmount; // 最大池大小
+  quoteToken: Token; // 报价代币
+  quoteAmount: TokenAmount; // 报价金额
+  quoteAta: PublicKey; // 报价代币的关联地址
+  oneTokenAtATime: boolean; // 是否一次处理一个代币
+  useSnipeList: boolean; // 是否使用抢购列表
+  autoSell: boolean; // 是否自动出售
+  autoBuyDelay: number; // 自动购买延迟
+  autoSellDelay: number; // 自动出售延迟
+  maxBuyRetries: number; // 最大购买重试次数
+  maxSellRetries: number; // 最大出售重试次数
+  unitLimit: number; // 计算单元限制
+  unitPrice: number; // 计算单元价格
+  takeProfit: number; // 止盈设置
+  stopLoss: number; // 止损设置
+  buySlippage: number; // 购买滑点
+  sellSlippage: number; // 出售滑点
+  priceCheckInterval: number; // 价格检查间隔
+  priceCheckDuration: number; // 价格检查持续时间
+  filterCheckInterval: number; // 过滤器检查间隔
+  filterCheckDuration: number; // 过滤器检查持续时间
+  consecutiveMatchCount: number; // 连续匹配次数
+}
+
+// 机器人类
+export class Bot {
+  private readonly poolFilters: PoolFilters; // 池过滤器
+
+  // 抢购列表缓存
+  private readonly snipeListCache?: SnipeListCache;
+
+  // 一次处理一个代币
+  private readonly mutex: Mutex; // 互斥锁
+  private sellExecutionCount = 0; // 出售执行计数
+  public readonly isWarp: boolean = false; // 是否使用Warp执行器
+  public readonly isJito: boolean = false; // 是否使用Jito执行器
+
+  constructor(
+    private readonly connection: Connection, // Solana 连接
+    private readonly marketStorage: MarketCache, // 市场缓存
+    private readonly poolStorage: PoolCache, // 池缓存
+    private readonly txExecutor: TransactionExecutor, // 交易执行器
+    readonly config: BotConfig, // 机器人配置
+  ) {
+    this.isWarp = txExecutor instanceof WarpTransactionExecutor; // 判断是否使用Warp执行器
+    this.isJito = txExecutor instanceof JitoTransactionExecutor; // 判断是否使用Jito执行器
+
+    this.mutex = new Mutex(); // 初始化互斥锁
+    this.poolFilters = new PoolFilters(connection, { // 初始化池过滤器
+      quoteToken: this.config.quoteToken,
+      minPoolSize: this.config.minPoolSize,
+      maxPoolSize: this.config.maxPoolSize,
+    });
+
+    // 如果使用抢购列表，则初始化缓存
+    if (this.config.useSnipeList) {
+      this.snipeListCache = new SnipeListCache();
+      this.snipeListCache.init();
+    }
+  }
+
+  // 验证账户是否存在
+  async validate() {
+    try {
+      await getAccount(this.connection, this.config.quoteAta, this.connection.commitment); // 获取代币账户
+    } catch (error) {
+      logger.error(
+        `${this.config.quoteToken.symbol} 代币账户在钱包中未找到: ${this.config.wallet.publicKey.toString()}`,
+      );
+      return false; // 验证失败
+    }
+
+    return true; // 验证成功
+  }
+
+  // 购买代币
+  public async buy(accountId: PublicKey, poolState: LiquidityStateV4) {
+    logger.trace({ mint: poolState.baseMint }, `正在处理新池...`);
+
+    // 如果使用抢购列表且代币不在列表中，则跳过购买
+    if (this.config.useSnipeList && !this.snipeListCache?.isInList(poolState.baseMint.toString())) {
+      logger.debug({ mint: poolState.baseMint.toString() }, `跳过购买，因为代币不在抢购列表中`);
+      return;
+    }
+
+    // 等待自动购买延迟
+    if (this.config.autoBuyDelay > 0) {
+      logger.debug({ mint: poolState.baseMint }, `等待 ${this.config.autoBuyDelay} 毫秒再进行购买`);
+      await sleep(this.config.autoBuyDelay);
+    }
+
+    // 一次处理一个代币
+    if (this.config.oneTokenAtATime) {
+      if (this.mutex.isLocked() || this.sellExecutionCount > 0) {
+        logger.debug(
+          { mint: poolState.baseMint.toString() },
+          `跳过购买，因为一次只处理一个代币且代币已在处理中`,
+        );
+        return;
+      }
+
+      await this.mutex.acquire(); // 获取锁
+    }
+
+    try {
+      const [market, mintAta] = await Promise.all([ // 并行获取市场和代币地址
+        this.marketStorage.get(poolState.marketId.toString()),
+        getAssociatedTokenAddress(poolState.baseMint, this.config.wallet.publicKey),
+      ]);
+      const poolKeys: LiquidityPoolKeysV4 = createPoolKeys(accountId, poolState, market); // 创建池密钥
+
+      // 如果不使用抢购列表，则检查过滤器匹配
+      if (!this.config.useSnipeList) {
+        const match = await this.filterMatch(poolKeys);
+
+        if (!match) {
+          logger.trace({ mint: poolKeys.baseMint.toString() }, `跳过购买，因为池不匹配过滤器`);
+          return;
+        }
+      }
+
+      // 尝试购买代币
+      for (let i = 0; i < this.config.maxBuyRetries; i++) {
+        try {
+          logger.info(
+            { mint: poolState.baseMint.toString() },
+            `发送购买交易尝试: ${i + 1}/${this.config.maxBuyRetries}`,
+          );
+          const tokenOut = new Token(TOKEN_PROGRAM_ID, poolKeys.baseMint, poolKeys.baseDecimals); // 代币输出
+          const result = await this.swap(
+            poolKeys,
+            this.config.quoteAta,
+            mintAta,
+            this.config.quoteToken,
+            tokenOut,
+            this.config.quoteAmount,
+            this.config.buySlippage,
+            this.config.wallet,
+            'buy', // 购买方向
+          );
+
+          if (result.confirmed) {
+            logger.info(
+              {
+                mint: poolState.baseMint.toString(),
+                signature: result.signature,
+                url: `https://solscan.io/tx/${result.signature}?cluster=${NETWORK}`,
+              },
+              `确认购买交易`,
+            );
+
+            break; // 成功后退出循环
+          }
+
+          logger.info(
+            {
+              mint: poolState.baseMint.toString(),
+              signature: result.signature,
+              error: result.error,
+            },
+            `确认购买交易时出错`,
+          );
+        } catch (error) {
+          logger.debug({ mint: poolState.baseMint.toString(), error }, `确认购买交易时出错`);
+        }
+      }
+    } catch (error) {
+      logger.error({ mint: poolState.baseMint.toString(), error }, `购买代币失败`);
+    } finally {
+      if (this.config.oneTokenAtATime) {
+        this.mutex.release(); // 释放锁
+      }
+    }
+  }
+
+  // 出售代币
+  public async sell(accountId: PublicKey, rawAccount: RawAccount) {
+    if (this.config.oneTokenAtATime) {
+      this.sellExecutionCount++; // 增加出售执行计数
+    }
+
+    try {
+      logger.trace({ mint: rawAccount.mint }, `正在处理新代币...`);
+
+      const poolData = await this.poolStorage.get(rawAccount.mint.toString()); // 获取池数据
+
+      // 如果未找到池数据，则无法出售
+      if (!poolData) {
+        logger.trace({ mint: rawAccount.mint.toString() }, `代币池数据未找到，无法出售`);
+        return;
+      }
+
+      const tokenIn = new Token(TOKEN_PROGRAM_ID, poolData.state.baseMint, poolData.state.baseDecimal.toNumber()); // 输入代币
+      const tokenAmountIn = new TokenAmount(tokenIn, rawAccount.amount, true); // 输入代币金额
+
+      // 如果输入代币金额为零，则无法出售
+      if (tokenAmountIn.isZero()) {
+        logger.info({ mint: rawAccount.mint.toString() }, `余额为空，无法出售`);
+        return;
+      }
+
+      // 等待自动出售延迟
+      if (this.config.autoSellDelay > 0) {
+        logger.debug({ mint: rawAccount.mint }, `等待 ${this.config.autoSellDelay} 毫秒再进行出售`);
+        await sleep(this.config.autoSellDelay);
+      }
+
+      const market = await this.marketStorage.get(poolData.state.marketId.toString()); // 获取市场数据
+      const poolKeys: LiquidityPoolKeysV4 = createPoolKeys(new PublicKey(poolData.id), poolData.state, market); // 创建池密钥
+
+      await this.priceMatch(tokenAmountIn, poolKeys); // 检查价格匹配
+
+      // 尝试出售代币
+      for (let i = 0; i < this.config.maxSellRetries; i++) {
+        try {
+          logger.info(
+            { mint: rawAccount.mint },
+            `发送出售交易尝试: ${i + 1}/${this.config.maxSellRetries}`,
+          );
+
+          const result = await this.swap(
+            poolKeys,
+            accountId,
+            this.config.quoteAta,
+            tokenIn,
+            this.config.quoteToken,
+            tokenAmountIn,
+            this.config.sellSlippage,
+            this.config.wallet,
+            'sell', // 出售方向
+          );
+
+          if (result.confirmed) {
+            logger.info(
+              {
+                dex: `https://dexscreener.com/solana/${rawAccount.mint.toString()}?maker=${this.config.wallet.publicKey}`,
+                mint: rawAccount.mint.toString(),
+                signature: result.signature,
+                url: `https://solscan.io/tx/${result.signature}?cluster=${NETWORK}`,
+              },
+              `确认出售交易`,
+            );
+            break; // 成功后退出循环
+          }
+
+          logger.info(
+            {
+              mint: rawAccount.mint.toString(),
+              signature: result.signature,
+              error: result.error,
+            },
+            `确认出售交易时出错`,
+          );
+        } catch (error) {
+          logger.debug({ mint: rawAccount.mint.toString(), error }, `确认出售交易时出错`);
+        }
+      }
+    } catch (error) {
+      logger.error({ mint: rawAccount.mint.toString(), error }, `出售代币失败`);
+    } finally {
+      if (this.config.oneTokenAtATime) {
+        this.sellExecutionCount--; // 减少出售执行计数
+      }
+    }
+  }
+
+  // 交换代币
+  private async swap(
+    poolKeys: LiquidityPoolKeysV4,
+    ataIn: PublicKey,
+    ataOut: PublicKey,
+    tokenIn: Token,
+    tokenOut: Token,
+    amountIn: TokenAmount,
+    slippage: number,
+    wallet: Keypair,
+    direction: 'buy' | 'sell', // 购买或出售方向
+  ) {
+    const slippagePercent = new Percent(slippage, 100); // 计算滑点百分比
+    const poolInfo = await Liquidity.fetchInfo({ // 获取池信息
+      connection: this.connection,
+      poolKeys,
+    });
+
+    // 计算输出金额
+    const computedAmountOut = Liquidity.computeAmountOut({
+      poolKeys,
+      poolInfo,
+      amountIn,
+      currencyOut: tokenOut,
+      slippage: slippagePercent,
+    });
+
+    const latestBlockhash = await this.connection.getLatestBlockhash(); // 获取最新区块哈希
+    const { innerTransaction } = Liquidity.makeSwapFixedInInstruction(
+      {
+        poolKeys: poolKeys,
+        userKeys: {
+          tokenAccountIn: ataIn,
+          tokenAccountOut: ataOut,
+          owner: wallet.publicKey,
+        },
+        amountIn: amountIn.raw,
+        minAmountOut: computedAmountOut.minAmountOut.raw,
+      },
+      poolKeys.version,
+    );
+
+    // 创建交易消息
+    const messageV0 = new TransactionMessage({
+      payerKey: wallet.publicKey,
+      recentBlockhash: latestBlockhash.blockhash,
+      instructions: [
+        ...(this.isWarp || this.isJito
+          ? []
+          : [
+            ComputeBudgetProgram.setComputeUnitPrice({ microLamports: this.config.unitPrice }), // 设置计算单元价格
+            ComputeBudgetProgram.setComputeUnitLimit({ units: this.config.unitLimit }), // 设置计算单元限制
+          ]),
+        ...(direction === 'buy'
+          ? [
+            createAssociatedTokenAccountIdempotentInstruction( // 创建代币账户指令
+              wallet.publicKey,
+              ataOut,
+              wallet.publicKey,
+              tokenOut.mint,
+            ),
+          ]
+          : []),
+        ...innerTransaction.instructions,
+        ...(direction === 'sell' ? [createCloseAccountInstruction(ataIn, wallet.publicKey, wallet.publicKey)] : []), // 创建关闭账户指令
+      ],
+    }).compileToV0Message(); // 编译为 V0 消息
+
+    const transaction = new VersionedTransaction(messageV0); // 创建版本化交易
+    transaction.sign([wallet, ...innerTransaction.signers]); // 签名交易
+
+    // 执行并确认交易
+    return this.txExecutor.executeAndConfirm(transaction, wallet, latestBlockhash);
+  }
+
+  // 检查过滤器匹配
+  private async filterMatch(poolKeys: LiquidityPoolKeysV4) {
+    if (this.config.filterCheckInterval === 0 || this.config.filterCheckDuration === 0) {
+      return true; // 如果检查间隔或持续时间为0，直接返回true
+    }
+
+    const timesToCheck = this.config.filterCheckDuration / this.config.filterCheckInterval; // 计算检查次数
+    let timesChecked = 0; // 记录检查次数
+    let matchCount = 0; // 记录匹配次数
+
+    do {
+      try {
+        const shouldBuy = await this.poolFilters.execute(poolKeys); // 执行过滤器
+
+        if (shouldBuy) {
+          matchCount++;
+
+          if (this.config.consecutiveMatchCount <= matchCount) {
+            logger.debug(
+              { mint: poolKeys.baseMint.toString() },
+              `过滤器匹配 ${matchCount}/${this.config.consecutiveMatchCount}`,
+            );
+            return true; // 如果匹配次数达到要求，返回true
+          }
+        } else {
+          matchCount = 0; // 如果不匹配，重置匹配次数
+        }
+
+        await sleep(this.config.filterCheckInterval); // 等待检查间隔
+      } finally {
+        timesChecked++; // 增加检查次数
+      }
+    } while (timesChecked < timesToCheck); // 继续检查直到达到最大次数
+
+    return false; // 没有匹配，返回false
+  }
+
+  // 检查价格匹配
+  private async priceMatch(amountIn: TokenAmount, poolKeys: LiquidityPoolKeysV4) {
+    if (this.config.priceCheckDuration === 0 || this.config.priceCheckInterval === 0) {
+      return; // 如果检查持续时间或间隔为0，直接返回
+    }
+
+    const timesToCheck = this.config.priceCheckDuration / this.config.priceCheckInterval; // 计算检查次数
+    const profitFraction = this.config.quoteAmount.mul(this.config.takeProfit).numerator.div(new BN(100)); // 计算止盈金额
+    const profitAmount = new TokenAmount(this.config.quoteToken, profitFraction, true); // 止盈金额
+    const takeProfit = this.config.quoteAmount.add(profitAmount); // 计算止盈点
+
+    const lossFraction = this.config.quoteAmount.mul(this.config.stopLoss).numerator.div(new BN(100)); // 计算止损金额
+    const lossAmount = new TokenAmount(this.config.quoteToken, lossFraction, true); // 止损金额
+    const stopLoss = this.config.quoteAmount.subtract(lossAmount); // 计算止损点
+    const slippage = new Percent(this.config.sellSlippage, 100); // 计算出售滑点
+    let timesChecked = 0; // 记录检查次数
+
+    do {
+      try {
+        const poolInfo = await Liquidity.fetchInfo({ // 获取池信息
+          connection: this.connection,
+          poolKeys,
+        });
+
+        const amountOut = Liquidity.computeAmountOut({ // 计算输出金额
+          poolKeys,
+          poolInfo,
+          amountIn: amountIn,
+          currencyOut: this.config.quoteToken,
+          slippage,
+        }).amountOut;
+
+        logger.debug(
+          { mint: poolKeys.baseMint.toString() },
+          `止盈: ${takeProfit.toFixed()} | 止损: ${stopLoss.toFixed()} | 当前: ${amountOut.toFixed()}`,
+        );
+
+        // 如果当前输出金额小于止损点，则退出
+        if (amountOut.lt(stopLoss)) {
+          break;
+        }
+
+        // 如果当前输出金额大于止盈点，则退出
+        if (amountOut.gt(takeProfit)) {
+          break;
+        }
+
+        await sleep(this.config.priceCheckInterval); // 等待价格检查间隔
+      } catch (e) {
+        logger.trace({ mint: poolKeys.baseMint.toString(), e }, `检查代币价格时失败`);
+      } finally {
+        timesChecked++; // 增加检查次数
+      }
+    } while (timesChecked < timesToCheck); // 继续检查直到达到最大次数
+  }
+}
Index: Bot原版/Bot Solana Sniper Main/bot.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/bot.ts b/Bot原版/Bot Solana Sniper Main/bot.ts
new file mode 100644
--- /dev/null	(date 1732301213241)
+++ b/Bot原版/Bot Solana Sniper Main/bot.ts	(date 1732301213241)
@@ -0,0 +1,445 @@
+import {
+  ComputeBudgetProgram,
+  Connection,
+  Keypair,
+  PublicKey,
+  TransactionMessage,
+  VersionedTransaction,
+} from '@solana/web3.js';
+import {
+  createAssociatedTokenAccountIdempotentInstruction,
+  createCloseAccountInstruction,
+  getAccount,
+  getAssociatedTokenAddress,
+  RawAccount,
+  TOKEN_PROGRAM_ID,
+} from '@solana/spl-token';
+import { Liquidity, LiquidityPoolKeysV4, LiquidityStateV4, Percent, Token, TokenAmount } from '@raydium-io/raydium-sdk';
+import { MarketCache, PoolCache, SnipeListCache } from './cache';
+import { PoolFilters } from './filters';
+import { TransactionExecutor } from './transactions';
+import { createPoolKeys, logger, NETWORK, sleep } from './helpers';
+import { Mutex } from 'async-mutex';
+import BN from 'bn.js';
+import { WarpTransactionExecutor } from './transactions/warp-transaction-executor';
+import { JitoTransactionExecutor } from './transactions/jito-rpc-transaction-executor';
+
+export interface BotConfig {
+  wallet: Keypair;
+  checkRenounced: boolean;
+  checkFreezable: boolean;
+  checkBurned: boolean;
+  minPoolSize: TokenAmount;
+  maxPoolSize: TokenAmount;
+  quoteToken: Token;
+  quoteAmount: TokenAmount;
+  quoteAta: PublicKey;
+  oneTokenAtATime: boolean;
+  useSnipeList: boolean;
+  autoSell: boolean;
+  autoBuyDelay: number;
+  autoSellDelay: number;
+  maxBuyRetries: number;
+  maxSellRetries: number;
+  unitLimit: number;
+  unitPrice: number;
+  takeProfit: number;
+  stopLoss: number;
+  buySlippage: number;
+  sellSlippage: number;
+  priceCheckInterval: number;
+  priceCheckDuration: number;
+  filterCheckInterval: number;
+  filterCheckDuration: number;
+  consecutiveMatchCount: number;
+}
+
+export class Bot {
+  private readonly poolFilters: PoolFilters;
+
+  // snipe list
+  private readonly snipeListCache?: SnipeListCache;
+
+  // one token at the time
+  private readonly mutex: Mutex;
+  private sellExecutionCount = 0;
+  public readonly isWarp: boolean = false;
+  public readonly isJito: boolean = false;
+
+  constructor(
+    private readonly connection: Connection,
+    private readonly marketStorage: MarketCache,
+    private readonly poolStorage: PoolCache,
+    private readonly txExecutor: TransactionExecutor,
+    readonly config: BotConfig,
+  ) {
+    this.isWarp = txExecutor instanceof WarpTransactionExecutor;
+    this.isJito = txExecutor instanceof JitoTransactionExecutor;
+
+    this.mutex = new Mutex();
+    this.poolFilters = new PoolFilters(connection, {
+      quoteToken: this.config.quoteToken,
+      minPoolSize: this.config.minPoolSize,
+      maxPoolSize: this.config.maxPoolSize,
+    });
+
+    if (this.config.useSnipeList) {
+      this.snipeListCache = new SnipeListCache();
+      this.snipeListCache.init();
+    }
+  }
+
+  async validate() {
+    try {
+      await getAccount(this.connection, this.config.quoteAta, this.connection.commitment);
+    } catch (error) {
+      logger.error(
+        `${this.config.quoteToken.symbol} token account not found in wallet: ${this.config.wallet.publicKey.toString()}`,
+      );
+      return false;
+    }
+
+    return true;
+  }
+
+  public async buy(accountId: PublicKey, poolState: LiquidityStateV4) {
+    logger.trace({ mint: poolState.baseMint }, `Processing new pool...`);
+
+    if (this.config.useSnipeList && !this.snipeListCache?.isInList(poolState.baseMint.toString())) {
+      logger.debug({ mint: poolState.baseMint.toString() }, `Skipping buy because token is not in a snipe list`);
+      return;
+    }
+
+    if (this.config.autoBuyDelay > 0) {
+      logger.debug({ mint: poolState.baseMint }, `Waiting for ${this.config.autoBuyDelay} ms before buy`);
+      await sleep(this.config.autoBuyDelay);
+    }
+
+    if (this.config.oneTokenAtATime) {
+      if (this.mutex.isLocked() || this.sellExecutionCount > 0) {
+        logger.debug(
+          { mint: poolState.baseMint.toString() },
+          `Skipping buy because one token at a time is turned on and token is already being processed`,
+        );
+        return;
+      }
+
+      await this.mutex.acquire();
+    }
+
+    try {
+      const [market, mintAta] = await Promise.all([
+        this.marketStorage.get(poolState.marketId.toString()),
+        getAssociatedTokenAddress(poolState.baseMint, this.config.wallet.publicKey),
+      ]);
+      const poolKeys: LiquidityPoolKeysV4 = createPoolKeys(accountId, poolState, market);
+
+      if (!this.config.useSnipeList) {
+        const match = await this.filterMatch(poolKeys);
+
+        if (!match) {
+          logger.trace({ mint: poolKeys.baseMint.toString() }, `Skipping buy because pool doesn't match filters`);
+          return;
+        }
+      }
+
+      for (let i = 0; i < this.config.maxBuyRetries; i++) {
+        try {
+          logger.info(
+            { mint: poolState.baseMint.toString() },
+            `Send buy transaction attempt: ${i + 1}/${this.config.maxBuyRetries}`,
+          );
+          const tokenOut = new Token(TOKEN_PROGRAM_ID, poolKeys.baseMint, poolKeys.baseDecimals);
+          const result = await this.swap(
+            poolKeys,
+            this.config.quoteAta,
+            mintAta,
+            this.config.quoteToken,
+            tokenOut,
+            this.config.quoteAmount,
+            this.config.buySlippage,
+            this.config.wallet,
+            'buy',
+          );
+
+          if (result.confirmed) {
+            logger.info(
+              {
+                mint: poolState.baseMint.toString(),
+                signature: result.signature,
+                url: `https://solscan.io/tx/${result.signature}?cluster=${NETWORK}`,
+              },
+              `Confirmed buy tx`,
+            );
+
+            break;
+          }
+
+          logger.info(
+            {
+              mint: poolState.baseMint.toString(),
+              signature: result.signature,
+              error: result.error,
+            },
+            `Error confirming buy tx`,
+          );
+        } catch (error) {
+          logger.debug({ mint: poolState.baseMint.toString(), error }, `Error confirming buy transaction`);
+        }
+      }
+    } catch (error) {
+      logger.error({ mint: poolState.baseMint.toString(), error }, `Failed to buy token`);
+    } finally {
+      if (this.config.oneTokenAtATime) {
+        this.mutex.release();
+      }
+    }
+  }
+
+  public async sell(accountId: PublicKey, rawAccount: RawAccount) {
+    if (this.config.oneTokenAtATime) {
+      this.sellExecutionCount++;
+    }
+
+    try {
+      logger.trace({ mint: rawAccount.mint }, `Processing new token...`);
+
+      const poolData = await this.poolStorage.get(rawAccount.mint.toString());
+
+      if (!poolData) {
+        logger.trace({ mint: rawAccount.mint.toString() }, `Token pool data is not found, can't sell`);
+        return;
+      }
+
+      const tokenIn = new Token(TOKEN_PROGRAM_ID, poolData.state.baseMint, poolData.state.baseDecimal.toNumber());
+      const tokenAmountIn = new TokenAmount(tokenIn, rawAccount.amount, true);
+
+      if (tokenAmountIn.isZero()) {
+        logger.info({ mint: rawAccount.mint.toString() }, `Empty balance, can't sell`);
+        return;
+      }
+
+      if (this.config.autoSellDelay > 0) {
+        logger.debug({ mint: rawAccount.mint }, `Waiting for ${this.config.autoSellDelay} ms before sell`);
+        await sleep(this.config.autoSellDelay);
+      }
+
+      const market = await this.marketStorage.get(poolData.state.marketId.toString());
+      const poolKeys: LiquidityPoolKeysV4 = createPoolKeys(new PublicKey(poolData.id), poolData.state, market);
+
+      await this.priceMatch(tokenAmountIn, poolKeys);
+
+      for (let i = 0; i < this.config.maxSellRetries; i++) {
+        try {
+          logger.info(
+            { mint: rawAccount.mint },
+            `Send sell transaction attempt: ${i + 1}/${this.config.maxSellRetries}`,
+          );
+
+          const result = await this.swap(
+            poolKeys,
+            accountId,
+            this.config.quoteAta,
+            tokenIn,
+            this.config.quoteToken,
+            tokenAmountIn,
+            this.config.sellSlippage,
+            this.config.wallet,
+            'sell',
+          );
+
+          if (result.confirmed) {
+            logger.info(
+              {
+                dex: `https://dexscreener.com/solana/${rawAccount.mint.toString()}?maker=${this.config.wallet.publicKey}`,
+                mint: rawAccount.mint.toString(),
+                signature: result.signature,
+                url: `https://solscan.io/tx/${result.signature}?cluster=${NETWORK}`,
+              },
+              `Confirmed sell tx`,
+            );
+            break;
+          }
+
+          logger.info(
+            {
+              mint: rawAccount.mint.toString(),
+              signature: result.signature,
+              error: result.error,
+            },
+            `Error confirming sell tx`,
+          );
+        } catch (error) {
+          logger.debug({ mint: rawAccount.mint.toString(), error }, `Error confirming sell transaction`);
+        }
+      }
+    } catch (error) {
+      logger.error({ mint: rawAccount.mint.toString(), error }, `Failed to sell token`);
+    } finally {
+      if (this.config.oneTokenAtATime) {
+        this.sellExecutionCount--;
+      }
+    }
+  }
+
+  // noinspection JSUnusedLocalSymbols
+  private async swap(
+    poolKeys: LiquidityPoolKeysV4,
+    ataIn: PublicKey,
+    ataOut: PublicKey,
+    tokenIn: Token,
+    tokenOut: Token,
+    amountIn: TokenAmount,
+    slippage: number,
+    wallet: Keypair,
+    direction: 'buy' | 'sell',
+  ) {
+    const slippagePercent = new Percent(slippage, 100);
+    const poolInfo = await Liquidity.fetchInfo({
+      connection: this.connection,
+      poolKeys,
+    });
+
+    const computedAmountOut = Liquidity.computeAmountOut({
+      poolKeys,
+      poolInfo,
+      amountIn,
+      currencyOut: tokenOut,
+      slippage: slippagePercent,
+    });
+
+    const latestBlockhash = await this.connection.getLatestBlockhash();
+    const { innerTransaction } = Liquidity.makeSwapFixedInInstruction(
+      {
+        poolKeys: poolKeys,
+        userKeys: {
+          tokenAccountIn: ataIn,
+          tokenAccountOut: ataOut,
+          owner: wallet.publicKey,
+        },
+        amountIn: amountIn.raw,
+        minAmountOut: computedAmountOut.minAmountOut.raw,
+      },
+      poolKeys.version,
+    );
+
+    const messageV0 = new TransactionMessage({
+      payerKey: wallet.publicKey,
+      recentBlockhash: latestBlockhash.blockhash,
+      instructions: [
+        ...(this.isWarp || this.isJito
+          ? []
+          : [
+              ComputeBudgetProgram.setComputeUnitPrice({ microLamports: this.config.unitPrice }),
+              ComputeBudgetProgram.setComputeUnitLimit({ units: this.config.unitLimit }),
+            ]),
+        ...(direction === 'buy'
+          ? [
+              createAssociatedTokenAccountIdempotentInstruction(
+                wallet.publicKey,
+                ataOut,
+                wallet.publicKey,
+                tokenOut.mint,
+              ),
+            ]
+          : []),
+        ...innerTransaction.instructions,
+        ...(direction === 'sell' ? [createCloseAccountInstruction(ataIn, wallet.publicKey, wallet.publicKey)] : []),
+      ],
+    }).compileToV0Message();
+
+    const transaction = new VersionedTransaction(messageV0);
+    transaction.sign([wallet, ...innerTransaction.signers]);
+
+    return this.txExecutor.executeAndConfirm(transaction, wallet, latestBlockhash);
+  }
+
+  private async filterMatch(poolKeys: LiquidityPoolKeysV4) {
+    if (this.config.filterCheckInterval === 0 || this.config.filterCheckDuration === 0) {
+      return true;
+    }
+
+    const timesToCheck = this.config.filterCheckDuration / this.config.filterCheckInterval;
+    let timesChecked = 0;
+    let matchCount = 0;
+
+    do {
+      try {
+        const shouldBuy = await this.poolFilters.execute(poolKeys);
+
+        if (shouldBuy) {
+          matchCount++;
+
+          if (this.config.consecutiveMatchCount <= matchCount) {
+            logger.debug(
+              { mint: poolKeys.baseMint.toString() },
+              `Filter match ${matchCount}/${this.config.consecutiveMatchCount}`,
+            );
+            return true;
+          }
+        } else {
+          matchCount = 0;
+        }
+
+        await sleep(this.config.filterCheckInterval);
+      } finally {
+        timesChecked++;
+      }
+    } while (timesChecked < timesToCheck);
+
+    return false;
+  }
+
+  private async priceMatch(amountIn: TokenAmount, poolKeys: LiquidityPoolKeysV4) {
+    if (this.config.priceCheckDuration === 0 || this.config.priceCheckInterval === 0) {
+      return;
+    }
+
+    const timesToCheck = this.config.priceCheckDuration / this.config.priceCheckInterval;
+    const profitFraction = this.config.quoteAmount.mul(this.config.takeProfit).numerator.div(new BN(100));
+    const profitAmount = new TokenAmount(this.config.quoteToken, profitFraction, true);
+    const takeProfit = this.config.quoteAmount.add(profitAmount);
+
+    const lossFraction = this.config.quoteAmount.mul(this.config.stopLoss).numerator.div(new BN(100));
+    const lossAmount = new TokenAmount(this.config.quoteToken, lossFraction, true);
+    const stopLoss = this.config.quoteAmount.subtract(lossAmount);
+    const slippage = new Percent(this.config.sellSlippage, 100);
+    let timesChecked = 0;
+
+    do {
+      try {
+        const poolInfo = await Liquidity.fetchInfo({
+          connection: this.connection,
+          poolKeys,
+        });
+
+        const amountOut = Liquidity.computeAmountOut({
+          poolKeys,
+          poolInfo,
+          amountIn: amountIn,
+          currencyOut: this.config.quoteToken,
+          slippage,
+        }).amountOut;
+
+        logger.debug(
+          { mint: poolKeys.baseMint.toString() },
+          `Take profit: ${takeProfit.toFixed()} | Stop loss: ${stopLoss.toFixed()} | Current: ${amountOut.toFixed()}`,
+        );
+
+        if (amountOut.lt(stopLoss)) {
+          break;
+        }
+
+        if (amountOut.gt(takeProfit)) {
+          break;
+        }
+
+        await sleep(this.config.priceCheckInterval);
+      } catch (e) {
+        logger.trace({ mint: poolKeys.baseMint.toString(), e }, `Failed to check token price`);
+      } finally {
+        timesChecked++;
+      }
+    } while (timesChecked < timesToCheck);
+  }
+}
Index: Bot原版/Bot Solana Sniper Main/.env.copy
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/.env.copy b/Bot原版/Bot Solana Sniper Main/.env.copy
new file mode 100644
--- /dev/null	(date 1732301213171)
+++ b/Bot原版/Bot Solana Sniper Main/.env.copy	(date 1732301213171)
@@ -0,0 +1,50 @@
+# Wallet
+PRIVATE_KEY=
+
+# Connection
+RPC_ENDPOINT=https://solana-mainnet.rpc.extrnode.com/5b667693-6518-4921-8ea1-4f65ff09c463
+RPC_WEBSOCKET_ENDPOINT=wss://solana-mainnet.rpc.extrnode.com/5b667693-6518-4921-8ea1-4f65ff09c463
+COMMITMENT_LEVEL=confirmed
+
+# Bot
+LOG_LEVEL=trace
+ONE_TOKEN_AT_A_TIME=true
+PRE_LOAD_EXISTING_MARKETS=false
+CACHE_NEW_MARKETS=false
+# default or warp or jito
+TRANSACTION_EXECUTOR=jito
+# if using default executor, fee below will be applied
+COMPUTE_UNIT_LIMIT=101337
+COMPUTE_UNIT_PRICE=421197
+# if using warp or jito executor, fee below will be applied
+CUSTOM_FEE=0.01
+
+# Buy
+QUOTE_MINT=WSOL
+QUOTE_AMOUNT=0.001
+AUTO_BUY_DELAY=0
+MAX_BUY_RETRIES=10
+BUY_SLIPPAGE=100
+
+# Sell
+AUTO_SELL=true
+MAX_SELL_RETRIES=10
+AUTO_SELL_DELAY=0
+PRICE_CHECK_INTERVAL=2000
+PRICE_CHECK_DURATION=600000
+TAKE_PROFIT=100
+STOP_LOSS=20
+SELL_SLIPPAGE=100
+
+# Filters
+USE_SNIPE_LIST=false
+SNIPE_LIST_REFRESH_INTERVAL=30000
+FILTER_CHECK_DURATION=60000
+FILTER_CHECK_INTERVAL=2000
+CONSECUTIVE_FILTER_MATCHES=3
+CHECK_IF_MUTABLE=false
+CHECK_IF_MINT_IS_RENOUNCED=true
+CHECK_IF_FREEZABLE=false
+CHECK_IF_BURNED=true
+MIN_POOL_SIZE=3
+MAX_POOL_SIZE=20
Index: Bot汉化/bot Solana Sniper Main/.prettierrc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/.prettierrc b/Bot汉化/bot Solana Sniper Main/.prettierrc
new file mode 100644
--- /dev/null	(date 1727201868893)
+++ b/Bot汉化/bot Solana Sniper Main/.prettierrc	(date 1727201868893)
@@ -0,0 +1,5 @@
+{
+  "singleQuote": true,
+  "trailingComma": "all",
+  "printWidth": 120
+}
\ No newline at end of file
Index: Bot原版/Bot Solana Sniper Main/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/.gitignore b/Bot原版/Bot Solana Sniper Main/.gitignore
new file mode 100644
--- /dev/null	(date 1732301213201)
+++ b/Bot原版/Bot Solana Sniper Main/.gitignore	(date 1732301213201)
@@ -0,0 +1,139 @@
+# Logs
+logs
+*.log
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
+lerna-debug.log*
+.pnpm-debug.log*
+
+# Diagnostic reports (https://nodejs.org/api/report.html)
+report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
+
+# Runtime data
+pids
+*.pid
+*.seed
+*.pid.lock
+
+# Directory for instrumented libs generated by jscoverage/JSCover
+lib-cov
+
+# Coverage directory used by tools like istanbul
+coverage
+*.lcov
+
+# nyc test coverage
+.nyc_output
+
+# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
+.grunt
+
+# Bower dependency directory (https://bower.io/)
+bower_components
+
+# node-waf configuration
+.lock-wscript
+
+# Compiled binary addons (https://nodejs.org/api/addons.html)
+build/Release
+
+# Dependency directories
+node_modules/
+jspm_packages/
+
+# Snowpack dependency directory (https://snowpack.dev/)
+web_modules/
+
+# TypeScript cache
+*.tsbuildinfo
+
+# Optional npm cache directory
+.npm
+
+# Optional eslint cache
+.eslintcache
+
+# Optional stylelint cache
+.stylelintcache
+
+# Microbundle cache
+.rpt2_cache/
+.rts2_cache_cjs/
+.rts2_cache_es/
+.rts2_cache_umd/
+
+# Optional REPL history
+.node_repl_history
+
+# Output of 'npm pack'
+*.tgz
+
+# Yarn Integrity file
+.yarn-integrity
+
+# dotenv environment variable files
+.env
+.env.development.local
+.env.test.local
+.env.production.local
+.env.local
+
+# parcel-bundler cache (https://parceljs.org/)
+.cache
+.parcel-cache
+
+# Next.js build output
+.next
+out
+
+# Nuxt.js build / generate output
+.nuxt
+dist
+
+# Gatsby files
+.cache/
+# Comment in the public line in if your project uses Gatsby and not Next.js
+# https://nextjs.org/blog/next-9-1#public-directory-support
+# public
+
+# vuepress build output
+.vuepress/dist
+
+# vuepress v2.x temp and cache directory
+.temp
+.cache
+
+# Docusaurus cache and generated files
+.docusaurus
+
+# Serverless directories
+.serverless/
+
+# FuseBox cache
+.fusebox/
+
+# DynamoDB Local files
+.dynamodb/
+
+# TernJS port file
+.tern-port
+
+# Stores VSCode versions used for testing VSCode extensions
+.vscode-test
+
+# PNPM
+pnpm-lock.yaml
+
+# yarn v2
+.yarn/cache
+.yarn/unplugged
+.yarn/build-state.yml
+.yarn/install-state.gz
+.pnp.*
+
+# JetBrains
+.idea
+
+# Visual Studio Code 
+*.code-workspace
Index: Bot汉化/bot Solana Sniper Main/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/index.ts b/Bot汉化/bot Solana Sniper Main/index.ts
new file mode 100644
--- /dev/null	(date 1727206059722)
+++ b/Bot汉化/bot Solana Sniper Main/index.ts	(date 1727206059722)
@@ -0,0 +1,252 @@
+// 导入所需的模块和库
+import { MarketCache, PoolCache } from './cache'; // 缓存相关
+import { Listeners } from './listeners'; // 监听器
+import { Connection, KeyedAccountInfo, Keypair } from '@solana/web3.js'; // Solana 连接和账户信息
+import { LIQUIDITY_STATE_LAYOUT_V4, MARKET_STATE_LAYOUT_V3, Token, TokenAmount } from '@raydium-io/raydium-sdk'; // Raydium SDK
+import { AccountLayout, getAssociatedTokenAddressSync } from '@solana/spl-token'; // 账户布局和代币地址
+import { Bot, BotConfig } from './bot'; // 机器人相关
+import { DefaultTransactionExecutor, TransactionExecutor } from './transactions'; // 交易执行器
+import {
+  getToken,
+  getWallet,
+  logger,
+  COMMITMENT_LEVEL,
+  RPC_ENDPOINT,
+  RPC_WEBSOCKET_ENDPOINT,
+  PRE_LOAD_EXISTING_MARKETS,
+  LOG_LEVEL,
+  CHECK_IF_MUTABLE,
+  CHECK_IF_MINT_IS_RENOUNCED,
+  CHECK_IF_FREEZABLE,
+  CHECK_IF_BURNED,
+  QUOTE_MINT,
+  MAX_POOL_SIZE,
+  MIN_POOL_SIZE,
+  QUOTE_AMOUNT,
+  PRIVATE_KEY,
+  USE_SNIPE_LIST,
+  ONE_TOKEN_AT_A_TIME,
+  AUTO_SELL_DELAY,
+  MAX_SELL_RETRIES,
+  AUTO_SELL,
+  MAX_BUY_RETRIES,
+  AUTO_BUY_DELAY,
+  COMPUTE_UNIT_LIMIT,
+  COMPUTE_UNIT_PRICE,
+  CACHE_NEW_MARKETS,
+  TAKE_PROFIT,
+  STOP_LOSS,
+  BUY_SLIPPAGE,
+  SELL_SLIPPAGE,
+  PRICE_CHECK_DURATION,
+  PRICE_CHECK_INTERVAL,
+  SNIPE_LIST_REFRESH_INTERVAL,
+  TRANSACTION_EXECUTOR,
+  CUSTOM_FEE,
+  FILTER_CHECK_INTERVAL,
+  FILTER_CHECK_DURATION,
+  CONSECUTIVE_FILTER_MATCHES,
+} from './helpers'; // 辅助函数和常量
+import { version } from './package.json'; // 获取版本信息
+import { WarpTransactionExecutor } from './transactions/warp-transaction-executor'; // Warp 交易执行器
+import { JitoTransactionExecutor } from './transactions/jito-rpc-transaction-executor'; // Jito 交易执行器
+
+// 创建与Solana区块链的连接
+const connection = new Connection(RPC_ENDPOINT, {
+  wsEndpoint: RPC_WEBSOCKET_ENDPOINT,
+  commitment: COMMITMENT_LEVEL,
+});
+
+// 打印钱包和机器人配置信息的函数
+function printDetails(wallet: Keypair, quoteToken: Token, bot: Bot) {
+  logger.info(`  
+  
+ █████╗ ██╗  ██╗██╗███████╗██████╗  ██████╗ ████████╗
+██╔══██╗╚██╗██╔╝██║██╔════╝██╔══██╗██╔═══██╗╚══██╔══╝
+███████║ ╚███╔╝ ██║███████╗██████╔╝██║   ██║   ██║   
+██╔══██║ ██╔██╗ ██║╚════██║██╔══██╗██║   ██║   ██║   
+██║  ██║██╔╝ ██╗██║███████║██████╔╝╚██████╔╝   ██║   
+╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚══════╝╚═════╝  ╚═════╝    ╚═╝                                                   
+                            
+          AxisBot Solana Sniper v1.0
+          制作团队：AxisBot Team
+          版本：${version}                                          
+  `);
+
+  const botConfig = bot.config; // 获取机器人配置
+
+  logger.info('------- 配置开始 -------');
+  logger.info(`钱包地址: ${wallet.publicKey.toString()}`);
+
+  logger.info('- 机器人 -');
+
+  logger.info(
+    `使用的执行器: ${bot.isWarp || bot.isJito || (TRANSACTION_EXECUTOR === 'default' ? true : false)}`,
+  );
+  if (bot.isWarp || bot.isJito) {
+    logger.info(`${TRANSACTION_EXECUTOR} 费用: ${CUSTOM_FEE}`); // 打印执行器费用
+  } else {
+    logger.info(`计算单元限制: ${botConfig.unitLimit}`); // 打印计算单元限制
+    logger.info(`计算单元价格（微 lamports）: ${botConfig.unitPrice}`); // 打印计算单元价格
+  }
+
+  logger.info(`每次处理一个代币: ${botConfig.oneTokenAtATime}`); // 打印每次处理一个代币的设置
+  logger.info(`预加载现有市场: ${PRE_LOAD_EXISTING_MARKETS}`); // 打印是否预加载现有市场
+  logger.info(`缓存新市场: ${CACHE_NEW_MARKETS}`); // 打印缓存新市场的设置
+  logger.info(`日志级别: ${LOG_LEVEL}`); // 打印日志级别
+
+  logger.info('- 购买 -');
+  logger.info(`购买金额: ${botConfig.quoteAmount.toFixed()} ${botConfig.quoteToken.name}`); // 打印购买金额
+  logger.info(`自动购买延迟: ${botConfig.autoBuyDelay} 毫秒`); // 打印自动购买延迟
+  logger.info(`最大购买重试次数: ${botConfig.maxBuyRetries}`); // 打印最大购买重试次数
+  logger.info(`购买金额（${quoteToken.symbol}）: ${botConfig.quoteAmount.toFixed()}`); // 打印购买金额
+  logger.info(`购买滑点: ${botConfig.buySlippage}%`); // 打印购买滑点
+
+  logger.info('- 出售 -');
+  logger.info(`自动出售: ${AUTO_SELL}`); // 打印自动出售设置
+  logger.info(`自动出售延迟: ${botConfig.autoSellDelay} 毫秒`); // 打印自动出售延迟
+  logger.info(`最大出售重试次数: ${botConfig.maxSellRetries}`); // 打印最大出售重试次数
+  logger.info(`出售滑点: ${botConfig.sellSlippage}%`); // 打印出售滑点
+  logger.info(`价格检查间隔: ${botConfig.priceCheckInterval} 毫秒`); // 打印价格检查间隔
+  logger.info(`价格检查持续时间: ${botConfig.priceCheckDuration} 毫秒`); // 打印价格检查持续时间
+  logger.info(`止盈: ${botConfig.takeProfit}%`); // 打印止盈设置
+  logger.info(`止损: ${botConfig.stopLoss}%`); // 打印止损设置
+
+  logger.info('- 抢购列表 -');
+  logger.info(`使用抢购列表: ${botConfig.useSnipeList}`); // 打印抢购列表设置
+  logger.info(`抢购列表刷新间隔: ${SNIPE_LIST_REFRESH_INTERVAL} 毫秒`); // 打印抢购列表刷新间隔
+
+  if (botConfig.useSnipeList) {
+    logger.info('- 过滤器 -');
+    logger.info(`启用抢购列表时过滤器被禁用`); // 打印过滤器禁用信息
+  } else {
+    logger.info('- 过滤器 -');
+    logger.info(`过滤器检查间隔: ${botConfig.filterCheckInterval} 毫秒`); // 打印过滤器检查间隔
+    logger.info(`过滤器检查持续时间: ${botConfig.filterCheckDuration} 毫秒`); // 打印过滤器检查持续时间
+    logger.info(`连续过滤器匹配次数: ${botConfig.consecutiveMatchCount}`); // 打印连续过滤器匹配次数
+    logger.info(`检查是否被放弃: ${botConfig.checkRenounced}`); // 打印检查是否被放弃设置
+    logger.info(`检查是否可冻结: ${botConfig.checkFreezable}`); // 打印检查是否可冻结设置
+    logger.info(`检查是否已销毁: ${botConfig.checkBurned}`); // 打印检查是否已销毁设置
+    logger.info(`最小池大小: ${botConfig.minPoolSize.toFixed()}`); // 打印最小池大小
+    logger.info(`最大池大小: ${botConfig.maxPoolSize.toFixed()}`); // 打印最大池大小
+  }
+
+  logger.info('------- 配置结束 -------');
+
+  logger.info('机器人正在运行！按 CTRL + C 停止它。');
+}
+
+// 启动监听器的函数
+const runListener = async () => {
+  logger.level = LOG_LEVEL; // 设置日志级别
+  logger.info('机器人正在启动...'); // 打印启动信息
+
+  const marketCache = new MarketCache(connection); // 创建市场缓存
+  const poolCache = new PoolCache(); // 创建池缓存
+  let txExecutor: TransactionExecutor; // 定义交易执行器变量
+
+  // 根据配置选择交易执行器
+  switch (TRANSACTION_EXECUTOR) {
+    case 'warp': {
+      txExecutor = new WarpTransactionExecutor(CUSTOM_FEE); // 创建Warp交易执行器
+      break;
+    }
+    case 'jito': {
+      txExecutor = new JitoTransactionExecutor(CUSTOM_FEE, connection); // 创建Jito交易执行器
+      break;
+    }
+    default: {
+      txExecutor = new DefaultTransactionExecutor(connection); // 默认交易执行器
+      break;
+    }
+  }
+
+  const wallet = getWallet(PRIVATE_KEY.trim()); // 获取钱包
+  const quoteToken = getToken(QUOTE_MINT); // 获取报价代币
+  const botConfig = <BotConfig>{
+    wallet,
+    quoteAta: getAssociatedTokenAddressSync(quoteToken.mint, wallet.publicKey), // 获取关联代币地址
+    checkRenounced: CHECK_IF_MINT_IS_RENOUNCED,
+    checkFreezable: CHECK_IF_FREEZABLE,
+    checkBurned: CHECK_IF_BURNED,
+    minPoolSize: new TokenAmount(quoteToken, MIN_POOL_SIZE, false), // 最小池大小
+    maxPoolSize: new TokenAmount(quoteToken, MAX_POOL_SIZE, false), // 最大池大小
+    quoteToken,
+    quoteAmount: new TokenAmount(quoteToken, QUOTE_AMOUNT, false), // 报价金额
+    oneTokenAtATime: ONE_TOKEN_AT_A_TIME,
+    useSnipeList: USE_SNIPE_LIST,
+    autoSell: AUTO_SELL,
+    autoSellDelay: AUTO_SELL_DELAY,
+    maxSellRetries: MAX_SELL_RETRIES,
+    autoBuyDelay: AUTO_BUY_DELAY,
+    maxBuyRetries: MAX_BUY_RETRIES,
+    unitLimit: COMPUTE_UNIT_LIMIT, // 计算单元限制
+    unitPrice: COMPUTE_UNIT_PRICE, // 计算单元价格
+    takeProfit: TAKE_PROFIT, // 止盈设置
+    stopLoss: STOP_LOSS, // 止损设置
+    buySlippage: BUY_SLIPPAGE, // 购买滑点
+    sellSlippage: SELL_SLIPPAGE, // 出售滑点
+    priceCheckInterval: PRICE_CHECK_INTERVAL, // 价格检查间隔
+    priceCheckDuration: PRICE_CHECK_DURATION, // 价格检查持续时间
+    filterCheckInterval: FILTER_CHECK_INTERVAL, // 过滤器检查间隔
+    filterCheckDuration: FILTER_CHECK_DURATION, // 过滤器检查持续时间
+    consecutiveMatchCount: CONSECUTIVE_FILTER_MATCHES, // 连续匹配次数
+  };
+
+  const bot = new Bot(connection, marketCache, poolCache, txExecutor, botConfig); // 创建机器人实例
+  const valid = await bot.validate(); // 验证机器人配置
+
+  if (!valid) {
+    logger.info('机器人正在退出...'); // 验证失败时退出
+    process.exit(1); // 退出程序
+  }
+
+  if (PRE_LOAD_EXISTING_MARKETS) {
+    await marketCache.init({ quoteToken }); // 初始化市场缓存
+  }
+
+  const runTimestamp = Math.floor(new Date().getTime() / 1000); // 获取当前时间戳
+  const listeners = new Listeners(connection); // 创建监听器实例
+  await listeners.start({
+    walletPublicKey: wallet.publicKey,
+    quoteToken,
+    autoSell: AUTO_SELL,
+    cacheNewMarkets: CACHE_NEW_MARKETS,
+  });
+
+  // 监听市场信息更新
+  listeners.on('market', (updatedAccountInfo: KeyedAccountInfo) => {
+    const marketState = MARKET_STATE_LAYOUT_V3.decode(updatedAccountInfo.accountInfo.data); // 解码市场状态
+    marketCache.save(updatedAccountInfo.accountId.toString(), marketState); // 保存市场状态
+  });
+
+  // 监听池信息更新
+  listeners.on('pool', async (updatedAccountInfo: KeyedAccountInfo) => {
+    const poolState = LIQUIDITY_STATE_LAYOUT_V4.decode(updatedAccountInfo.accountInfo.data); // 解码池状态
+    const poolOpenTime = parseInt(poolState.poolOpenTime.toString()); // 获取池开放时间
+    const exists = await poolCache.get(poolState.baseMint.toString()); // 检查池是否存在
+
+    // 如果池不存在且开放时间在当前时间之后，则进行购买
+    if (!exists && poolOpenTime > runTimestamp) {
+      poolCache.save(updatedAccountInfo.accountId.toString(), poolState); // 保存池状态
+      await bot.buy(updatedAccountInfo.accountId, poolState); // 执行购买
+    }
+  });
+
+  // 监听钱包信息更新
+  listeners.on('wallet', async (updatedAccountInfo: KeyedAccountInfo) => {
+    const accountData = AccountLayout.decode(updatedAccountInfo.accountInfo.data); // 解码账户数据
+
+    // 如果账户数据的mint与报价代币相同，则返回
+    if (accountData.mint.equals(quoteToken.mint)) {
+      return;
+    }
+
+    await bot.sell(updatedAccountInfo.accountId, accountData); // 执行出售
+  });
+
+  printDetails(wallet, quoteToken, bot); // 打印详细信息
+};
+
+// 运行监听器
+runListener();
Index: Bot原版/Bot Solana Sniper Main/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/index.ts b/Bot原版/Bot Solana Sniper Main/index.ts
new file mode 100644
--- /dev/null	(date 1732301213261)
+++ b/Bot原版/Bot Solana Sniper Main/index.ts	(date 1732301213261)
@@ -0,0 +1,241 @@
+import { MarketCache, PoolCache } from './cache';
+import { Listeners } from './listeners';
+import { Connection, KeyedAccountInfo, Keypair } from '@solana/web3.js';
+import { LIQUIDITY_STATE_LAYOUT_V4, MARKET_STATE_LAYOUT_V3, Token, TokenAmount } from '@raydium-io/raydium-sdk';
+import { AccountLayout, getAssociatedTokenAddressSync } from '@solana/spl-token';
+import { Bot, BotConfig } from './bot';
+import { DefaultTransactionExecutor, TransactionExecutor } from './transactions';
+import {
+  getToken,
+  getWallet,
+  logger,
+  COMMITMENT_LEVEL,
+  RPC_ENDPOINT,
+  RPC_WEBSOCKET_ENDPOINT,
+  PRE_LOAD_EXISTING_MARKETS,
+  LOG_LEVEL,
+  CHECK_IF_MUTABLE,
+  CHECK_IF_MINT_IS_RENOUNCED,
+  CHECK_IF_FREEZABLE,
+  CHECK_IF_BURNED,
+  QUOTE_MINT,
+  MAX_POOL_SIZE,
+  MIN_POOL_SIZE,
+  QUOTE_AMOUNT,
+  PRIVATE_KEY,
+  USE_SNIPE_LIST,
+  ONE_TOKEN_AT_A_TIME,
+  AUTO_SELL_DELAY,
+  MAX_SELL_RETRIES,
+  AUTO_SELL,
+  MAX_BUY_RETRIES,
+  AUTO_BUY_DELAY,
+  COMPUTE_UNIT_LIMIT,
+  COMPUTE_UNIT_PRICE,
+  CACHE_NEW_MARKETS,
+  TAKE_PROFIT,
+  STOP_LOSS,
+  BUY_SLIPPAGE,
+  SELL_SLIPPAGE,
+  PRICE_CHECK_DURATION,
+  PRICE_CHECK_INTERVAL,
+  SNIPE_LIST_REFRESH_INTERVAL,
+  TRANSACTION_EXECUTOR,
+  CUSTOM_FEE,
+  FILTER_CHECK_INTERVAL,
+  FILTER_CHECK_DURATION,
+  CONSECUTIVE_FILTER_MATCHES,
+} from './helpers';
+import { version } from './package.json';
+import { WarpTransactionExecutor } from './transactions/warp-transaction-executor';
+import { JitoTransactionExecutor } from './transactions/jito-rpc-transaction-executor';
+
+const connection = new Connection(RPC_ENDPOINT, {
+  wsEndpoint: RPC_WEBSOCKET_ENDPOINT,
+  commitment: COMMITMENT_LEVEL,
+});
+
+function printDetails(wallet: Keypair, quoteToken: Token, bot: Bot) {
+  logger.info(`  
+  
+ █████╗ ██╗  ██╗██╗███████╗██████╗  ██████╗ ████████╗
+██╔══██╗╚██╗██╔╝██║██╔════╝██╔══██╗██╔═══██╗╚══██╔══╝
+███████║ ╚███╔╝ ██║███████╗██████╔╝██║   ██║   ██║   
+██╔══██║ ██╔██╗ ██║╚════██║██╔══██╗██║   ██║   ██║   
+██║  ██║██╔╝ ██╗██║███████║██████╔╝╚██████╔╝   ██║   
+╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚══════╝╚═════╝  ╚═════╝    ╚═╝                                                   
+                            
+          AxisBot Solana Sniper v1.0
+          Made by AxisBot Team
+          Version: ${version}                                          
+  `);
+
+  const botConfig = bot.config;
+
+  logger.info('------- CONFIGURATION START -------');
+  logger.info(`Wallet: ${wallet.publicKey.toString()}`);
+
+  logger.info('- Bot -');
+
+  logger.info(
+    `Using ${TRANSACTION_EXECUTOR} executer: ${bot.isWarp || bot.isJito || (TRANSACTION_EXECUTOR === 'default' ? true : false)}`,
+  );
+  if (bot.isWarp || bot.isJito) {
+    logger.info(`${TRANSACTION_EXECUTOR} fee: ${CUSTOM_FEE}`);
+  } else {
+    logger.info(`Compute Unit limit: ${botConfig.unitLimit}`);
+    logger.info(`Compute Unit price (micro lamports): ${botConfig.unitPrice}`);
+  }
+
+  logger.info(`Single token at the time: ${botConfig.oneTokenAtATime}`);
+  logger.info(`Pre load existing markets: ${PRE_LOAD_EXISTING_MARKETS}`);
+  logger.info(`Cache new markets: ${CACHE_NEW_MARKETS}`);
+  logger.info(`Log level: ${LOG_LEVEL}`);
+
+  logger.info('- Buy -');
+  logger.info(`Buy amount: ${botConfig.quoteAmount.toFixed()} ${botConfig.quoteToken.name}`);
+  logger.info(`Auto buy delay: ${botConfig.autoBuyDelay} ms`);
+  logger.info(`Max buy retries: ${botConfig.maxBuyRetries}`);
+  logger.info(`Buy amount (${quoteToken.symbol}): ${botConfig.quoteAmount.toFixed()}`);
+  logger.info(`Buy slippage: ${botConfig.buySlippage}%`);
+
+  logger.info('- Sell -');
+  logger.info(`Auto sell: ${AUTO_SELL}`);
+  logger.info(`Auto sell delay: ${botConfig.autoSellDelay} ms`);
+  logger.info(`Max sell retries: ${botConfig.maxSellRetries}`);
+  logger.info(`Sell slippage: ${botConfig.sellSlippage}%`);
+  logger.info(`Price check interval: ${botConfig.priceCheckInterval} ms`);
+  logger.info(`Price check duration: ${botConfig.priceCheckDuration} ms`);
+  logger.info(`Take profit: ${botConfig.takeProfit}%`);
+  logger.info(`Stop loss: ${botConfig.stopLoss}%`);
+
+  logger.info('- Snipe list -');
+  logger.info(`Snipe list: ${botConfig.useSnipeList}`);
+  logger.info(`Snipe list refresh interval: ${SNIPE_LIST_REFRESH_INTERVAL} ms`);
+
+  if (botConfig.useSnipeList) {
+    logger.info('- Filters -');
+    logger.info(`Filters are disabled when snipe list is on`);
+  } else {
+    logger.info('- Filters -');
+    logger.info(`Filter check interval: ${botConfig.filterCheckInterval} ms`);
+    logger.info(`Filter check duration: ${botConfig.filterCheckDuration} ms`);
+    logger.info(`Consecutive filter matches: ${botConfig.consecutiveMatchCount}`);
+    logger.info(`Check renounced: ${botConfig.checkRenounced}`);
+    logger.info(`Check freezable: ${botConfig.checkFreezable}`);
+    logger.info(`Check burned: ${botConfig.checkBurned}`);
+    logger.info(`Min pool size: ${botConfig.minPoolSize.toFixed()}`);
+    logger.info(`Max pool size: ${botConfig.maxPoolSize.toFixed()}`);
+  }
+
+  logger.info('------- CONFIGURATION END -------');
+
+  logger.info('Bot is running! Press CTRL + C to stop it.');
+}
+
+const runListener = async () => {
+  logger.level = LOG_LEVEL;
+  logger.info('Bot is starting...');
+
+  const marketCache = new MarketCache(connection);
+  const poolCache = new PoolCache();
+  let txExecutor: TransactionExecutor;
+
+  switch (TRANSACTION_EXECUTOR) {
+    case 'warp': {
+      txExecutor = new WarpTransactionExecutor(CUSTOM_FEE);
+      break;
+    }
+    case 'jito': {
+      txExecutor = new JitoTransactionExecutor(CUSTOM_FEE, connection);
+      break;
+    }
+    default: {
+      txExecutor = new DefaultTransactionExecutor(connection);
+      break;
+    }
+  }
+
+  const wallet = getWallet(PRIVATE_KEY.trim());
+  const quoteToken = getToken(QUOTE_MINT);
+  const botConfig = <BotConfig>{
+    wallet,
+    quoteAta: getAssociatedTokenAddressSync(quoteToken.mint, wallet.publicKey),
+    checkRenounced: CHECK_IF_MINT_IS_RENOUNCED,
+    checkFreezable: CHECK_IF_FREEZABLE,
+    checkBurned: CHECK_IF_BURNED,
+    minPoolSize: new TokenAmount(quoteToken, MIN_POOL_SIZE, false),
+    maxPoolSize: new TokenAmount(quoteToken, MAX_POOL_SIZE, false),
+    quoteToken,
+    quoteAmount: new TokenAmount(quoteToken, QUOTE_AMOUNT, false),
+    oneTokenAtATime: ONE_TOKEN_AT_A_TIME,
+    useSnipeList: USE_SNIPE_LIST,
+    autoSell: AUTO_SELL,
+    autoSellDelay: AUTO_SELL_DELAY,
+    maxSellRetries: MAX_SELL_RETRIES,
+    autoBuyDelay: AUTO_BUY_DELAY,
+    maxBuyRetries: MAX_BUY_RETRIES,
+    unitLimit: COMPUTE_UNIT_LIMIT,
+    unitPrice: COMPUTE_UNIT_PRICE,
+    takeProfit: TAKE_PROFIT,
+    stopLoss: STOP_LOSS,
+    buySlippage: BUY_SLIPPAGE,
+    sellSlippage: SELL_SLIPPAGE,
+    priceCheckInterval: PRICE_CHECK_INTERVAL,
+    priceCheckDuration: PRICE_CHECK_DURATION,
+    filterCheckInterval: FILTER_CHECK_INTERVAL,
+    filterCheckDuration: FILTER_CHECK_DURATION,
+    consecutiveMatchCount: CONSECUTIVE_FILTER_MATCHES,
+  };
+
+  const bot = new Bot(connection, marketCache, poolCache, txExecutor, botConfig);
+  const valid = await bot.validate();
+
+  if (!valid) {
+    logger.info('Bot is exiting...');
+    process.exit(1);
+  }
+
+  if (PRE_LOAD_EXISTING_MARKETS) {
+    await marketCache.init({ quoteToken });
+  }
+
+  const runTimestamp = Math.floor(new Date().getTime() / 1000);
+  const listeners = new Listeners(connection);
+  await listeners.start({
+    walletPublicKey: wallet.publicKey,
+    quoteToken,
+    autoSell: AUTO_SELL,
+    cacheNewMarkets: CACHE_NEW_MARKETS,
+  });
+
+  listeners.on('market', (updatedAccountInfo: KeyedAccountInfo) => {
+    const marketState = MARKET_STATE_LAYOUT_V3.decode(updatedAccountInfo.accountInfo.data);
+    marketCache.save(updatedAccountInfo.accountId.toString(), marketState);
+  });
+
+  listeners.on('pool', async (updatedAccountInfo: KeyedAccountInfo) => {
+    const poolState = LIQUIDITY_STATE_LAYOUT_V4.decode(updatedAccountInfo.accountInfo.data);
+    const poolOpenTime = parseInt(poolState.poolOpenTime.toString());
+    const exists = await poolCache.get(poolState.baseMint.toString());
+
+    if (!exists && poolOpenTime > runTimestamp) {
+      poolCache.save(updatedAccountInfo.accountId.toString(), poolState);
+      await bot.buy(updatedAccountInfo.accountId, poolState);
+    }
+  });
+
+  listeners.on('wallet', async (updatedAccountInfo: KeyedAccountInfo) => {
+    const accountData = AccountLayout.decode(updatedAccountInfo.accountInfo.data);
+
+    if (accountData.mint.equals(quoteToken.mint)) {
+      return;
+    }
+
+    await bot.sell(updatedAccountInfo.accountId, accountData);
+  });
+
+  printDetails(wallet, quoteToken, bot);
+};
+
+runListener();
Index: Bot汉化/bot Spam Sniper/strategy1/swap1.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Spam Sniper/strategy1/swap1.js b/Bot汉化/bot Spam Sniper/strategy1/swap1.js
new file mode 100644
--- /dev/null	(date 1727201869844)
+++ b/Bot汉化/bot Spam Sniper/strategy1/swap1.js	(date 1727201869844)
@@ -0,0 +1,113 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const assert_1 = __importDefault(require("assert"));
+const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
+const config_1 = require("../utils/config.js");
+const formatAmmKeysById_1 = require("./formatAmmKeysById.js");
+const util_1 = require("../utils/util.js");
+const { LAMPORTS_PER_SOL } = require("@solana/web3.js");
+const web3 = require("@solana/web3.js");
+const connection = config_1.connection;
+function swapOnlyAmm(input) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const outputToken = new raydium_sdk_1.Token(raydium_sdk_1.TOKEN_PROGRAM_ID, new web3.PublicKey(input.tokenAddress), input.poolKeys.lpDecimals);
+        const { innerTransactions } = yield raydium_sdk_1.Liquidity.makeSwapInstructionSimple({
+            connection: config_1.connection,
+            poolKeys: input.poolKeys,
+            userKeys: {
+                tokenAccounts: input.walletTokenAccounts,
+                owner: input.wallet.publicKey,
+            },
+            amountIn: input.inputTokenAmount,
+            amountOut: new raydium_sdk_1.TokenAmount(outputToken, 1),
+            fixedSide: 'in',
+            makeTxVersion: config_1.makeTxVersion,
+        });
+        return { txids: yield (0, util_1.buildAndSendTx)(innerTransactions) };
+    });
+}
+
+const buyAmtSol = config_1.amtBuySol;
+function swap(poolKeys, tokenAddress) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const ownerAddress = config_1.ownerAddress;
+        const inputToken = new raydium_sdk_1.Token(raydium_sdk_1.TOKEN_PROGRAM_ID, new web3_js_1.PublicKey('So11111111111111111111111111111111111111112'), 9, 'WSOL', 'WSOL'); // WSOL
+        const inputTokenAmount = new raydium_sdk_1.TokenAmount(inputToken, LAMPORTS_PER_SOL * buyAmtSol);
+        const slippage = new raydium_sdk_1.Percent(1, 100);
+        const walletTokenAccounts = yield (0, util_1.getWalletTokenAccount)(config_1.connection, config_1.wallet.publicKey);
+        swapOnlyAmm({
+            poolKeys,
+            tokenAddress, 
+            inputTokenAmount,
+            slippage,
+            walletTokenAccounts,
+            wallet: config_1.wallet,
+        }).then(({ txids }) => {
+            /** continue with txids */
+            console.log('txids', txids);
+            if(txids.length === 1){
+                monitorTokenSell(txids[0], tokenAddress, ownerAddress, poolKeys.baseVault.toString(), poolKeys.quoteVault.toString());
+            }
+        }).catch(error => {
+            console.log(error);
+            swap(poolKeys, tokenAddress);
+        })
+    });
+}
+exports.swap = swap
+
+async function getTx(tx){
+    return await connection.getTransaction(tx, {
+        maxSupportedTransactionVersion: 0,
+        commitment: "confirmed"
+    })
+}
+
+async function getBalances(tx, tokenAddress, ownerAddress){
+    let validTx = await getTx(tx);
+    while(validTx === null){
+        validTx = await getTx(tx);
+        if(validTx !== null){
+            for(const account of validTx.meta.postTokenBalances){
+                if(account.mint === tokenAddress && account.owner === ownerAddress){
+                    return account.uiTokenAmount.uiAmount;
+                }
+            }
+        }
+    }
+}
+
+async function getTokenPriceInSol(baseVault, quoteVault){
+    const baseVaultAccount = await connection.getTokenAccountBalance(new web3.PublicKey(baseVault));
+    const quoteVaultAccount = await connection.getTokenAccountBalance(new web3.PublicKey(quoteVault));
+    const baseVaultAccountAmount = baseVaultAccount.value.uiAmount;
+    const quoteVaultAccountAmount = quoteVaultAccount.value.uiAmount;
+    return (quoteVaultAccountAmount / baseVaultAccountAmount);
+}
+
+async function monitorTokenSell(tx, tokenAddress, ownerAddress, baseVault, quoteVault){
+    const tokenBalance = await getBalances(tx, tokenAddress, ownerAddress);
+    const buyPrice = (buyAmtSol / tokenBalance);
+    monitorToken(buyPrice, baseVault, quoteVault);
+}
+
+async function monitorToken(buyPrice, baseVault, quoteVault){
+    let interval = setInterval(async () => {
+        const currentPrice = await getTokenPriceInSol(baseVault, quoteVault);
+        console.log("buy price: " + buyPrice + " current price: " + currentPrice);
+        const percentIncrease = ((buyPrice - currentPrice) / buyPrice) * 100;
+        console.log("percent increase: " + percentIncrease);
+    }, 500)
+}
\ No newline at end of file
Index: Bot原版/Bot Spam Sniper/strategy1/formatAmmKeysById.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Spam Sniper/strategy1/formatAmmKeysById.js b/Bot原版/Bot Spam Sniper/strategy1/formatAmmKeysById.js
new file mode 100644
--- /dev/null	(date 1732301213981)
+++ b/Bot原版/Bot Spam Sniper/strategy1/formatAmmKeysById.js	(date 1732301213981)
@@ -0,0 +1,63 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.formatAmmKeysById = void 0;
+const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
+const web3_js_1 = require("@solana/web3.js");
+const config_1 = require("../utils/config.js");
+function formatAmmKeysById(id) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const account = yield config_1.connection.getAccountInfo(new web3_js_1.PublicKey(id));
+        if (account === null)
+            throw Error(' get id info error ');
+        const info = raydium_sdk_1.LIQUIDITY_STATE_LAYOUT_V4.decode(account.data);
+        const marketId = info.marketId;
+        const marketAccount = yield config_1.connection.getAccountInfo(marketId);
+        if (marketAccount === null)
+            throw Error(' get market info error');
+        const marketInfo = raydium_sdk_1.MARKET_STATE_LAYOUT_V3.decode(marketAccount.data);
+        const lpMint = info.lpMint;
+        const lpMintAccount = yield config_1.connection.getAccountInfo(lpMint);
+        if (lpMintAccount === null)
+            throw Error(' get lp mint info error');
+        const lpMintInfo = raydium_sdk_1.SPL_MINT_LAYOUT.decode(lpMintAccount.data);
+        return {
+            id,
+            baseMint: info.baseMint.toString(),
+            quoteMint: info.quoteMint.toString(),
+            lpMint: info.lpMint.toString(),
+            baseDecimals: info.baseDecimal.toNumber(),
+            quoteDecimals: info.quoteDecimal.toNumber(),
+            // lpDecimals: lpMintInfo.decimals,
+            lpDecimals: info.baseDecimal.toNumber(),
+            version: 4,
+            programId: account.owner.toString(),
+            authority: raydium_sdk_1.Liquidity.getAssociatedAuthority({ programId: account.owner }).publicKey.toString(),
+            openOrders: info.openOrders.toString(),
+            targetOrders: info.targetOrders.toString(),
+            baseVault: info.baseVault.toString(),
+            quoteVault: info.quoteVault.toString(),
+            withdrawQueue: info.withdrawQueue.toString(),
+            lpVault: info.lpVault.toString(),
+            marketVersion: 3,
+            marketProgramId: info.marketProgramId.toString(),
+            marketId: info.marketId.toString(),
+            marketAuthority: raydium_sdk_1.Market.getAssociatedAuthority({ programId: info.marketProgramId, marketId: info.marketId }).publicKey.toString(),
+            marketBaseVault: marketInfo.baseVault.toString(),
+            marketQuoteVault: marketInfo.quoteVault.toString(),
+            marketBids: marketInfo.bids.toString(),
+            marketAsks: marketInfo.asks.toString(),
+            marketEventQueue: marketInfo.eventQueue.toString(),
+            lookupTableAccount: web3_js_1.PublicKey.default.toString()
+        };
+    });
+}
+exports.formatAmmKeysById = formatAmmKeysById;
\ No newline at end of file
Index: Bot汉化/bot Spam Sniper/strategy2/derivePoolKeys.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Spam Sniper/strategy2/derivePoolKeys.js b/Bot汉化/bot Spam Sniper/strategy2/derivePoolKeys.js
new file mode 100644
--- /dev/null	(date 1727201869901)
+++ b/Bot汉化/bot Spam Sniper/strategy2/derivePoolKeys.js	(date 1727201869901)
@@ -0,0 +1,100 @@
+const web3 = require('@solana/web3.js');
+const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
+const spl = require('@solana/spl-token');
+const {Market} = require('@openbook-dex/openbook');
+const config = require('../utils/config.js');
+
+const connection = config.connection;
+
+const wsolAddress = 'So11111111111111111111111111111111111111112';
+const openbookProgramId = new web3.PublicKey('srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX');
+
+const rayProgram = new web3.PublicKey('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8');
+const myAccount = new web3.PublicKey(config.ownerAddress);
+
+async function derivePoolKeys(id){
+    console.log(id);
+    const marketId = new web3.PublicKey(id);
+
+    const marketInfo = await getMarketInfo(marketId);
+    const marketDeco = await getDecodedData(marketInfo);
+
+    const baseMint = marketDeco.baseMint;
+    const baseMintData = await getMintData(baseMint);
+    const baseDecimals = await getDecimals(baseMintData);
+    const ownerBaseAta = await getOwnerAta(baseMint, myAccount);
+    
+    const quoteMint = marketDeco.quoteMint;
+    const quoteMintData = await getMintData(quoteMint);
+    const quoteDecimals = await getDecimals(quoteMintData);
+    const ownerQuoteAta = await getOwnerAta(quoteMint, myAccount);
+
+    const authority = (raydium_sdk_1.findProgramAddress([Buffer.from([97, 109, 109, 32, 97, 117, 116, 104, 111, 114, 105, 116, 121])], rayProgram))['publicKey'];
+    // const marketAuthority = getVaultSigner(marketId, marketDeco);
+
+    const poolKeys = {
+        id: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('amm_associated_seed', 'utf-8')], rayProgram)['publicKey'],
+        baseMint: baseMint,
+        quoteMint, quoteMint,
+        lpMint: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('lp_mint_associated_seed', 'utf-8')], rayProgram)['publicKey'],
+        baseDecimals: baseDecimals,
+        quoteDecimals: quoteDecimals,
+        lpDecimals: baseDecimals,
+        version: 4,
+        programId: rayProgram,
+        authority: authority,
+        openOrders: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('open_order_associated_seed', 'utf-8')], rayProgram)['publicKey'],
+        targetOrders: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('target_associated_seed', 'utf-8')], rayProgram)['publicKey'],
+        baseVault: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('coin_vault_associated_seed', 'utf-8')], rayProgram)['publicKey'],
+        quoteVault: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('pc_vault_associated_seed', 'utf-8')], rayProgram)['publicKey'],
+        // withdrawQueue: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('withdraw_associated_seed', 'utf-8')], rayProgram)['publicKey'],
+        // lpVault: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('temp_lp_token_associated_seed', 'utf-8')], rayProgram)['publicKey'],
+        withdrawQueue: new web3.PublicKey('11111111111111111111111111111111'),
+        lpVault: new web3.PublicKey('11111111111111111111111111111111'),
+        marketVersion: 3,
+        marketProgramId: openbookProgramId,
+        // marketProgramId: new web3.PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'),
+        marketId: marketId,
+        marketAuthority: raydium_sdk_1.Market.getAssociatedAuthority({ programId: new web3.PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'), marketId: marketId }).publicKey,
+        marketBaseVault: marketDeco.baseVault,
+        marketQuoteVault: marketDeco.quoteVault,
+        marketBids: marketDeco.bids,
+        marketAsks: marketDeco.asks,
+        marketEventQueue: marketDeco.eventQueue,
+        // ownerBaseAta: ownerBaseAta,
+        // ownerQuoteAta: ownerQuoteAta,
+        // marketAuthority: marketAuthority,
+        // coinVault: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('pc_vault_associated_seed', 'utf-8')], rayProgram)['publicKey'],
+        lookupTableAccount: web3.PublicKey.default
+    };
+    return poolKeys;
+}
+exports.derivePoolKeys = derivePoolKeys;
+
+async function getMarketInfo(marketId){
+    const marketInfo = await connection.getAccountInfo(marketId);
+    return marketInfo;
+}
+
+async function getDecodedData(marketInfo){
+    return await Market.getLayout(openbookProgramId).decode(marketInfo.data);
+}
+
+async function getMintData(mint){
+    return await connection.getAccountInfo(mint);
+}
+
+async function getDecimals(mintData){
+    return raydium_sdk_1.SPL_MINT_LAYOUT.decode(mintData.data).decimals;
+}
+
+async function getOwnerAta(mint, publicKey){
+    const foundAta = web3.PublicKey.findProgramAddressSync([publicKey.toBuffer(), spl.TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], spl.ASSOCIATED_TOKEN_PROGRAM_ID)[0];
+    return foundAta;
+}
+
+function getVaultSigner(marketId, marketDeco){
+    const seeds = [marketId.toBuffer()];
+    const seedsWithNonce = seeds.concat(Buffer.from([Number(marketDeco.vaultSignerNonce.toString())]), Buffer.alloc(7));
+    return web3.PublicKey.createProgramAddressSync(seedsWithNonce, openbookProgramId);
+}
\ No newline at end of file
Index: Bot原版/Bot Spam Sniper/strategy1/start1.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Spam Sniper/strategy1/start1.js b/Bot原版/Bot Spam Sniper/strategy1/start1.js
new file mode 100644
--- /dev/null	(date 1732301214015)
+++ b/Bot原版/Bot Spam Sniper/strategy1/start1.js	(date 1732301214015)
@@ -0,0 +1,110 @@
+const web3 = require('@solana/web3.js')
+const WebSocket = require('ws')
+const swap = require('./swap1.js')
+const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
+const config = require('../utils/config.js');
+
+const connection = config.connection;
+const ws = new WebSocket(config.websocketConnection)
+    ws.onopen = () => {
+        ws.send(
+            JSON.stringify({
+                jsonrpc: '2.0',
+                id: 1,
+                method: 'blockSubscribe',
+                params: [{"mentionsAccountOrProgram": "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8"}, {"commitment": "confirmed", "maxSupportedTransactionVersion": 0, "encoding": "jsonParsed"}]
+            })
+        )
+    }
+
+ws.on('message', (evt) => {
+    try {
+        const buffer = evt.toString('utf8');
+        parseBlock(JSON.parse(buffer));
+        return;
+    } catch (e) {
+        console.log(e)
+    }
+})
+
+function isStatusError(status){
+    if(status.hasOwnProperty('Err')){
+        return true;
+    }
+    else if(status.hasOwnProperty('Ok')){
+        return false;
+    }
+}
+
+async function getTx(tx){
+    return await connection.getTransaction(tx, {
+        "commitment": "confirmed",
+        "maxSupportedTransactionVersion": 0,
+        "encoded": "jsonParsed"
+    })
+}
+
+let swapped = false;
+function parseBlock(transaction){
+    try{
+        const tx = transaction.params.result.value.block.transactions;
+        for(let i = 0; i < tx.length; i++){
+            if(tx[i].meta.innerInstructions !== undefined && tx[i].meta.innerInstructions.length !== 0){
+                if(tx[i].meta.innerInstructions[0].instructions.length === 32 && !isStatusError(tx[i].meta.status)){
+                    const signature = tx[i].transaction.signatures[0];
+                    console.log(tx[i].transaction.signatures);
+                    if(swapped === false){
+                        swapped = true;
+                        let now = new Date();
+                        let utcString = now.toUTCString();
+                        console.log(utcString);
+                        ws.close();
+                    }
+                }
+            }
+    }
+    } catch(error){
+        console.log("searching...")
+    }
+}
+
+async function getJsonPoolInfo(tx){
+    // market account
+    const marketAccount = await connection.getAccountInfo(new web3.PublicKey(tx.transaction.message.accountKeys[19].pubkey));
+    const marketInfo = raydium_sdk_1.MARKET_STATE_LAYOUT_V3.decode(marketAccount.data);
+    // get decimals
+    const getTokenAccount = await connection.getParsedAccountInfo(new web3.PublicKey(tx.transaction.message.accountKeys[17].pubkey));
+    const decimals = getTokenAccount.value.data.parsed.info.decimals;
+    // create poolKeys object
+    const keys = {
+        id: tx.transaction.message.accountKeys[2].pubkey,
+        baseMint: tx.transaction.message.accountKeys[17].pubkey,
+        quoteMint: 'So11111111111111111111111111111111111111112',
+        lpMint: tx.transaction.message.accountKeys[4].pubkey,
+        baseDecimals: decimals,
+        quoteDecimals: 9,
+        lpDecimals: decimals,
+        version: 4,
+        programId: '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8',
+        authority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',
+        openOrders: tx.transaction.message.accountKeys[3].pubkey,
+        targetOrders: tx.transaction.message.accountKeys[7].pubkey,
+        baseVault: tx.transaction.message.accountKeys[5].pubkey,
+        quoteVault: tx.transaction.message.accountKeys[6].pubkey,
+        withdrawQueue: '11111111111111111111111111111111',
+        lpVault: '11111111111111111111111111111111',
+        marketVersion: 3,
+        marketProgramId: tx.transaction.message.accountKeys[22].pubkey,
+        marketId: tx.transaction.message.accountKeys[19].pubkey,
+        marketAuthority: raydium_sdk_1.Market.getAssociatedAuthority({ programId: new web3.PublicKey(tx.transaction.message.accountKeys[22].pubkey), marketId: new web3.PublicKey(tx.transaction.message.accountKeys[19].pubkey) }).publicKey.toString(),
+        marketBaseVault: marketInfo.baseVault.toString(),
+        marketQuoteVault: marketInfo.quoteVault.toString(),
+        marketBids: marketInfo.bids.toString(),
+        marketAsks: marketInfo.asks.toString(),
+        marketEventQueue: marketInfo.eventQueue.toString(),
+        lookupTableAccount: '11111111111111111111111111111111'
+    }
+    // convert poolKeys object to JSON
+    const jsonPoolKeys = raydium_sdk_1.jsonInfo2PoolKeys(keys);
+    swap.swap(jsonPoolKeys, tx.transaction.message.accountKeys[17].pubkey);
+}
\ No newline at end of file
Index: Bot原版/Bot Spam Sniper/utils/decoderaylog.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Spam Sniper/utils/decoderaylog.js b/Bot原版/Bot Spam Sniper/utils/decoderaylog.js
new file mode 100644
--- /dev/null	(date 1732301214210)
+++ b/Bot原版/Bot Spam Sniper/utils/decoderaylog.js	(date 1732301214210)
@@ -0,0 +1,53 @@
+const web3 = require('@solana/web3.js');
+const WebSocket = require('ws');
+const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
+const bs64 = require('bs64');
+const config = require('./config');
+
+const connection = config.connection;
+
+const feeAddress = '7YttLkHDoNj9wyDur5pM1ejNaAvT9X4eqaYcHQqtj2G5'
+const rayProgram = new web3.PublicKey('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8');
+
+const ws = new WebSocket(config.websocketConnection)
+    ws.onopen = () => {
+        ws.send(
+            JSON.stringify({
+                jsonrpc: '2.0',
+                id: 1,
+                method: 'logsSubscribe',
+                params: [{"mentions": [feeAddress]}, {"commitment": "processed"}]
+            })
+        )
+    }
+
+ws.on('message', (evt) => {
+    try {
+        const buffer = evt.toString('utf8');
+        parseLogs(JSON.parse(buffer));
+        return;
+    } catch (e) {
+        console.log(e)
+    }
+})
+
+function parseLogs(buffer){
+    if(buffer.params === undefined){
+        return;
+    }
+    let now = new Date();
+    let utcString = now.toUTCString();
+    console.log(utcString);
+    const allLogs = buffer.params.result.value.logs;
+    for(const log of allLogs){
+        if(log.includes("ray_log")){
+            const rayLogSplit = log.split(" ");
+            const rayLog = rayLogSplit[3];
+            const logData = Buffer.from(rayLog, "base64");
+            const market = new web3.PublicKey(logData.subarray(75 - 32), 75);
+            console.log(market)
+            const pool = raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), market.toBuffer(), Buffer.from('amm_associated_seed', 'utf-8')], rayProgram)['publicKey'];
+            console.log(pool);
+        }
+    }
+}
\ No newline at end of file
Index: Bot汉化/bot Spam Sniper/strategy1/formatAmmKeysById.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Spam Sniper/strategy1/formatAmmKeysById.js b/Bot汉化/bot Spam Sniper/strategy1/formatAmmKeysById.js
new file mode 100644
--- /dev/null	(date 1727201869754)
+++ b/Bot汉化/bot Spam Sniper/strategy1/formatAmmKeysById.js	(date 1727201869754)
@@ -0,0 +1,63 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.formatAmmKeysById = void 0;
+const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
+const web3_js_1 = require("@solana/web3.js");
+const config_1 = require("../utils/config.js");
+function formatAmmKeysById(id) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const account = yield config_1.connection.getAccountInfo(new web3_js_1.PublicKey(id));
+        if (account === null)
+            throw Error(' get id info error ');
+        const info = raydium_sdk_1.LIQUIDITY_STATE_LAYOUT_V4.decode(account.data);
+        const marketId = info.marketId;
+        const marketAccount = yield config_1.connection.getAccountInfo(marketId);
+        if (marketAccount === null)
+            throw Error(' get market info error');
+        const marketInfo = raydium_sdk_1.MARKET_STATE_LAYOUT_V3.decode(marketAccount.data);
+        const lpMint = info.lpMint;
+        const lpMintAccount = yield config_1.connection.getAccountInfo(lpMint);
+        if (lpMintAccount === null)
+            throw Error(' get lp mint info error');
+        const lpMintInfo = raydium_sdk_1.SPL_MINT_LAYOUT.decode(lpMintAccount.data);
+        return {
+            id,
+            baseMint: info.baseMint.toString(),
+            quoteMint: info.quoteMint.toString(),
+            lpMint: info.lpMint.toString(),
+            baseDecimals: info.baseDecimal.toNumber(),
+            quoteDecimals: info.quoteDecimal.toNumber(),
+            // lpDecimals: lpMintInfo.decimals,
+            lpDecimals: info.baseDecimal.toNumber(),
+            version: 4,
+            programId: account.owner.toString(),
+            authority: raydium_sdk_1.Liquidity.getAssociatedAuthority({ programId: account.owner }).publicKey.toString(),
+            openOrders: info.openOrders.toString(),
+            targetOrders: info.targetOrders.toString(),
+            baseVault: info.baseVault.toString(),
+            quoteVault: info.quoteVault.toString(),
+            withdrawQueue: info.withdrawQueue.toString(),
+            lpVault: info.lpVault.toString(),
+            marketVersion: 3,
+            marketProgramId: info.marketProgramId.toString(),
+            marketId: info.marketId.toString(),
+            marketAuthority: raydium_sdk_1.Market.getAssociatedAuthority({ programId: info.marketProgramId, marketId: info.marketId }).publicKey.toString(),
+            marketBaseVault: marketInfo.baseVault.toString(),
+            marketQuoteVault: marketInfo.quoteVault.toString(),
+            marketBids: marketInfo.bids.toString(),
+            marketAsks: marketInfo.asks.toString(),
+            marketEventQueue: marketInfo.eventQueue.toString(),
+            lookupTableAccount: web3_js_1.PublicKey.default.toString()
+        };
+    });
+}
+exports.formatAmmKeysById = formatAmmKeysById;
\ No newline at end of file
Index: Bot汉化/bot Spam Sniper/strategy1/start1.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Spam Sniper/strategy1/start1.js b/Bot汉化/bot Spam Sniper/strategy1/start1.js
new file mode 100644
--- /dev/null	(date 1727201869796)
+++ b/Bot汉化/bot Spam Sniper/strategy1/start1.js	(date 1727201869796)
@@ -0,0 +1,110 @@
+const web3 = require('@solana/web3.js')
+const WebSocket = require('ws')
+const swap = require('./swap1.js')
+const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
+const config = require('../utils/config.js');
+
+const connection = config.connection;
+const ws = new WebSocket(config.websocketConnection)
+    ws.onopen = () => {
+        ws.send(
+            JSON.stringify({
+                jsonrpc: '2.0',
+                id: 1,
+                method: 'blockSubscribe',
+                params: [{"mentionsAccountOrProgram": "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8"}, {"commitment": "confirmed", "maxSupportedTransactionVersion": 0, "encoding": "jsonParsed"}]
+            })
+        )
+    }
+
+ws.on('message', (evt) => {
+    try {
+        const buffer = evt.toString('utf8');
+        parseBlock(JSON.parse(buffer));
+        return;
+    } catch (e) {
+        console.log(e)
+    }
+})
+
+function isStatusError(status){
+    if(status.hasOwnProperty('Err')){
+        return true;
+    }
+    else if(status.hasOwnProperty('Ok')){
+        return false;
+    }
+}
+
+async function getTx(tx){
+    return await connection.getTransaction(tx, {
+        "commitment": "confirmed",
+        "maxSupportedTransactionVersion": 0,
+        "encoded": "jsonParsed"
+    })
+}
+
+let swapped = false;
+function parseBlock(transaction){
+    try{
+        const tx = transaction.params.result.value.block.transactions;
+        for(let i = 0; i < tx.length; i++){
+            if(tx[i].meta.innerInstructions !== undefined && tx[i].meta.innerInstructions.length !== 0){
+                if(tx[i].meta.innerInstructions[0].instructions.length === 32 && !isStatusError(tx[i].meta.status)){
+                    const signature = tx[i].transaction.signatures[0];
+                    console.log(tx[i].transaction.signatures);
+                    if(swapped === false){
+                        swapped = true;
+                        let now = new Date();
+                        let utcString = now.toUTCString();
+                        console.log(utcString);
+                        ws.close();
+                    }
+                }
+            }
+    }
+    } catch(error){
+        console.log("searching...")
+    }
+}
+
+async function getJsonPoolInfo(tx){
+    // market account
+    const marketAccount = await connection.getAccountInfo(new web3.PublicKey(tx.transaction.message.accountKeys[19].pubkey));
+    const marketInfo = raydium_sdk_1.MARKET_STATE_LAYOUT_V3.decode(marketAccount.data);
+    // get decimals
+    const getTokenAccount = await connection.getParsedAccountInfo(new web3.PublicKey(tx.transaction.message.accountKeys[17].pubkey));
+    const decimals = getTokenAccount.value.data.parsed.info.decimals;
+    // create poolKeys object
+    const keys = {
+        id: tx.transaction.message.accountKeys[2].pubkey,
+        baseMint: tx.transaction.message.accountKeys[17].pubkey,
+        quoteMint: 'So11111111111111111111111111111111111111112',
+        lpMint: tx.transaction.message.accountKeys[4].pubkey,
+        baseDecimals: decimals,
+        quoteDecimals: 9,
+        lpDecimals: decimals,
+        version: 4,
+        programId: '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8',
+        authority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',
+        openOrders: tx.transaction.message.accountKeys[3].pubkey,
+        targetOrders: tx.transaction.message.accountKeys[7].pubkey,
+        baseVault: tx.transaction.message.accountKeys[5].pubkey,
+        quoteVault: tx.transaction.message.accountKeys[6].pubkey,
+        withdrawQueue: '11111111111111111111111111111111',
+        lpVault: '11111111111111111111111111111111',
+        marketVersion: 3,
+        marketProgramId: tx.transaction.message.accountKeys[22].pubkey,
+        marketId: tx.transaction.message.accountKeys[19].pubkey,
+        marketAuthority: raydium_sdk_1.Market.getAssociatedAuthority({ programId: new web3.PublicKey(tx.transaction.message.accountKeys[22].pubkey), marketId: new web3.PublicKey(tx.transaction.message.accountKeys[19].pubkey) }).publicKey.toString(),
+        marketBaseVault: marketInfo.baseVault.toString(),
+        marketQuoteVault: marketInfo.quoteVault.toString(),
+        marketBids: marketInfo.bids.toString(),
+        marketAsks: marketInfo.asks.toString(),
+        marketEventQueue: marketInfo.eventQueue.toString(),
+        lookupTableAccount: '11111111111111111111111111111111'
+    }
+    // convert poolKeys object to JSON
+    const jsonPoolKeys = raydium_sdk_1.jsonInfo2PoolKeys(keys);
+    swap.swap(jsonPoolKeys, tx.transaction.message.accountKeys[17].pubkey);
+}
\ No newline at end of file
Index: Bot原版/Bot Spam Sniper/utils/util.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Spam Sniper/utils/util.js b/Bot原版/Bot Spam Sniper/utils/util.js
new file mode 100644
--- /dev/null	(date 1732301214240)
+++ b/Bot原版/Bot Spam Sniper/utils/util.js	(date 1732301214240)
@@ -0,0 +1,70 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.sleepTime = exports.getATAAddress = exports.buildAndSendTx = exports.getWalletTokenAccount = exports.sendTx = void 0;
+const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
+const web3_js_1 = require("@solana/web3.js");
+const config_1 = require("./config");
+function sendTx(connection, payer, txs, options) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const txids = [];
+        for (const iTx of txs) {
+            if (iTx instanceof web3_js_1.VersionedTransaction) {
+                iTx.sign([payer]);
+                txids.push(yield connection.sendTransaction(iTx, options));
+            }
+            else {
+                txids.push(yield connection.sendTransaction(iTx, [payer], options));
+            }
+        }
+        return txids;
+    });
+}
+exports.sendTx = sendTx;
+function getWalletTokenAccount(connection, wallet) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const walletTokenAccount = yield connection.getTokenAccountsByOwner(wallet, {
+            programId: raydium_sdk_1.TOKEN_PROGRAM_ID,
+        });
+        return walletTokenAccount.value.map((i) => ({
+            pubkey: i.pubkey,
+            programId: i.account.owner,
+            accountInfo: raydium_sdk_1.SPL_ACCOUNT_LAYOUT.decode(i.account.data),
+        }));
+    });
+}
+exports.getWalletTokenAccount = getWalletTokenAccount;
+function buildAndSendTx(innerSimpleV0Transaction, options) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const willSendTx = yield (0, raydium_sdk_1.buildSimpleTransaction)({
+            connection: config_1.connection,
+            makeTxVersion: config_1.makeTxVersion,
+            payer: config_1.wallet.publicKey,
+            innerTransactions: innerSimpleV0Transaction,
+            addLookupTableInfo: config_1.addLookupTableInfo,
+        });
+        return yield sendTx(config_1.connection, config_1.wallet, willSendTx, options);
+    });
+}
+exports.buildAndSendTx = buildAndSendTx;
+function getATAAddress(programId, owner, mint) {
+    const { publicKey, nonce } = (0, raydium_sdk_1.findProgramAddress)([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], new web3_js_1.PublicKey("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"));
+    return { publicKey, nonce };
+}
+exports.getATAAddress = getATAAddress;
+function sleepTime(ms) {
+    return __awaiter(this, void 0, void 0, function* () {
+        console.log((new Date()).toLocaleString(), 'sleepTime', ms);
+        return new Promise(resolve => setTimeout(resolve, ms));
+    });
+}
+exports.sleepTime = sleepTime;
+//# sourceMappingURL=util.js.map
\ No newline at end of file
Index: Bot汉化/bot Solana Sniper Main/.env.copy
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/.env.copy b/Bot汉化/bot Solana Sniper Main/.env.copy
new file mode 100644
--- /dev/null	(date 1727201868833)
+++ b/Bot汉化/bot Solana Sniper Main/.env.copy	(date 1727201868833)
@@ -0,0 +1,50 @@
+# Wallet
+PRIVATE_KEY=
+
+# Connection
+RPC_ENDPOINT=https://solana-mainnet.rpc.extrnode.com/5b667693-6518-4921-8ea1-4f65ff09c463
+RPC_WEBSOCKET_ENDPOINT=wss://solana-mainnet.rpc.extrnode.com/5b667693-6518-4921-8ea1-4f65ff09c463
+COMMITMENT_LEVEL=confirmed
+
+# Bot
+LOG_LEVEL=trace
+ONE_TOKEN_AT_A_TIME=true
+PRE_LOAD_EXISTING_MARKETS=false
+CACHE_NEW_MARKETS=false
+# default or warp or jito
+TRANSACTION_EXECUTOR=jito
+# if using default executor, fee below will be applied
+COMPUTE_UNIT_LIMIT=101337
+COMPUTE_UNIT_PRICE=421197
+# if using warp or jito executor, fee below will be applied
+CUSTOM_FEE=0.01
+
+# Buy
+QUOTE_MINT=WSOL
+QUOTE_AMOUNT=0.001
+AUTO_BUY_DELAY=0
+MAX_BUY_RETRIES=10
+BUY_SLIPPAGE=100
+
+# Sell
+AUTO_SELL=true
+MAX_SELL_RETRIES=10
+AUTO_SELL_DELAY=0
+PRICE_CHECK_INTERVAL=2000
+PRICE_CHECK_DURATION=600000
+TAKE_PROFIT=100
+STOP_LOSS=20
+SELL_SLIPPAGE=100
+
+# Filters
+USE_SNIPE_LIST=false
+SNIPE_LIST_REFRESH_INTERVAL=30000
+FILTER_CHECK_DURATION=60000
+FILTER_CHECK_INTERVAL=2000
+CONSECUTIVE_FILTER_MATCHES=3
+CHECK_IF_MUTABLE=false
+CHECK_IF_MINT_IS_RENOUNCED=true
+CHECK_IF_FREEZABLE=false
+CHECK_IF_BURNED=true
+MIN_POOL_SIZE=3
+MAX_POOL_SIZE=20
Index: Bot原版/Bot Spam Sniper/strategy2/start2.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Spam Sniper/strategy2/start2.js b/Bot原版/Bot Spam Sniper/strategy2/start2.js
new file mode 100644
--- /dev/null	(date 1732301214115)
+++ b/Bot原版/Bot Spam Sniper/strategy2/start2.js	(date 1732301214115)
@@ -0,0 +1,83 @@
+const web3 = require('@solana/web3.js');
+const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
+const WebSocket = require('ws');
+const derivePoolKeys = require('./derivePoolKeys.js');
+const swap = require('./swap2.js');
+const config = require('../utils/config.js');
+
+const connection = config.connection;
+
+const ws = new WebSocket(config.websocketConnection)
+    ws.onopen = () => {
+        ws.send(
+            JSON.stringify({
+                jsonrpc: '2.0',
+                id: 1,
+                method: 'blockSubscribe',
+                params: [{"mentionsAccountOrProgram": "srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX"}, {"commitment": "confirmed", "maxSupportedTransactionVersion": 0, "encoding": "jsonParsed"}]
+            })
+        )
+    }
+
+ws.on('message', (evt) => {
+    try {
+        const buffer = evt.toString('utf8');
+        parseTxs(JSON.parse(buffer));
+        return;
+    } catch (e) {
+        console.log(e)
+    }
+})
+
+function parseTxs(txsFromBlock){
+    if(txsFromBlock.params === undefined){
+        return;
+    }
+    const allTx = txsFromBlock.params.result.value.block.transactions;
+    for(const tx of allTx){
+        if(parseLogs(tx.meta.logMessages) && tx.transaction.message.accountKeys.length === 13 && tx.transaction.message.instructions.length === 6){
+            ws.close();
+            console.log(tx.transaction.signatures)
+            parseAccountKeys(tx.transaction.message.accountKeys, tx.transaction.signatures);
+        }
+    }
+}
+
+function parseLogs(logs){
+    let invoke = 0;
+    let consumed = 0;
+    let success = 0;
+    for(const log of logs){
+        if(log.includes("Program srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX invoke")){
+            invoke += 1;
+        }
+        if(log.includes("Program srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX consumed")){
+            consumed += 1;
+        }
+        if(log.includes("Program srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX success")){
+            success += 1;
+        }
+    }
+    if(invoke === 1 && consumed === 1 && success === 1){
+        return true;
+    } else{
+        return false;
+    }
+}
+
+async function parseAccountKeys(keys, signature){
+    let marketId = null;
+    for(const key of keys){
+        console.log(key);
+        const keyData = await connection.getAccountInfo(new web3.PublicKey(key.pubkey));
+        if(keyData !== null && keyData.data.length === 388){
+            marketId = key.pubkey;
+        }
+    }
+    if(marketId === null){
+        parseAccountKeys(keys);
+    } else{
+        const poolKeys = await derivePoolKeys.derivePoolKeys(marketId);
+        swap.swap(poolKeys, signature);
+    }
+}
\ No newline at end of file
Index: Bot原版/Bot Spam Sniper/strategy2/swap2.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Spam Sniper/strategy2/swap2.js b/Bot原版/Bot Spam Sniper/strategy2/swap2.js
new file mode 100644
--- /dev/null	(date 1732301214151)
+++ b/Bot原版/Bot Spam Sniper/strategy2/swap2.js	(date 1732301214151)
@@ -0,0 +1,113 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const assert_1 = __importDefault(require("assert"));
+const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
+const config_1 = require("../utils/config.js");
+const util_1 = require("../utils/util.js");
+const { LAMPORTS_PER_SOL } = require("@solana/web3.js");
+const web3 = require("@solana/web3.js");
+const connection = config_1.connection;
+function swapOnlyAmm(input) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const outputToken = new raydium_sdk_1.Token(raydium_sdk_1.TOKEN_PROGRAM_ID, new web3.PublicKey(input.tokenAddress), input.poolKeys.lpDecimals);
+        const { innerTransactions } = yield raydium_sdk_1.Liquidity.makeSwapInstructionSimple({
+            connection: config_1.connection,
+            poolKeys: input.poolKeys,
+            userKeys: {
+                tokenAccounts: input.walletTokenAccounts,
+                owner: input.wallet.publicKey,
+            },
+            amountIn: input.inputTokenAmount,
+            amountOut: new raydium_sdk_1.TokenAmount(outputToken, 1),
+            fixedSide: 'in',
+            makeTxVersion: config_1.makeTxVersion,
+        });
+        return { txids: yield (0, util_1.buildAndSendTx)(innerTransactions) };
+    });
+}
+
+const buyAmtSol = config_1.amtBuySol;
+function swap(poolKeys, signature) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const ownerAddress = config_1.ownerAddress;
+        const inputToken = new raydium_sdk_1.Token(raydium_sdk_1.TOKEN_PROGRAM_ID, new web3_js_1.PublicKey('So11111111111111111111111111111111111111112'), 9, 'WSOL', 'WSOL'); // WSOL
+        const inputTokenAmount = new raydium_sdk_1.TokenAmount(inputToken, LAMPORTS_PER_SOL * buyAmtSol);
+        const slippage = new raydium_sdk_1.Percent(1, 100);
+        const walletTokenAccounts = yield (0, util_1.getWalletTokenAccount)(config_1.connection, config_1.wallet.publicKey);
+        swapOnlyAmm({
+            poolKeys,
+            tokenAddress: poolKeys.baseMint.toString(), 
+            inputTokenAmount,
+            slippage,
+            walletTokenAccounts,
+            wallet: config_1.wallet,
+        }).then(({ txids }) => {
+            /** continue with txids */
+            console.log('txids', txids);
+            if(txids.length === 1){
+                monitorTokenSell(txids[0], poolKeys.baseMint.toString(), ownerAddress, poolKeys.baseVault.toString(), poolKeys.quoteVault.toString());
+            }
+        }).catch(error => {
+            console.log(signature);
+            console.log(error);
+            swap(poolKeys, poolKeys.baseMint.toString());
+        })
+    });
+}
+exports.swap = swap
+
+async function getTx(tx){
+    return await connection.getTransaction(tx, {
+        maxSupportedTransactionVersion: 0,
+        commitment: "confirmed"
+    })
+}
+
+async function getBalances(tx, tokenAddress, ownerAddress){
+    let validTx = await getTx(tx);
+    while(validTx === null){
+        validTx = await getTx(tx);
+        if(validTx !== null){
+            for(const account of validTx.meta.postTokenBalances){
+                if(account.mint === tokenAddress && account.owner === ownerAddress){
+                    return account.uiTokenAmount.uiAmount;
+                }
+            }
+        }
+    }
+}
+
+async function getTokenPriceInSol(baseVault, quoteVault){
+    const baseVaultAccount = await connection.getTokenAccountBalance(new web3.PublicKey(baseVault));
+    const quoteVaultAccount = await connection.getTokenAccountBalance(new web3.PublicKey(quoteVault));
+    const baseVaultAccountAmount = baseVaultAccount.value.uiAmount;
+    const quoteVaultAccountAmount = quoteVaultAccount.value.uiAmount;
+    return (quoteVaultAccountAmount / baseVaultAccountAmount);
+}
+
+async function monitorTokenSell(tx, tokenAddress, ownerAddress, baseVault, quoteVault){
+    const tokenBalance = await getBalances(tx, tokenAddress, ownerAddress);
+    const buyPrice = (buyAmtSol / tokenBalance);
+    monitorToken(buyPrice, baseVault, quoteVault);
+}
+
+async function monitorToken(buyPrice, baseVault, quoteVault){
+    let interval = setInterval(async () => {
+        const currentPrice = await getTokenPriceInSol(baseVault, quoteVault);
+        console.log("buy price: " + buyPrice + " current price: " + currentPrice);
+        const percentIncrease = ((buyPrice - currentPrice) / buyPrice) * 100;
+        console.log("percent increase: " + percentIncrease);
+    }, 500)
+}
\ No newline at end of file
Index: Bot汉化/bot Solana Sniper Main/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/.gitignore b/Bot汉化/bot Solana Sniper Main/.gitignore
new file mode 100644
--- /dev/null	(date 1727201868868)
+++ b/Bot汉化/bot Solana Sniper Main/.gitignore	(date 1727201868868)
@@ -0,0 +1,139 @@
+# Logs
+logs
+*.log
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
+lerna-debug.log*
+.pnpm-debug.log*
+
+# Diagnostic reports (https://nodejs.org/api/report.html)
+report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
+
+# Runtime data
+pids
+*.pid
+*.seed
+*.pid.lock
+
+# Directory for instrumented libs generated by jscoverage/JSCover
+lib-cov
+
+# Coverage directory used by tools like istanbul
+coverage
+*.lcov
+
+# nyc test coverage
+.nyc_output
+
+# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
+.grunt
+
+# Bower dependency directory (https://bower.io/)
+bower_components
+
+# node-waf configuration
+.lock-wscript
+
+# Compiled binary addons (https://nodejs.org/api/addons.html)
+build/Release
+
+# Dependency directories
+node_modules/
+jspm_packages/
+
+# Snowpack dependency directory (https://snowpack.dev/)
+web_modules/
+
+# TypeScript cache
+*.tsbuildinfo
+
+# Optional npm cache directory
+.npm
+
+# Optional eslint cache
+.eslintcache
+
+# Optional stylelint cache
+.stylelintcache
+
+# Microbundle cache
+.rpt2_cache/
+.rts2_cache_cjs/
+.rts2_cache_es/
+.rts2_cache_umd/
+
+# Optional REPL history
+.node_repl_history
+
+# Output of 'npm pack'
+*.tgz
+
+# Yarn Integrity file
+.yarn-integrity
+
+# dotenv environment variable files
+.env
+.env.development.local
+.env.test.local
+.env.production.local
+.env.local
+
+# parcel-bundler cache (https://parceljs.org/)
+.cache
+.parcel-cache
+
+# Next.js build output
+.next
+out
+
+# Nuxt.js build / generate output
+.nuxt
+dist
+
+# Gatsby files
+.cache/
+# Comment in the public line in if your project uses Gatsby and not Next.js
+# https://nextjs.org/blog/next-9-1#public-directory-support
+# public
+
+# vuepress build output
+.vuepress/dist
+
+# vuepress v2.x temp and cache directory
+.temp
+.cache
+
+# Docusaurus cache and generated files
+.docusaurus
+
+# Serverless directories
+.serverless/
+
+# FuseBox cache
+.fusebox/
+
+# DynamoDB Local files
+.dynamodb/
+
+# TernJS port file
+.tern-port
+
+# Stores VSCode versions used for testing VSCode extensions
+.vscode-test
+
+# PNPM
+pnpm-lock.yaml
+
+# yarn v2
+.yarn/cache
+.yarn/unplugged
+.yarn/build-state.yml
+.yarn/install-state.gz
+.pnp.*
+
+# JetBrains
+.idea
+
+# Visual Studio Code 
+*.code-workspace
Index: Bot汉化/bot Spam Sniper/strategy2/start2.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Spam Sniper/strategy2/start2.js b/Bot汉化/bot Spam Sniper/strategy2/start2.js
new file mode 100644
--- /dev/null	(date 1727201869959)
+++ b/Bot汉化/bot Spam Sniper/strategy2/start2.js	(date 1727201869959)
@@ -0,0 +1,83 @@
+const web3 = require('@solana/web3.js');
+const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
+const WebSocket = require('ws');
+const derivePoolKeys = require('./derivePoolKeys.js');
+const swap = require('./swap2.js');
+const config = require('../utils/config.js');
+
+const connection = config.connection;
+
+const ws = new WebSocket(config.websocketConnection)
+    ws.onopen = () => {
+        ws.send(
+            JSON.stringify({
+                jsonrpc: '2.0',
+                id: 1,
+                method: 'blockSubscribe',
+                params: [{"mentionsAccountOrProgram": "srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX"}, {"commitment": "confirmed", "maxSupportedTransactionVersion": 0, "encoding": "jsonParsed"}]
+            })
+        )
+    }
+
+ws.on('message', (evt) => {
+    try {
+        const buffer = evt.toString('utf8');
+        parseTxs(JSON.parse(buffer));
+        return;
+    } catch (e) {
+        console.log(e)
+    }
+})
+
+function parseTxs(txsFromBlock){
+    if(txsFromBlock.params === undefined){
+        return;
+    }
+    const allTx = txsFromBlock.params.result.value.block.transactions;
+    for(const tx of allTx){
+        if(parseLogs(tx.meta.logMessages) && tx.transaction.message.accountKeys.length === 13 && tx.transaction.message.instructions.length === 6){
+            ws.close();
+            console.log(tx.transaction.signatures)
+            parseAccountKeys(tx.transaction.message.accountKeys, tx.transaction.signatures);
+        }
+    }
+}
+
+function parseLogs(logs){
+    let invoke = 0;
+    let consumed = 0;
+    let success = 0;
+    for(const log of logs){
+        if(log.includes("Program srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX invoke")){
+            invoke += 1;
+        }
+        if(log.includes("Program srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX consumed")){
+            consumed += 1;
+        }
+        if(log.includes("Program srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX success")){
+            success += 1;
+        }
+    }
+    if(invoke === 1 && consumed === 1 && success === 1){
+        return true;
+    } else{
+        return false;
+    }
+}
+
+async function parseAccountKeys(keys, signature){
+    let marketId = null;
+    for(const key of keys){
+        console.log(key);
+        const keyData = await connection.getAccountInfo(new web3.PublicKey(key.pubkey));
+        if(keyData !== null && keyData.data.length === 388){
+            marketId = key.pubkey;
+        }
+    }
+    if(marketId === null){
+        parseAccountKeys(keys);
+    } else{
+        const poolKeys = await derivePoolKeys.derivePoolKeys(marketId);
+        swap.swap(poolKeys, signature);
+    }
+}
\ No newline at end of file
Index: Bot原版/Bot Spam Sniper/strategy1/swap1.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Spam Sniper/strategy1/swap1.js b/Bot原版/Bot Spam Sniper/strategy1/swap1.js
new file mode 100644
--- /dev/null	(date 1732301214041)
+++ b/Bot原版/Bot Spam Sniper/strategy1/swap1.js	(date 1732301214041)
@@ -0,0 +1,113 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const assert_1 = __importDefault(require("assert"));
+const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
+const config_1 = require("../utils/config.js");
+const formatAmmKeysById_1 = require("./formatAmmKeysById.js");
+const util_1 = require("../utils/util.js");
+const { LAMPORTS_PER_SOL } = require("@solana/web3.js");
+const web3 = require("@solana/web3.js");
+const connection = config_1.connection;
+function swapOnlyAmm(input) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const outputToken = new raydium_sdk_1.Token(raydium_sdk_1.TOKEN_PROGRAM_ID, new web3.PublicKey(input.tokenAddress), input.poolKeys.lpDecimals);
+        const { innerTransactions } = yield raydium_sdk_1.Liquidity.makeSwapInstructionSimple({
+            connection: config_1.connection,
+            poolKeys: input.poolKeys,
+            userKeys: {
+                tokenAccounts: input.walletTokenAccounts,
+                owner: input.wallet.publicKey,
+            },
+            amountIn: input.inputTokenAmount,
+            amountOut: new raydium_sdk_1.TokenAmount(outputToken, 1),
+            fixedSide: 'in',
+            makeTxVersion: config_1.makeTxVersion,
+        });
+        return { txids: yield (0, util_1.buildAndSendTx)(innerTransactions) };
+    });
+}
+
+const buyAmtSol = config_1.amtBuySol;
+function swap(poolKeys, tokenAddress) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const ownerAddress = config_1.ownerAddress;
+        const inputToken = new raydium_sdk_1.Token(raydium_sdk_1.TOKEN_PROGRAM_ID, new web3_js_1.PublicKey('So11111111111111111111111111111111111111112'), 9, 'WSOL', 'WSOL'); // WSOL
+        const inputTokenAmount = new raydium_sdk_1.TokenAmount(inputToken, LAMPORTS_PER_SOL * buyAmtSol);
+        const slippage = new raydium_sdk_1.Percent(1, 100);
+        const walletTokenAccounts = yield (0, util_1.getWalletTokenAccount)(config_1.connection, config_1.wallet.publicKey);
+        swapOnlyAmm({
+            poolKeys,
+            tokenAddress, 
+            inputTokenAmount,
+            slippage,
+            walletTokenAccounts,
+            wallet: config_1.wallet,
+        }).then(({ txids }) => {
+            /** continue with txids */
+            console.log('txids', txids);
+            if(txids.length === 1){
+                monitorTokenSell(txids[0], tokenAddress, ownerAddress, poolKeys.baseVault.toString(), poolKeys.quoteVault.toString());
+            }
+        }).catch(error => {
+            console.log(error);
+            swap(poolKeys, tokenAddress);
+        })
+    });
+}
+exports.swap = swap
+
+async function getTx(tx){
+    return await connection.getTransaction(tx, {
+        maxSupportedTransactionVersion: 0,
+        commitment: "confirmed"
+    })
+}
+
+async function getBalances(tx, tokenAddress, ownerAddress){
+    let validTx = await getTx(tx);
+    while(validTx === null){
+        validTx = await getTx(tx);
+        if(validTx !== null){
+            for(const account of validTx.meta.postTokenBalances){
+                if(account.mint === tokenAddress && account.owner === ownerAddress){
+                    return account.uiTokenAmount.uiAmount;
+                }
+            }
+        }
+    }
+}
+
+async function getTokenPriceInSol(baseVault, quoteVault){
+    const baseVaultAccount = await connection.getTokenAccountBalance(new web3.PublicKey(baseVault));
+    const quoteVaultAccount = await connection.getTokenAccountBalance(new web3.PublicKey(quoteVault));
+    const baseVaultAccountAmount = baseVaultAccount.value.uiAmount;
+    const quoteVaultAccountAmount = quoteVaultAccount.value.uiAmount;
+    return (quoteVaultAccountAmount / baseVaultAccountAmount);
+}
+
+async function monitorTokenSell(tx, tokenAddress, ownerAddress, baseVault, quoteVault){
+    const tokenBalance = await getBalances(tx, tokenAddress, ownerAddress);
+    const buyPrice = (buyAmtSol / tokenBalance);
+    monitorToken(buyPrice, baseVault, quoteVault);
+}
+
+async function monitorToken(buyPrice, baseVault, quoteVault){
+    let interval = setInterval(async () => {
+        const currentPrice = await getTokenPriceInSol(baseVault, quoteVault);
+        console.log("buy price: " + buyPrice + " current price: " + currentPrice);
+        const percentIncrease = ((buyPrice - currentPrice) / buyPrice) * 100;
+        console.log("percent increase: " + percentIncrease);
+    }, 500)
+}
\ No newline at end of file
Index: Bot汉化/bot Spam Sniper/strategy2/swap2.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Spam Sniper/strategy2/swap2.js b/Bot汉化/bot Spam Sniper/strategy2/swap2.js
new file mode 100644
--- /dev/null	(date 1727201870030)
+++ b/Bot汉化/bot Spam Sniper/strategy2/swap2.js	(date 1727201870030)
@@ -0,0 +1,113 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const assert_1 = __importDefault(require("assert"));
+const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
+const config_1 = require("../utils/config.js");
+const util_1 = require("../utils/util.js");
+const { LAMPORTS_PER_SOL } = require("@solana/web3.js");
+const web3 = require("@solana/web3.js");
+const connection = config_1.connection;
+function swapOnlyAmm(input) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const outputToken = new raydium_sdk_1.Token(raydium_sdk_1.TOKEN_PROGRAM_ID, new web3.PublicKey(input.tokenAddress), input.poolKeys.lpDecimals);
+        const { innerTransactions } = yield raydium_sdk_1.Liquidity.makeSwapInstructionSimple({
+            connection: config_1.connection,
+            poolKeys: input.poolKeys,
+            userKeys: {
+                tokenAccounts: input.walletTokenAccounts,
+                owner: input.wallet.publicKey,
+            },
+            amountIn: input.inputTokenAmount,
+            amountOut: new raydium_sdk_1.TokenAmount(outputToken, 1),
+            fixedSide: 'in',
+            makeTxVersion: config_1.makeTxVersion,
+        });
+        return { txids: yield (0, util_1.buildAndSendTx)(innerTransactions) };
+    });
+}
+
+const buyAmtSol = config_1.amtBuySol;
+function swap(poolKeys, signature) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const ownerAddress = config_1.ownerAddress;
+        const inputToken = new raydium_sdk_1.Token(raydium_sdk_1.TOKEN_PROGRAM_ID, new web3_js_1.PublicKey('So11111111111111111111111111111111111111112'), 9, 'WSOL', 'WSOL'); // WSOL
+        const inputTokenAmount = new raydium_sdk_1.TokenAmount(inputToken, LAMPORTS_PER_SOL * buyAmtSol);
+        const slippage = new raydium_sdk_1.Percent(1, 100);
+        const walletTokenAccounts = yield (0, util_1.getWalletTokenAccount)(config_1.connection, config_1.wallet.publicKey);
+        swapOnlyAmm({
+            poolKeys,
+            tokenAddress: poolKeys.baseMint.toString(), 
+            inputTokenAmount,
+            slippage,
+            walletTokenAccounts,
+            wallet: config_1.wallet,
+        }).then(({ txids }) => {
+            /** continue with txids */
+            console.log('txids', txids);
+            if(txids.length === 1){
+                monitorTokenSell(txids[0], poolKeys.baseMint.toString(), ownerAddress, poolKeys.baseVault.toString(), poolKeys.quoteVault.toString());
+            }
+        }).catch(error => {
+            console.log(signature);
+            console.log(error);
+            swap(poolKeys, poolKeys.baseMint.toString());
+        })
+    });
+}
+exports.swap = swap
+
+async function getTx(tx){
+    return await connection.getTransaction(tx, {
+        maxSupportedTransactionVersion: 0,
+        commitment: "confirmed"
+    })
+}
+
+async function getBalances(tx, tokenAddress, ownerAddress){
+    let validTx = await getTx(tx);
+    while(validTx === null){
+        validTx = await getTx(tx);
+        if(validTx !== null){
+            for(const account of validTx.meta.postTokenBalances){
+                if(account.mint === tokenAddress && account.owner === ownerAddress){
+                    return account.uiTokenAmount.uiAmount;
+                }
+            }
+        }
+    }
+}
+
+async function getTokenPriceInSol(baseVault, quoteVault){
+    const baseVaultAccount = await connection.getTokenAccountBalance(new web3.PublicKey(baseVault));
+    const quoteVaultAccount = await connection.getTokenAccountBalance(new web3.PublicKey(quoteVault));
+    const baseVaultAccountAmount = baseVaultAccount.value.uiAmount;
+    const quoteVaultAccountAmount = quoteVaultAccount.value.uiAmount;
+    return (quoteVaultAccountAmount / baseVaultAccountAmount);
+}
+
+async function monitorTokenSell(tx, tokenAddress, ownerAddress, baseVault, quoteVault){
+    const tokenBalance = await getBalances(tx, tokenAddress, ownerAddress);
+    const buyPrice = (buyAmtSol / tokenBalance);
+    monitorToken(buyPrice, baseVault, quoteVault);
+}
+
+async function monitorToken(buyPrice, baseVault, quoteVault){
+    let interval = setInterval(async () => {
+        const currentPrice = await getTokenPriceInSol(baseVault, quoteVault);
+        console.log("buy price: " + buyPrice + " current price: " + currentPrice);
+        const percentIncrease = ((buyPrice - currentPrice) / buyPrice) * 100;
+        console.log("percent increase: " + percentIncrease);
+    }, 500)
+}
\ No newline at end of file
Index: Bot原版/Bot Spam Sniper/strategy2/derivePoolKeys.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Spam Sniper/strategy2/derivePoolKeys.js b/Bot原版/Bot Spam Sniper/strategy2/derivePoolKeys.js
new file mode 100644
--- /dev/null	(date 1732301214081)
+++ b/Bot原版/Bot Spam Sniper/strategy2/derivePoolKeys.js	(date 1732301214081)
@@ -0,0 +1,100 @@
+const web3 = require('@solana/web3.js');
+const raydium_sdk_1 = require("@raydium-io/raydium-sdk");
+const spl = require('@solana/spl-token');
+const {Market} = require('@openbook-dex/openbook');
+const config = require('../utils/config.js');
+
+const connection = config.connection;
+
+const wsolAddress = 'So11111111111111111111111111111111111111112';
+const openbookProgramId = new web3.PublicKey('srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX');
+
+const rayProgram = new web3.PublicKey('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8');
+const myAccount = new web3.PublicKey(config.ownerAddress);
+
+async function derivePoolKeys(id){
+    console.log(id);
+    const marketId = new web3.PublicKey(id);
+
+    const marketInfo = await getMarketInfo(marketId);
+    const marketDeco = await getDecodedData(marketInfo);
+
+    const baseMint = marketDeco.baseMint;
+    const baseMintData = await getMintData(baseMint);
+    const baseDecimals = await getDecimals(baseMintData);
+    const ownerBaseAta = await getOwnerAta(baseMint, myAccount);
+    
+    const quoteMint = marketDeco.quoteMint;
+    const quoteMintData = await getMintData(quoteMint);
+    const quoteDecimals = await getDecimals(quoteMintData);
+    const ownerQuoteAta = await getOwnerAta(quoteMint, myAccount);
+
+    const authority = (raydium_sdk_1.findProgramAddress([Buffer.from([97, 109, 109, 32, 97, 117, 116, 104, 111, 114, 105, 116, 121])], rayProgram))['publicKey'];
+    // const marketAuthority = getVaultSigner(marketId, marketDeco);
+
+    const poolKeys = {
+        id: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('amm_associated_seed', 'utf-8')], rayProgram)['publicKey'],
+        baseMint: baseMint,
+        quoteMint, quoteMint,
+        lpMint: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('lp_mint_associated_seed', 'utf-8')], rayProgram)['publicKey'],
+        baseDecimals: baseDecimals,
+        quoteDecimals: quoteDecimals,
+        lpDecimals: baseDecimals,
+        version: 4,
+        programId: rayProgram,
+        authority: authority,
+        openOrders: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('open_order_associated_seed', 'utf-8')], rayProgram)['publicKey'],
+        targetOrders: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('target_associated_seed', 'utf-8')], rayProgram)['publicKey'],
+        baseVault: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('coin_vault_associated_seed', 'utf-8')], rayProgram)['publicKey'],
+        quoteVault: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('pc_vault_associated_seed', 'utf-8')], rayProgram)['publicKey'],
+        // withdrawQueue: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('withdraw_associated_seed', 'utf-8')], rayProgram)['publicKey'],
+        // lpVault: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('temp_lp_token_associated_seed', 'utf-8')], rayProgram)['publicKey'],
+        withdrawQueue: new web3.PublicKey('11111111111111111111111111111111'),
+        lpVault: new web3.PublicKey('11111111111111111111111111111111'),
+        marketVersion: 3,
+        marketProgramId: openbookProgramId,
+        // marketProgramId: new web3.PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'),
+        marketId: marketId,
+        marketAuthority: raydium_sdk_1.Market.getAssociatedAuthority({ programId: new web3.PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'), marketId: marketId }).publicKey,
+        marketBaseVault: marketDeco.baseVault,
+        marketQuoteVault: marketDeco.quoteVault,
+        marketBids: marketDeco.bids,
+        marketAsks: marketDeco.asks,
+        marketEventQueue: marketDeco.eventQueue,
+        // ownerBaseAta: ownerBaseAta,
+        // ownerQuoteAta: ownerQuoteAta,
+        // marketAuthority: marketAuthority,
+        // coinVault: raydium_sdk_1.findProgramAddress([rayProgram.toBuffer(), marketId.toBuffer(), Buffer.from('pc_vault_associated_seed', 'utf-8')], rayProgram)['publicKey'],
+        lookupTableAccount: web3.PublicKey.default
+    };
+    return poolKeys;
+}
+exports.derivePoolKeys = derivePoolKeys;
+
+async function getMarketInfo(marketId){
+    const marketInfo = await connection.getAccountInfo(marketId);
+    return marketInfo;
+}
+
+async function getDecodedData(marketInfo){
+    return await Market.getLayout(openbookProgramId).decode(marketInfo.data);
+}
+
+async function getMintData(mint){
+    return await connection.getAccountInfo(mint);
+}
+
+async function getDecimals(mintData){
+    return raydium_sdk_1.SPL_MINT_LAYOUT.decode(mintData.data).decimals;
+}
+
+async function getOwnerAta(mint, publicKey){
+    const foundAta = web3.PublicKey.findProgramAddressSync([publicKey.toBuffer(), spl.TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], spl.ASSOCIATED_TOKEN_PROGRAM_ID)[0];
+    return foundAta;
+}
+
+function getVaultSigner(marketId, marketDeco){
+    const seeds = [marketId.toBuffer()];
+    const seedsWithNonce = seeds.concat(Buffer.from([Number(marketDeco.vaultSignerNonce.toString())]), Buffer.alloc(7));
+    return web3.PublicKey.createProgramAddressSync(seedsWithNonce, openbookProgramId);
+}
\ No newline at end of file
Index: Bot原版/Bot Solana Sniper Main/cache/pool.cache.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/cache/pool.cache.ts b/Bot原版/Bot Solana Sniper Main/cache/pool.cache.ts
new file mode 100644
--- /dev/null	(date 1732301213461)
+++ b/Bot原版/Bot Solana Sniper Main/cache/pool.cache.ts	(date 1732301213461)
@@ -0,0 +1,20 @@
+import { LiquidityStateV4 } from '@raydium-io/raydium-sdk';
+import { logger } from '../helpers';
+
+export class PoolCache {
+  private readonly keys: Map<string, { id: string; state: LiquidityStateV4 }> = new Map<
+    string,
+    { id: string; state: LiquidityStateV4 }
+  >();
+
+  public save(id: string, state: LiquidityStateV4) {
+    if (!this.keys.has(state.baseMint.toString())) {
+      logger.trace(`Caching new pool for mint: ${state.baseMint.toString()}`);
+      this.keys.set(state.baseMint.toString(), { id, state });
+    }
+  }
+
+  public async get(mint: string): Promise<{ id: string; state: LiquidityStateV4 }> {
+    return this.keys.get(mint)!;
+  }
+}
Index: Bot原版/Bot Solana Sniper Main/cache/snipe-list.cache.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/cache/snipe-list.cache.ts b/Bot原版/Bot Solana Sniper Main/cache/snipe-list.cache.ts
new file mode 100644
--- /dev/null	(date 1732301213481)
+++ b/Bot原版/Bot Solana Sniper Main/cache/snipe-list.cache.ts	(date 1732301213481)
@@ -0,0 +1,35 @@
+import fs from 'fs';
+import path from 'path';
+import { logger, SNIPE_LIST_REFRESH_INTERVAL } from '../helpers';
+
+export class SnipeListCache {
+  private snipeList: string[] = [];
+  private fileLocation = path.join(__dirname, '../snipe-list.txt');
+
+  constructor() {
+    setInterval(() => this.loadSnipeList(), SNIPE_LIST_REFRESH_INTERVAL);
+  }
+
+  public init() {
+    this.loadSnipeList();
+  }
+
+  public isInList(mint: string) {
+    return this.snipeList.includes(mint);
+  }
+
+  private loadSnipeList() {
+    logger.trace(`Refreshing snipe list...`);
+
+    const count = this.snipeList.length;
+    const data = fs.readFileSync(this.fileLocation, 'utf-8');
+    this.snipeList = data
+      .split('\n')
+      .map((a) => a.trim())
+      .filter((a) => a);
+
+    if (this.snipeList.length != count) {
+      logger.info(`Loaded snipe list: ${this.snipeList.length}`);
+    }
+  }
+}
Index: Bot原版/Bot Solana Sniper Main/cache/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/cache/index.ts b/Bot原版/Bot Solana Sniper Main/cache/index.ts
new file mode 100644
--- /dev/null	(date 1732301213431)
+++ b/Bot原版/Bot Solana Sniper Main/cache/index.ts	(date 1732301213431)
@@ -0,0 +1,3 @@
+export * from './market.cache';
+export * from './pool.cache';
+export * from './snipe-list.cache';
Index: Bot原版/Bot Solana Sniper Main/cache/market.cache.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/cache/market.cache.ts b/Bot原版/Bot Solana Sniper Main/cache/market.cache.ts
new file mode 100644
--- /dev/null	(date 1732301213441)
+++ b/Bot原版/Bot Solana Sniper Main/cache/market.cache.ts	(date 1732301213441)
@@ -0,0 +1,58 @@
+import { Connection, PublicKey } from '@solana/web3.js';
+import { getMinimalMarketV3, logger, MINIMAL_MARKET_STATE_LAYOUT_V3, MinimalMarketLayoutV3 } from '../helpers';
+import { MAINNET_PROGRAM_ID, MARKET_STATE_LAYOUT_V3, Token } from '@raydium-io/raydium-sdk';
+
+export class MarketCache {
+  private readonly keys: Map<string, MinimalMarketLayoutV3> = new Map<string, MinimalMarketLayoutV3>();
+  constructor(private readonly connection: Connection) {}
+
+  async init(config: { quoteToken: Token }) {
+    logger.debug({}, `Fetching all existing ${config.quoteToken.symbol} markets...`);
+
+    const accounts = await this.connection.getProgramAccounts(MAINNET_PROGRAM_ID.OPENBOOK_MARKET, {
+      commitment: this.connection.commitment,
+      dataSlice: {
+        offset: MARKET_STATE_LAYOUT_V3.offsetOf('eventQueue'),
+        length: MINIMAL_MARKET_STATE_LAYOUT_V3.span,
+      },
+      filters: [
+        { dataSize: MARKET_STATE_LAYOUT_V3.span },
+        {
+          memcmp: {
+            offset: MARKET_STATE_LAYOUT_V3.offsetOf('quoteMint'),
+            bytes: config.quoteToken.mint.toBase58(),
+          },
+        },
+      ],
+    });
+
+    for (const account of accounts) {
+      const market = MINIMAL_MARKET_STATE_LAYOUT_V3.decode(account.account.data);
+      this.keys.set(account.pubkey.toString(), market);
+    }
+
+    logger.debug({}, `Cached ${this.keys.size} markets`);
+  }
+
+  public save(marketId: string, keys: MinimalMarketLayoutV3) {
+    if (!this.keys.has(marketId)) {
+      logger.trace({}, `Caching new market: ${marketId}`);
+      this.keys.set(marketId, keys);
+    }
+  }
+
+  public async get(marketId: string): Promise<MinimalMarketLayoutV3> {
+    if (this.keys.has(marketId)) {
+      return this.keys.get(marketId)!;
+    }
+
+    logger.trace({}, `Fetching new market keys for ${marketId}`);
+    const market = await this.fetch(marketId);
+    this.keys.set(marketId, market);
+    return market;
+  }
+
+  private fetch(marketId: string): Promise<MinimalMarketLayoutV3> {
+    return getMinimalMarketV3(this.connection, new PublicKey(marketId), this.connection.commitment);
+  }
+}
Index: Bot汉化/bot Solana Sniper Main/cache/pool.cache.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/cache/pool.cache.ts b/Bot汉化/bot Solana Sniper Main/cache/pool.cache.ts
new file mode 100644
--- /dev/null	(date 1727206711987)
+++ b/Bot汉化/bot Solana Sniper Main/cache/pool.cache.ts	(date 1727206711987)
@@ -0,0 +1,25 @@
+// 导入所需的模块和库
+import { LiquidityStateV4 } from '@raydium-io/raydium-sdk'; // Raydium SDK
+import { logger } from '../helpers'; // 自定义日志记录器
+
+// 创建 PoolCache 类
+export class PoolCache {
+  private readonly keys: Map<string, { id: string; state: LiquidityStateV4 }> = new Map< // 存储池的 Map
+    string,
+    { id: string; state: LiquidityStateV4 } // 键为代币 mint，值为池 ID 和状态
+  >();
+
+  // 保存池信息的方法
+  public save(id: string, state: LiquidityStateV4) {
+    // 如果状态的基础代币 mint 不在缓存中
+    if (!this.keys.has(state.baseMint.toString())) {
+      logger.trace(`缓存新池，代币 mint: ${state.baseMint.toString()}`); // 记录缓存新池的信息
+      this.keys.set(state.baseMint.toString(), { id, state }); // 将池信息存入缓存
+    }
+  }
+
+  // 获取池信息的方法
+  public async get(mint: string): Promise<{ id: string; state: LiquidityStateV4 }> {
+    return this.keys.get(mint)!; // 返回缓存的池信息
+  }
+}
Index: Bot原版/Bot Solana Sniper Main/filters/mutable.filter.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/filters/mutable.filter.ts b/Bot原版/Bot Solana Sniper Main/filters/mutable.filter.ts
new file mode 100644
--- /dev/null	(date 1732301213531)
+++ b/Bot原版/Bot Solana Sniper Main/filters/mutable.filter.ts	(date 1732301213531)
@@ -0,0 +1,29 @@
+import { Filter, FilterResult } from './pool-filters';
+import { Connection, PublicKey } from '@solana/web3.js';
+import { LiquidityPoolKeysV4 } from '@raydium-io/raydium-sdk';
+import { getPdaMetadataKey } from '@raydium-io/raydium-sdk';
+import { getMetadataAccountDataSerializer, MetadataAccountData, MetadataAccountDataArgs } from '@metaplex-foundation/mpl-token-metadata';
+import { Serializer } from '@metaplex-foundation/umi/serializers';
+import { logger } from '../helpers';
+
+export class MutableFilter implements Filter {
+  constructor(private readonly connection: Connection, private readonly metadataSerializer: Serializer<MetadataAccountDataArgs, MetadataAccountData>) {}
+
+  async execute(poolKeys: LiquidityPoolKeysV4): Promise<FilterResult> {
+    try {
+      const metadataPDA = getPdaMetadataKey(poolKeys.baseMint);
+      const metadataAccount = await this.connection.getAccountInfo(metadataPDA.publicKey);
+      if (!metadataAccount?.data) {
+        return { ok: false, message: 'Mutable -> Failed to fetch account data' };
+      }
+      const deserialize = this.metadataSerializer.deserialize(metadataAccount.data);
+      const mutable = deserialize[0].isMutable;
+
+      return { ok: !mutable, message: !mutable ? undefined : "Mutable -> Creator can change metadata" };
+    } catch (e: any) {
+      logger.error({ mint: poolKeys.baseMint }, `Mutable -> Failed to check if metadata are mutable`);
+    }
+
+    return { ok: false, message: 'Mutable -> Failed to check if metadata are mutable' };
+  }
+}
Index: Bot原版/Bot Solana Sniper Main/filters/pool-filters.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/filters/pool-filters.ts b/Bot原版/Bot Solana Sniper Main/filters/pool-filters.ts
new file mode 100644
--- /dev/null	(date 1732301213551)
+++ b/Bot原版/Bot Solana Sniper Main/filters/pool-filters.ts	(date 1732301213551)
@@ -0,0 +1,67 @@
+import { Connection } from '@solana/web3.js';
+import { LiquidityPoolKeysV4, Token, TokenAmount } from '@raydium-io/raydium-sdk';
+import { getMetadataAccountDataSerializer } from '@metaplex-foundation/mpl-token-metadata';
+import { BurnFilter } from './burn.filter';
+import { MutableFilter } from './mutable.filter';
+import { RenouncedFreezeFilter } from './renounced.filter';
+import { PoolSizeFilter } from './pool-size.filter';
+import { CHECK_IF_BURNED, CHECK_IF_FREEZABLE, CHECK_IF_MINT_IS_RENOUNCED, CHECK_IF_MUTABLE, logger } from '../helpers';
+
+export interface Filter {
+  execute(poolKeysV4: LiquidityPoolKeysV4): Promise<FilterResult>;
+}
+
+export interface FilterResult {
+  ok: boolean;
+  message?: string;
+}
+
+export interface PoolFilterArgs {
+  minPoolSize: TokenAmount;
+  maxPoolSize: TokenAmount;
+  quoteToken: Token;
+}
+
+export class PoolFilters {
+  private readonly filters: Filter[] = [];
+
+  constructor(
+    readonly connection: Connection,
+    readonly args: PoolFilterArgs,
+  ) {
+    if (CHECK_IF_BURNED) {
+      this.filters.push(new BurnFilter(connection));
+    }
+
+    if (CHECK_IF_MINT_IS_RENOUNCED || CHECK_IF_FREEZABLE) {
+      this.filters.push(new RenouncedFreezeFilter(connection, CHECK_IF_MINT_IS_RENOUNCED, CHECK_IF_FREEZABLE));
+    }
+
+    if (CHECK_IF_MUTABLE) {
+      this.filters.push(new MutableFilter(connection, getMetadataAccountDataSerializer()));
+    }
+
+    if (!args.minPoolSize.isZero() || !args.maxPoolSize.isZero()) {
+      this.filters.push(new PoolSizeFilter(connection, args.quoteToken, args.minPoolSize, args.maxPoolSize));
+    }
+  }
+
+  public async execute(poolKeys: LiquidityPoolKeysV4): Promise<boolean> {
+    if (this.filters.length === 0) {
+      return true;
+    }
+
+    const result = await Promise.all(this.filters.map((f) => f.execute(poolKeys)));
+    const pass = result.every((r) => r.ok);
+
+    if (pass) {
+      return true;
+    }
+
+    for (const filterResult of result.filter((r) => !r.ok)) {
+      logger.trace(filterResult.message);
+    }
+
+    return false;
+  }
+}
Index: Bot汉化/bot Solana Sniper Main/cache/snipe-list.cache.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/cache/snipe-list.cache.ts b/Bot汉化/bot Solana Sniper Main/cache/snipe-list.cache.ts
new file mode 100644
--- /dev/null	(date 1727206739324)
+++ b/Bot汉化/bot Solana Sniper Main/cache/snipe-list.cache.ts	(date 1727206739324)
@@ -0,0 +1,42 @@
+// 导入所需的模块和库
+import fs from 'fs'; // 文件系统模块
+import path from 'path'; // 路径处理模块
+import { logger, SNIPE_LIST_REFRESH_INTERVAL } from '../helpers'; // 自定义日志记录器和常量
+
+// 创建 SnipeListCache 类
+export class SnipeListCache {
+  private snipeList: string[] = []; // 存储抢购列表
+  private fileLocation = path.join(__dirname, '../snipe-list.txt'); // 抢购列表文件的路径
+
+  constructor() {
+    // 设置定时器，定时刷新抢购列表
+    setInterval(() => this.loadSnipeList(), SNIPE_LIST_REFRESH_INTERVAL);
+  }
+
+  // 初始化方法，加载抢购列表
+  public init() {
+    this.loadSnipeList(); // 加载抢购列表
+  }
+
+  // 检查某个 mint 是否在抢购列表中
+  public isInList(mint: string) {
+    return this.snipeList.includes(mint); // 返回结果
+  }
+
+  // 私有方法：加载抢购列表
+  private loadSnipeList() {
+    logger.trace(`正在刷新抢购列表...`); // 记录刷新日志
+
+    const count = this.snipeList.length; // 记录当前列表的长度
+    const data = fs.readFileSync(this.fileLocation, 'utf-8'); // 读取抢购列表文件
+    this.snipeList = data
+      .split('\n') // 按行分割
+      .map((a) => a.trim()) // 去掉每行的空白
+      .filter((a) => a); // 过滤掉空行
+
+    // 如果列表长度发生变化，记录加载信息
+    if (this.snipeList.length != count) {
+      logger.info(`加载抢购列表: ${this.snipeList.length}`); // 记录加载的抢购列表数量
+    }
+  }
+}
Index: Bot汉化/bot Solana Sniper Main/cache/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/cache/index.ts b/Bot汉化/bot Solana Sniper Main/cache/index.ts
new file mode 100644
--- /dev/null	(date 1727201869115)
+++ b/Bot汉化/bot Solana Sniper Main/cache/index.ts	(date 1727201869115)
@@ -0,0 +1,3 @@
+export * from './market.cache';
+export * from './pool.cache';
+export * from './snipe-list.cache';
Index: Bot原版/Bot Solana Sniper Main/filters/burn.filter.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/filters/burn.filter.ts b/Bot原版/Bot Solana Sniper Main/filters/burn.filter.ts
new file mode 100644
--- /dev/null	(date 1732301213501)
+++ b/Bot原版/Bot Solana Sniper Main/filters/burn.filter.ts	(date 1732301213501)
@@ -0,0 +1,24 @@
+import { Filter, FilterResult } from './pool-filters';
+import { Connection } from '@solana/web3.js';
+import { LiquidityPoolKeysV4 } from '@raydium-io/raydium-sdk';
+import { logger } from '../helpers';
+
+export class BurnFilter implements Filter {
+  constructor(private readonly connection: Connection) {}
+
+  async execute(poolKeys: LiquidityPoolKeysV4): Promise<FilterResult> {
+    try {
+      const amount = await this.connection.getTokenSupply(poolKeys.lpMint, this.connection.commitment);
+      const burned = amount.value.uiAmount === 0;
+      return { ok: burned, message: burned ? undefined : "Burned -> Creator didn't burn LP" };
+    } catch (e: any) {
+      if (e.code == -32602) {
+        return { ok: true };
+      }
+
+      logger.error({ mint: poolKeys.baseMint }, `Failed to check if LP is burned`);
+    }
+
+    return { ok: false, message: 'Failed to check if LP is burned' };
+  }
+}
Index: Bot原版/Bot Solana Sniper Main/filters/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/filters/index.ts b/Bot原版/Bot Solana Sniper Main/filters/index.ts
new file mode 100644
--- /dev/null	(date 1732301213521)
+++ b/Bot原版/Bot Solana Sniper Main/filters/index.ts	(date 1732301213521)
@@ -0,0 +1,5 @@
+export * from './burn.filter';
+export * from './mutable.filter';
+export * from './pool-filters';
+export * from './pool-size.filter';
+export * from './renounced.filter';
Index: Bot汉化/bot Solana Sniper Main/cache/market.cache.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/cache/market.cache.ts b/Bot汉化/bot Solana Sniper Main/cache/market.cache.ts
new file mode 100644
--- /dev/null	(date 1727206693861)
+++ b/Bot汉化/bot Solana Sniper Main/cache/market.cache.ts	(date 1727206693861)
@@ -0,0 +1,66 @@
+// 导入所需的模块和库
+import { Connection, PublicKey } from '@solana/web3.js'; // Solana 相关库
+import { getMinimalMarketV3, logger, MINIMAL_MARKET_STATE_LAYOUT_V3, MinimalMarketLayoutV3 } from '../helpers'; // 辅助函数和类型
+import { MAINNET_PROGRAM_ID, MARKET_STATE_LAYOUT_V3, Token } from '@raydium-io/raydium-sdk'; // Raydium SDK
+
+// 创建市场缓存类
+export class MarketCache {
+  private readonly keys: Map<string, MinimalMarketLayoutV3> = new Map<string, MinimalMarketLayoutV3>(); // 存储市场的 Map
+  constructor(private readonly connection: Connection) {} // 构造函数，接受 Solana 连接
+
+  // 初始化缓存的方法
+  async init(config: { quoteToken: Token }) {
+    logger.debug({}, `正在获取所有现有的 ${config.quoteToken.symbol} 市场...`); // 记录调试信息
+
+    // 获取程序账户
+    const accounts = await this.connection.getProgramAccounts(MAINNET_PROGRAM_ID.OPENBOOK_MARKET, {
+      commitment: this.connection.commitment, // 提交级别
+      dataSlice: {
+        offset: MARKET_STATE_LAYOUT_V3.offsetOf('eventQueue'), // 数据偏移
+        length: MINIMAL_MARKET_STATE_LAYOUT_V3.span, // 数据长度
+      },
+      filters: [
+        { dataSize: MARKET_STATE_LAYOUT_V3.span }, // 数据大小过滤
+        {
+          memcmp: { // 根据报价代币的 mint 过滤
+            offset: MARKET_STATE_LAYOUT_V3.offsetOf('quoteMint'),
+            bytes: config.quoteToken.mint.toBase58(),
+          },
+        },
+      ],
+    });
+
+    // 遍历账户并缓存市场信息
+    for (const account of accounts) {
+      const market = MINIMAL_MARKET_STATE_LAYOUT_V3.decode(account.account.data); // 解码市场信息
+      this.keys.set(account.pubkey.toString(), market); // 将市场信息存入缓存
+    }
+
+    logger.debug({}, `缓存了 ${this.keys.size} 个市场`); // 记录缓存市场的数量
+  }
+
+  // 保存市场信息的方法
+  public save(marketId: string, keys: MinimalMarketLayoutV3) {
+    if (!this.keys.has(marketId)) { // 如果市场 ID 不在缓存中
+      logger.trace({}, `缓存新市场: ${marketId}`); // 记录缓存新市场的信息
+      this.keys.set(marketId, keys); // 将市场信息存入缓存
+    }
+  }
+
+  // 获取市场信息的方法
+  public async get(marketId: string): Promise<MinimalMarketLayoutV3> {
+    if (this.keys.has(marketId)) { // 如果市场 ID 在缓存中
+      return this.keys.get(marketId)!; // 返回缓存的市场信息
+    }
+
+    logger.trace({}, `获取市场 ${marketId} 的新密钥`); // 记录获取新市场信息的日志
+    const market = await this.fetch(marketId); // 从区块链获取市场信息
+    this.keys.set(marketId, market); // 将获取的市场信息存入缓存
+    return market; // 返回市场信息
+  }
+
+  // 私有方法：从区块链获取市场信息
+  private fetch(marketId: string): Promise<MinimalMarketLayoutV3> {
+    return getMinimalMarketV3(this.connection, new PublicKey(marketId), this.connection.commitment); // 获取市场信息
+  }
+}
Index: Bot汉化/bot Solana Sniper Main/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/README.md b/Bot汉化/bot Solana Sniper Main/README.md
new file mode 100644
--- /dev/null	(date 1727337025078)
+++ b/Bot汉化/bot Solana Sniper Main/README.md	(date 1727337025078)
@@ -0,0 +1,86 @@
+# AxisBot Solana Sniper v1.0
+
+## 概述
+AxisBot 是一个高速狙击和出售 SPL 代币的工具，旨在帮助用户在保持较高安全性的同时，提供最快的狙击速度。由交易者为交易者打造。
+
+## 设置步骤
+
+要运行脚本，你需要：
+
+- 创建一个新的空 Solana 钱包
+- 向其转入一些 SOL
+- 将部分 SOL 转换为 USDC 或 WSOL（取决于配置）
+  - 根据下面的配置选择 USDC 或 WSOL
+- 通过更新 `.env.copy` 文件来配置脚本（完成后移除 `.copy` 后缀）
+  - 参考下方的 [配置](#configuration) 部分
+- 在终端中输入 `npm install` 安装依赖
+- 输入 `npm run start` 运行脚本
+
+### 配置
+
+#### 钱包
+- `PRIVATE_KEY`：你钱包的私钥。
+
+#### 连接
+- `RPC_ENDPOINT`：与 Solana 网络交互的 HTTPS RPC 端点。
+- `RPC_WEBSOCKET_ENDPOINT`：从 Solana 网络实时接收更新的 WebSocket RPC 端点。
+- `COMMITMENT_LEVEL`：交易的承诺级别（如“finalized”表示最高安全级别）。
+
+#### 机器人配置
+- `LOG_LEVEL`：设置日志级别，如 `info`、`debug`、`trace` 等。
+- `ONE_TOKEN_AT_A_TIME`：设为 `true` 表示一次只处理一个代币的购买。
+- `COMPUTE_UNIT_LIMIT` 和 `COMPUTE_UNIT_PRICE`：用于计算交易费用。
+- `PRE_LOAD_EXISTING_MARKETS`：启动时预加载所有现有市场（不适用于公共 RPC）。
+- `CACHE_NEW_MARKETS`：设为 `true` 以缓存新市场（不适用于公共 RPC）。
+- `TRANSACTION_EXECUTOR`：设为 `jito` 以使用 JSON-RPC jito 执行器。
+- `CUSTOM_FEE`：如果使用 warp 或 jito 执行器，将使用此值作为交易费用，而不是 `COMPUTE_UNIT_LIMIT` 和 `COMPUTE_UNIT_PRICE`。
+  - 最小值为 0.0001 SOL，建议使用 0.01 SOL 或以上。
+  - 此费用之外，还会应用 Solana 网络的最低费用。
+
+#### 买入配置
+- `QUOTE_MINT`：设置狙击的池子类型（USDC 或 WSOL）。
+- `QUOTE_AMOUNT`：每次买入的金额。
+- `AUTO_BUY_DELAY`：在买入代币前的延迟时间（以毫秒为单位）。
+- `MAX_BUY_RETRIES`：买入代币的最大重试次数。
+- `BUY_SLIPPAGE`：买入时的滑点百分比。
+
+#### 卖出配置
+- `AUTO_SELL`：设为 `true` 以启用自动卖出代币。如果你想手动卖出，请禁用此选项。
+- `MAX_SELL_RETRIES`：卖出代币的最大重试次数。
+- `AUTO_SELL_DELAY`：自动卖出代币前的延迟时间（以毫秒为单位）。
+- `PRICE_CHECK_INTERVAL`：检查止盈和止损条件的时间间隔（以毫秒为单位）。
+  - 设置为 0 可禁用止盈和止损功能。
+- `PRICE_CHECK_DURATION`：等待止盈/止损条件的时间（以毫秒为单位）。如果未达到预期的利润或亏损，机器人将在此时间后自动卖出。
+  - 设置为 0 以禁用该功能。
+- `TAKE_PROFIT`：达到该百分比利润时进行止盈。
+  - 利润基于报价资产（如 USDC 或 WSOL）计算。
+- `STOP_LOSS`：达到该百分比亏损时止损。
+  - 亏损基于报价资产计算。
+- `SELL_SLIPPAGE`：卖出时的滑点百分比。
+
+#### 狙击列表
+- `USE_SNIPE_LIST`：设为 `true` 以启用只购买 `snipe-list.txt` 中列出的代币。
+  - 该池子在机器人启动前不得存在。
+  - 如果在机器人启动前可以交易该代币，则不会执行购买。
+- `SNIPE_LIST_REFRESH_INTERVAL`：刷新狙击列表的时间间隔（以毫秒为单位）。你可以在机器人运行期间更新列表，它将在每次刷新时应用更改。
+
+#### 过滤器
+- `FILTER_CHECK_INTERVAL` 和 `FILTER_CHECK_DURATION`：设置检查池子是否符合过滤条件的时间间隔和持续时间。
+- `CONSECUTIVE_FILTER_MATCHES`：连续多少次满足过滤条件时才购买。
+- `CHECK_IF_MUTABLE`：设置为 `true` 仅购买不可修改的代币。
+- `CHECK_IF_MINT_IS_RENOUNCED`：设置为 `true` 仅购买铸币已放弃的代币。
+- `CHECK_IF_FREEZABLE` 和 `CHECK_IF_BURNED`：设置为 `true` 仅购买不可冻结或未被销毁的流动性池。
+- `MIN_POOL_SIZE` 和 `MAX_POOL_SIZE`：设置池子大小范围以确定是否进行购买。
+
+## 常见问题
+如果遇到未列出的问题，请在此仓库中创建新的问题。为获取更多调试信息，可以将 `LOG_LEVEL` 设置为 `debug`。
+
+### 没有代币账户
+- 如果日志中显示如下错误：  
+  `Error: No SOL token account found in wallet:`  
+  这意味着你提供的钱包中没有 USDC/WSOL 代币账户。  
+  - **解决方法**：前往去中心化交易所，将一些 SOL 转换为 USDC/WSOL。例如，转换后的 WSOL 应在钱包中显示。  
+
+## 免责声明
+AxisBot Solana Sniper 是一款简化许多常规交易任务的代码工具，整合了多种实用工具。  
+加密货币交易存在巨大风险，包括可能的本金损失。该机器人不保证盈利或特定结果。用户需自行承担使用此工具的风险。
\ No newline at end of file
Index: Bot原版/Bot Solana Sniper Main/package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/package-lock.json b/Bot原版/Bot Solana Sniper Main/package-lock.json
new file mode 100644
--- /dev/null	(date 1732301213331)
+++ b/Bot原版/Bot Solana Sniper Main/package-lock.json	(date 1732301213331)
@@ -0,0 +1,4016 @@
+{
+  "name": "warp-solana-bot",
+  "version": "2.0.1",
+  "lockfileVersion": 3,
+  "requires": true,
+  "packages": {
+    "": {
+      "name": "warp-solana-bot",
+      "version": "2.0.1",
+      "dependencies": {
+        "@metaplex-foundation/mpl-token-metadata": "^3.2.1",
+        "@raydium-io/raydium-sdk": "^1.3.1-beta.47",
+        "@solana/spl-token": "^0.4.0",
+        "@solana/web3.js": "^1.89.1",
+        "async-mutex": "^0.5.0",
+        "axios": "^1.6.8",
+        "bigint-buffer": "^1.1.5",
+        "bip39": "^3.1.0",
+        "bn.js": "^5.2.1",
+        "bs58": "^5.0.0",
+        "dotenv": "^16.4.1",
+        "ed25519-hd-key": "^1.3.0",
+        "i": "^0.3.7",
+        "npm": "^10.5.2",
+        "pino": "^8.18.0",
+        "pino-pretty": "^10.3.1",
+        "pino-std-serializers": "^6.2.2"
+      },
+      "devDependencies": {
+        "@types/bn.js": "^5.1.5",
+        "prettier": "^3.2.4",
+        "ts-node": "^10.9.2",
+        "typescript": "^5.3.3"
+      }
+    },
+    "node_modules/@babel/runtime": {
+      "version": "7.23.8",
+      "license": "MIT",
+      "dependencies": {
+        "regenerator-runtime": "^0.14.0"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@cspotcode/source-map-support": {
+      "version": "0.8.1",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/trace-mapping": "0.3.9"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@jridgewell/resolve-uri": {
+      "version": "3.1.1",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@jridgewell/sourcemap-codec": {
+      "version": "1.4.15",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@jridgewell/trace-mapping": {
+      "version": "0.3.9",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/resolve-uri": "^3.0.3",
+        "@jridgewell/sourcemap-codec": "^1.4.10"
+      }
+    },
+    "node_modules/@metaplex-foundation/mpl-token-metadata": {
+      "version": "3.2.1",
+      "resolved": "https://registry.npmjs.org/@metaplex-foundation/mpl-token-metadata/-/mpl-token-metadata-3.2.1.tgz",
+      "integrity": "sha512-26W1NhQwDWmLOg/pBRYut7x/vEs/5kFS2sWVEY5/X0f2jJOLhnd4NaZQcq+5u+XZsXvm1jq2AtrRGPNK43oqWQ==",
+      "dependencies": {
+        "@metaplex-foundation/mpl-toolbox": "^0.9.4"
+      },
+      "peerDependencies": {
+        "@metaplex-foundation/umi": ">= 0.8.2 < 1"
+      }
+    },
+    "node_modules/@metaplex-foundation/mpl-toolbox": {
+      "version": "0.9.4",
+      "resolved": "https://registry.npmjs.org/@metaplex-foundation/mpl-toolbox/-/mpl-toolbox-0.9.4.tgz",
+      "integrity": "sha512-fd6JxfoLbj/MM8FG2x91KYVy1U6AjBQw4qjt7+Da3trzQaWnSaYHDcYRG/53xqfvZ9qofY1T2t53GXPlD87lnQ==",
+      "peerDependencies": {
+        "@metaplex-foundation/umi": ">= 0.8.2 < 1"
+      }
+    },
+    "node_modules/@metaplex-foundation/umi": {
+      "version": "0.9.1",
+      "resolved": "https://registry.npmjs.org/@metaplex-foundation/umi/-/umi-0.9.1.tgz",
+      "integrity": "sha512-IhHoOvp4vfO/++YL+78+iVuLM53+FDwUOZDYgH6lx0jYXyQ27BeaieeR5i+q3A9dz4KxQo5Nzc5aCA1109QGCQ==",
+      "peer": true,
+      "dependencies": {
+        "@metaplex-foundation/umi-options": "^0.8.9",
+        "@metaplex-foundation/umi-public-keys": "^0.8.9",
+        "@metaplex-foundation/umi-serializers": "^0.9.0"
+      }
+    },
+    "node_modules/@metaplex-foundation/umi-options": {
+      "version": "0.8.9",
+      "resolved": "https://registry.npmjs.org/@metaplex-foundation/umi-options/-/umi-options-0.8.9.tgz",
+      "integrity": "sha512-jSQ61sZMPSAk/TXn8v8fPqtz3x8d0/blVZXLLbpVbo2/T5XobiI6/MfmlUosAjAUaQl6bHRF8aIIqZEFkJiy4A==",
+      "peer": true
+    },
+    "node_modules/@metaplex-foundation/umi-public-keys": {
+      "version": "0.8.9",
+      "resolved": "https://registry.npmjs.org/@metaplex-foundation/umi-public-keys/-/umi-public-keys-0.8.9.tgz",
+      "integrity": "sha512-CxMzN7dgVGOq9OcNCJe2casKUpJ3RmTVoOvDFyeoTQuK+vkZ1YSSahbqC1iGuHEtKTLSjtWjKvUU6O7zWFTw3Q==",
+      "peer": true,
+      "dependencies": {
+        "@metaplex-foundation/umi-serializers-encodings": "^0.8.9"
+      }
+    },
+    "node_modules/@metaplex-foundation/umi-serializers": {
+      "version": "0.9.0",
+      "resolved": "https://registry.npmjs.org/@metaplex-foundation/umi-serializers/-/umi-serializers-0.9.0.tgz",
+      "integrity": "sha512-hAOW9Djl4w4ioKeR4erDZl5IG4iJdP0xA19ZomdaCbMhYAAmG/FEs5khh0uT2mq53/MnzWcXSUPoO8WBN4Q+Vg==",
+      "peer": true,
+      "dependencies": {
+        "@metaplex-foundation/umi-options": "^0.8.9",
+        "@metaplex-foundation/umi-public-keys": "^0.8.9",
+        "@metaplex-foundation/umi-serializers-core": "^0.8.9",
+        "@metaplex-foundation/umi-serializers-encodings": "^0.8.9",
+        "@metaplex-foundation/umi-serializers-numbers": "^0.8.9"
+      }
+    },
+    "node_modules/@metaplex-foundation/umi-serializers-core": {
+      "version": "0.8.9",
+      "resolved": "https://registry.npmjs.org/@metaplex-foundation/umi-serializers-core/-/umi-serializers-core-0.8.9.tgz",
+      "integrity": "sha512-WT82tkiYJ0Qmscp7uTj1Hz6aWQPETwaKLAENAUN5DeWghkuBKtuxyBKVvEOuoXerJSdhiAk0e8DWA4cxcTTQ/w==",
+      "peer": true
+    },
+    "node_modules/@metaplex-foundation/umi-serializers-encodings": {
+      "version": "0.8.9",
+      "resolved": "https://registry.npmjs.org/@metaplex-foundation/umi-serializers-encodings/-/umi-serializers-encodings-0.8.9.tgz",
+      "integrity": "sha512-N3VWLDTJ0bzzMKcJDL08U3FaqRmwlN79FyE4BHj6bbAaJ9LEHjDQ9RJijZyWqTm0jE7I750fU7Ow5EZL38Xi6Q==",
+      "peer": true,
+      "dependencies": {
+        "@metaplex-foundation/umi-serializers-core": "^0.8.9"
+      }
+    },
+    "node_modules/@metaplex-foundation/umi-serializers-numbers": {
+      "version": "0.8.9",
+      "resolved": "https://registry.npmjs.org/@metaplex-foundation/umi-serializers-numbers/-/umi-serializers-numbers-0.8.9.tgz",
+      "integrity": "sha512-NtBf1fnVNQJHFQjLFzRu2i9GGnigb9hOm/Gfrk628d0q0tRJB7BOM3bs5C61VAs7kJs4yd+pDNVAERJkknQ7Lg==",
+      "peer": true,
+      "dependencies": {
+        "@metaplex-foundation/umi-serializers-core": "^0.8.9"
+      }
+    },
+    "node_modules/@noble/curves": {
+      "version": "1.3.0",
+      "license": "MIT",
+      "dependencies": {
+        "@noble/hashes": "1.3.3"
+      },
+      "funding": {
+        "url": "https://paulmillr.com/funding/"
+      }
+    },
+    "node_modules/@noble/hashes": {
+      "version": "1.3.3",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 16"
+      },
+      "funding": {
+        "url": "https://paulmillr.com/funding/"
+      }
+    },
+    "node_modules/@raydium-io/raydium-sdk": {
+      "version": "1.3.1-beta.47",
+      "license": "GPL-3.0",
+      "dependencies": {
+        "@solana/buffer-layout": "^4.0.1",
+        "@solana/spl-token": "^0.3.9",
+        "axios": "^1.6.2",
+        "big.js": "^6.2.1",
+        "bn.js": "^5.2.1",
+        "decimal.js": "^10.4.3",
+        "decimal.js-light": "^2.5.1",
+        "fecha": "^4.2.3",
+        "lodash": "^4.17.21",
+        "toformat": "^2.0.0"
+      },
+      "peerDependencies": {
+        "@solana/web3.js": "^1.73.0"
+      }
+    },
+    "node_modules/@raydium-io/raydium-sdk/node_modules/@solana/spl-token": {
+      "version": "0.3.11",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@solana/buffer-layout": "^4.0.0",
+        "@solana/buffer-layout-utils": "^0.2.0",
+        "@solana/spl-token-metadata": "^0.1.2",
+        "buffer": "^6.0.3"
+      },
+      "engines": {
+        "node": ">=16"
+      },
+      "peerDependencies": {
+        "@solana/web3.js": "^1.88.0"
+      }
+    },
+    "node_modules/@solana/buffer-layout": {
+      "version": "4.0.1",
+      "license": "MIT",
+      "dependencies": {
+        "buffer": "~6.0.3"
+      },
+      "engines": {
+        "node": ">=5.10"
+      }
+    },
+    "node_modules/@solana/buffer-layout-utils": {
+      "version": "0.2.0",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@solana/buffer-layout": "^4.0.0",
+        "@solana/web3.js": "^1.32.0",
+        "bigint-buffer": "^1.1.5",
+        "bignumber.js": "^9.0.1"
+      },
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@solana/codecs-core": {
+      "version": "2.0.0-experimental.8618508",
+      "license": "MIT"
+    },
+    "node_modules/@solana/codecs-data-structures": {
+      "version": "2.0.0-experimental.8618508",
+      "license": "MIT",
+      "dependencies": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
+      }
+    },
+    "node_modules/@solana/codecs-numbers": {
+      "version": "2.0.0-experimental.8618508",
+      "license": "MIT",
+      "dependencies": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508"
+      }
+    },
+    "node_modules/@solana/codecs-strings": {
+      "version": "2.0.0-experimental.8618508",
+      "license": "MIT",
+      "dependencies": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
+      },
+      "peerDependencies": {
+        "fastestsmallesttextencoderdecoder": "^1.0.22"
+      }
+    },
+    "node_modules/@solana/options": {
+      "version": "2.0.0-experimental.8618508",
+      "license": "MIT",
+      "dependencies": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
+      }
+    },
+    "node_modules/@solana/spl-token": {
+      "version": "0.4.0",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@solana/buffer-layout": "^4.0.0",
+        "@solana/buffer-layout-utils": "^0.2.0",
+        "@solana/spl-token-metadata": "^0.1.2",
+        "buffer": "^6.0.3"
+      },
+      "engines": {
+        "node": ">=16"
+      },
+      "peerDependencies": {
+        "@solana/web3.js": "^1.89.1"
+      }
+    },
+    "node_modules/@solana/spl-token-metadata": {
+      "version": "0.1.2",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-data-structures": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508",
+        "@solana/codecs-strings": "2.0.0-experimental.8618508",
+        "@solana/options": "2.0.0-experimental.8618508",
+        "@solana/spl-type-length-value": "0.1.0"
+      },
+      "engines": {
+        "node": ">=16"
+      },
+      "peerDependencies": {
+        "@solana/web3.js": "^1.87.6"
+      }
+    },
+    "node_modules/@solana/spl-type-length-value": {
+      "version": "0.1.0",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "buffer": "^6.0.3"
+      },
+      "engines": {
+        "node": ">=16"
+      }
+    },
+    "node_modules/@solana/web3.js": {
+      "version": "1.89.1",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/runtime": "^7.23.4",
+        "@noble/curves": "^1.2.0",
+        "@noble/hashes": "^1.3.2",
+        "@solana/buffer-layout": "^4.0.1",
+        "agentkeepalive": "^4.5.0",
+        "bigint-buffer": "^1.1.5",
+        "bn.js": "^5.2.1",
+        "borsh": "^0.7.0",
+        "bs58": "^4.0.1",
+        "buffer": "6.0.3",
+        "fast-stable-stringify": "^1.0.0",
+        "jayson": "^4.1.0",
+        "node-fetch": "^2.7.0",
+        "rpc-websockets": "^7.5.1",
+        "superstruct": "^0.14.2"
+      }
+    },
+    "node_modules/@solana/web3.js/node_modules/base-x": {
+      "version": "3.0.9",
+      "license": "MIT",
+      "dependencies": {
+        "safe-buffer": "^5.0.1"
+      }
+    },
+    "node_modules/@solana/web3.js/node_modules/bs58": {
+      "version": "4.0.1",
+      "license": "MIT",
+      "dependencies": {
+        "base-x": "^3.0.2"
+      }
+    },
+    "node_modules/@solana/web3.js/node_modules/node-fetch": {
+      "version": "2.7.0",
+      "license": "MIT",
+      "dependencies": {
+        "whatwg-url": "^5.0.0"
+      },
+      "engines": {
+        "node": "4.x || >=6.0.0"
+      },
+      "peerDependencies": {
+        "encoding": "^0.1.0"
+      },
+      "peerDependenciesMeta": {
+        "encoding": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@tsconfig/node10": {
+      "version": "1.0.9",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@tsconfig/node12": {
+      "version": "1.0.11",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@tsconfig/node14": {
+      "version": "1.0.3",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@tsconfig/node16": {
+      "version": "1.0.3",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@types/bn.js": {
+      "version": "5.1.5",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*"
+      }
+    },
+    "node_modules/@types/connect": {
+      "version": "3.4.38",
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*"
+      }
+    },
+    "node_modules/@types/node": {
+      "version": "12.20.55",
+      "license": "MIT"
+    },
+    "node_modules/@types/ws": {
+      "version": "7.4.7",
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*"
+      }
+    },
+    "node_modules/abort-controller": {
+      "version": "3.0.0",
+      "license": "MIT",
+      "dependencies": {
+        "event-target-shim": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=6.5"
+      }
+    },
+    "node_modules/acorn": {
+      "version": "8.8.2",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "acorn": "bin/acorn"
+      },
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
+    "node_modules/acorn-walk": {
+      "version": "8.2.0",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
+    "node_modules/agentkeepalive": {
+      "version": "4.5.0",
+      "license": "MIT",
+      "dependencies": {
+        "humanize-ms": "^1.2.1"
+      },
+      "engines": {
+        "node": ">= 8.0.0"
+      }
+    },
+    "node_modules/arg": {
+      "version": "4.1.3",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/async-mutex": {
+      "version": "0.5.0",
+      "license": "MIT",
+      "dependencies": {
+        "tslib": "^2.4.0"
+      }
+    },
+    "node_modules/asynckit": {
+      "version": "0.4.0",
+      "license": "MIT"
+    },
+    "node_modules/atomic-sleep": {
+      "version": "1.0.0",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8.0.0"
+      }
+    },
+    "node_modules/axios": {
+      "version": "1.6.8",
+      "resolved": "https://registry.npmjs.org/axios/-/axios-1.6.8.tgz",
+      "integrity": "sha512-v/ZHtJDU39mDpyBoFVkETcd/uNdxrWRrg3bKpOKzXFA6Bvqopts6ALSMU3y6ijYxbw2B+wPrIv46egTzJXCLGQ==",
+      "dependencies": {
+        "follow-redirects": "^1.15.6",
+        "form-data": "^4.0.0",
+        "proxy-from-env": "^1.1.0"
+      }
+    },
+    "node_modules/base-x": {
+      "version": "4.0.0",
+      "license": "MIT"
+    },
+    "node_modules/base64-js": {
+      "version": "1.5.1",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT"
+    },
+    "node_modules/big.js": {
+      "version": "6.2.1",
+      "license": "MIT",
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/bigjs"
+      }
+    },
+    "node_modules/bigint-buffer": {
+      "version": "1.1.5",
+      "hasInstallScript": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "bindings": "^1.3.0"
+      },
+      "engines": {
+        "node": ">= 10.0.0"
+      }
+    },
+    "node_modules/bignumber.js": {
+      "version": "9.1.2",
+      "license": "MIT",
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/bindings": {
+      "version": "1.5.0",
+      "license": "MIT",
+      "dependencies": {
+        "file-uri-to-path": "1.0.0"
+      }
+    },
+    "node_modules/bip39": {
+      "version": "3.1.0",
+      "license": "ISC",
+      "dependencies": {
+        "@noble/hashes": "^1.2.0"
+      }
+    },
+    "node_modules/bn.js": {
+      "version": "5.2.1",
+      "license": "MIT"
+    },
+    "node_modules/borsh": {
+      "version": "0.7.0",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "bn.js": "^5.2.0",
+        "bs58": "^4.0.0",
+        "text-encoding-utf-8": "^1.0.2"
+      }
+    },
+    "node_modules/borsh/node_modules/base-x": {
+      "version": "3.0.9",
+      "license": "MIT",
+      "dependencies": {
+        "safe-buffer": "^5.0.1"
+      }
+    },
+    "node_modules/borsh/node_modules/bs58": {
+      "version": "4.0.1",
+      "license": "MIT",
+      "dependencies": {
+        "base-x": "^3.0.2"
+      }
+    },
+    "node_modules/bs58": {
+      "version": "5.0.0",
+      "license": "MIT",
+      "dependencies": {
+        "base-x": "^4.0.0"
+      }
+    },
+    "node_modules/buffer": {
+      "version": "6.0.3",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "base64-js": "^1.3.1",
+        "ieee754": "^1.2.1"
+      }
+    },
+    "node_modules/bufferutil": {
+      "version": "4.0.8",
+      "hasInstallScript": true,
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "node-gyp-build": "^4.3.0"
+      },
+      "engines": {
+        "node": ">=6.14.2"
+      }
+    },
+    "node_modules/cipher-base": {
+      "version": "1.0.4",
+      "license": "MIT",
+      "dependencies": {
+        "inherits": "^2.0.1",
+        "safe-buffer": "^5.0.1"
+      }
+    },
+    "node_modules/colorette": {
+      "version": "2.0.20",
+      "license": "MIT"
+    },
+    "node_modules/combined-stream": {
+      "version": "1.0.8",
+      "license": "MIT",
+      "dependencies": {
+        "delayed-stream": "~1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/commander": {
+      "version": "2.20.3",
+      "license": "MIT"
+    },
+    "node_modules/create-hash": {
+      "version": "1.2.0",
+      "license": "MIT",
+      "dependencies": {
+        "cipher-base": "^1.0.1",
+        "inherits": "^2.0.1",
+        "md5.js": "^1.3.4",
+        "ripemd160": "^2.0.1",
+        "sha.js": "^2.4.0"
+      }
+    },
+    "node_modules/create-hmac": {
+      "version": "1.1.7",
+      "license": "MIT",
+      "dependencies": {
+        "cipher-base": "^1.0.3",
+        "create-hash": "^1.1.0",
+        "inherits": "^2.0.1",
+        "ripemd160": "^2.0.0",
+        "safe-buffer": "^5.0.1",
+        "sha.js": "^2.4.8"
+      }
+    },
+    "node_modules/create-require": {
+      "version": "1.1.1",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/dateformat": {
+      "version": "4.6.3",
+      "license": "MIT",
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/decimal.js": {
+      "version": "10.4.3",
+      "license": "MIT"
+    },
+    "node_modules/decimal.js-light": {
+      "version": "2.5.1",
+      "license": "MIT"
+    },
+    "node_modules/delay": {
+      "version": "5.0.0",
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/delayed-stream": {
+      "version": "1.0.0",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
+    "node_modules/diff": {
+      "version": "4.0.2",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "engines": {
+        "node": ">=0.3.1"
+      }
+    },
+    "node_modules/dotenv": {
+      "version": "16.4.1",
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/motdotla/dotenv?sponsor=1"
+      }
+    },
+    "node_modules/ed25519-hd-key": {
+      "version": "1.3.0",
+      "license": "MIT",
+      "dependencies": {
+        "create-hmac": "1.1.7",
+        "tweetnacl": "1.0.3"
+      }
+    },
+    "node_modules/end-of-stream": {
+      "version": "1.4.4",
+      "license": "MIT",
+      "dependencies": {
+        "once": "^1.4.0"
+      }
+    },
+    "node_modules/es6-promise": {
+      "version": "4.2.8",
+      "license": "MIT"
+    },
+    "node_modules/es6-promisify": {
+      "version": "5.0.0",
+      "license": "MIT",
+      "dependencies": {
+        "es6-promise": "^4.0.3"
+      }
+    },
+    "node_modules/event-target-shim": {
+      "version": "5.0.1",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/eventemitter3": {
+      "version": "4.0.7",
+      "license": "MIT"
+    },
+    "node_modules/events": {
+      "version": "3.3.0",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.8.x"
+      }
+    },
+    "node_modules/eyes": {
+      "version": "0.1.8",
+      "engines": {
+        "node": "> 0.1.90"
+      }
+    },
+    "node_modules/fast-copy": {
+      "version": "3.0.1",
+      "license": "MIT"
+    },
+    "node_modules/fast-redact": {
+      "version": "3.2.0",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/fast-safe-stringify": {
+      "version": "2.1.1",
+      "license": "MIT"
+    },
+    "node_modules/fast-stable-stringify": {
+      "version": "1.0.0",
+      "license": "MIT"
+    },
+    "node_modules/fastestsmallesttextencoderdecoder": {
+      "version": "1.0.22",
+      "license": "CC0-1.0",
+      "peer": true
+    },
+    "node_modules/fecha": {
+      "version": "4.2.3",
+      "license": "MIT"
+    },
+    "node_modules/file-uri-to-path": {
+      "version": "1.0.0",
+      "license": "MIT"
+    },
+    "node_modules/follow-redirects": {
+      "version": "1.15.6",
+      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.6.tgz",
+      "integrity": "sha512-wWN62YITEaOpSK584EZXJafH1AGpO8RVgElfkuXbTOrPX4fIfOyEpW/CsiNd8JdYrAoOvafRTOEnvsO++qCqFA==",
+      "funding": [
+        {
+          "type": "individual",
+          "url": "https://github.com/sponsors/RubenVerborgh"
+        }
+      ],
+      "engines": {
+        "node": ">=4.0"
+      },
+      "peerDependenciesMeta": {
+        "debug": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/form-data": {
+      "version": "4.0.0",
+      "license": "MIT",
+      "dependencies": {
+        "asynckit": "^0.4.0",
+        "combined-stream": "^1.0.8",
+        "mime-types": "^2.1.12"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/hash-base": {
+      "version": "3.1.0",
+      "license": "MIT",
+      "dependencies": {
+        "inherits": "^2.0.4",
+        "readable-stream": "^3.6.0",
+        "safe-buffer": "^5.2.0"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/hash-base/node_modules/readable-stream": {
+      "version": "3.6.2",
+      "license": "MIT",
+      "dependencies": {
+        "inherits": "^2.0.3",
+        "string_decoder": "^1.1.1",
+        "util-deprecate": "^1.0.1"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/help-me": {
+      "version": "5.0.0",
+      "license": "MIT"
+    },
+    "node_modules/humanize-ms": {
+      "version": "1.2.1",
+      "license": "MIT",
+      "dependencies": {
+        "ms": "^2.0.0"
+      }
+    },
+    "node_modules/i": {
+      "version": "0.3.7",
+      "engines": {
+        "node": ">=0.4"
+      }
+    },
+    "node_modules/ieee754": {
+      "version": "1.2.1",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/inherits": {
+      "version": "2.0.4",
+      "license": "ISC"
+    },
+    "node_modules/isomorphic-ws": {
+      "version": "4.0.1",
+      "license": "MIT",
+      "peerDependencies": {
+        "ws": "*"
+      }
+    },
+    "node_modules/jayson": {
+      "version": "4.1.0",
+      "license": "MIT",
+      "dependencies": {
+        "@types/connect": "^3.4.33",
+        "@types/node": "^12.12.54",
+        "@types/ws": "^7.4.4",
+        "commander": "^2.20.3",
+        "delay": "^5.0.0",
+        "es6-promisify": "^5.0.0",
+        "eyes": "^0.1.8",
+        "isomorphic-ws": "^4.0.1",
+        "json-stringify-safe": "^5.0.1",
+        "JSONStream": "^1.3.5",
+        "uuid": "^8.3.2",
+        "ws": "^7.4.5"
+      },
+      "bin": {
+        "jayson": "bin/jayson.js"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/joycon": {
+      "version": "3.1.1",
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/json-stringify-safe": {
+      "version": "5.0.1",
+      "license": "ISC"
+    },
+    "node_modules/jsonparse": {
+      "version": "1.3.1",
+      "engines": [
+        "node >= 0.2.0"
+      ],
+      "license": "MIT"
+    },
+    "node_modules/JSONStream": {
+      "version": "1.3.5",
+      "license": "(MIT OR Apache-2.0)",
+      "dependencies": {
+        "jsonparse": "^1.2.0",
+        "through": ">=2.2.7 <3"
+      },
+      "bin": {
+        "JSONStream": "bin.js"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/lodash": {
+      "version": "4.17.21",
+      "license": "MIT"
+    },
+    "node_modules/make-error": {
+      "version": "1.3.6",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/md5.js": {
+      "version": "1.3.5",
+      "license": "MIT",
+      "dependencies": {
+        "hash-base": "^3.0.0",
+        "inherits": "^2.0.1",
+        "safe-buffer": "^5.1.2"
+      }
+    },
+    "node_modules/mime-db": {
+      "version": "1.52.0",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/mime-types": {
+      "version": "2.1.35",
+      "license": "MIT",
+      "dependencies": {
+        "mime-db": "1.52.0"
+      },
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/minimist": {
+      "version": "1.2.8",
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/ms": {
+      "version": "2.1.3",
+      "license": "MIT"
+    },
+    "node_modules/node-gyp-build": {
+      "version": "4.8.0",
+      "license": "MIT",
+      "optional": true,
+      "bin": {
+        "node-gyp-build": "bin.js",
+        "node-gyp-build-optional": "optional.js",
+        "node-gyp-build-test": "build-test.js"
+      }
+    },
+    "node_modules/npm": {
+      "version": "10.5.2",
+      "bundleDependencies": [
+        "@isaacs/string-locale-compare",
+        "@npmcli/arborist",
+        "@npmcli/config",
+        "@npmcli/fs",
+        "@npmcli/map-workspaces",
+        "@npmcli/package-json",
+        "@npmcli/promise-spawn",
+        "@npmcli/redact",
+        "@npmcli/run-script",
+        "@sigstore/tuf",
+        "abbrev",
+        "archy",
+        "cacache",
+        "chalk",
+        "ci-info",
+        "cli-columns",
+        "cli-table3",
+        "columnify",
+        "fastest-levenshtein",
+        "fs-minipass",
+        "glob",
+        "graceful-fs",
+        "hosted-git-info",
+        "ini",
+        "init-package-json",
+        "is-cidr",
+        "json-parse-even-better-errors",
+        "libnpmaccess",
+        "libnpmdiff",
+        "libnpmexec",
+        "libnpmfund",
+        "libnpmhook",
+        "libnpmorg",
+        "libnpmpack",
+        "libnpmpublish",
+        "libnpmsearch",
+        "libnpmteam",
+        "libnpmversion",
+        "make-fetch-happen",
+        "minimatch",
+        "minipass",
+        "minipass-pipeline",
+        "ms",
+        "node-gyp",
+        "nopt",
+        "normalize-package-data",
+        "npm-audit-report",
+        "npm-install-checks",
+        "npm-package-arg",
+        "npm-pick-manifest",
+        "npm-profile",
+        "npm-registry-fetch",
+        "npm-user-validate",
+        "npmlog",
+        "p-map",
+        "pacote",
+        "parse-conflict-json",
+        "proc-log",
+        "qrcode-terminal",
+        "read",
+        "semver",
+        "spdx-expression-parse",
+        "ssri",
+        "supports-color",
+        "tar",
+        "text-table",
+        "tiny-relative-date",
+        "treeverse",
+        "validate-npm-package-name",
+        "which",
+        "write-file-atomic"
+      ],
+      "license": "Artistic-2.0",
+      "workspaces": [
+        "docs",
+        "smoke-tests",
+        "mock-globals",
+        "mock-registry",
+        "workspaces/*"
+      ],
+      "dependencies": {
+        "@isaacs/string-locale-compare": "^1.1.0",
+        "@npmcli/arborist": "^7.2.1",
+        "@npmcli/config": "^8.0.2",
+        "@npmcli/fs": "^3.1.0",
+        "@npmcli/map-workspaces": "^3.0.6",
+        "@npmcli/package-json": "^5.0.2",
+        "@npmcli/promise-spawn": "^7.0.1",
+        "@npmcli/redact": "^1.1.0",
+        "@npmcli/run-script": "^7.0.4",
+        "@sigstore/tuf": "^2.3.2",
+        "abbrev": "^2.0.0",
+        "archy": "~1.0.0",
+        "cacache": "^18.0.2",
+        "chalk": "^5.3.0",
+        "ci-info": "^4.0.0",
+        "cli-columns": "^4.0.0",
+        "cli-table3": "^0.6.4",
+        "columnify": "^1.6.0",
+        "fastest-levenshtein": "^1.0.16",
+        "fs-minipass": "^3.0.3",
+        "glob": "^10.3.12",
+        "graceful-fs": "^4.2.11",
+        "hosted-git-info": "^7.0.1",
+        "ini": "^4.1.2",
+        "init-package-json": "^6.0.2",
+        "is-cidr": "^5.0.5",
+        "json-parse-even-better-errors": "^3.0.1",
+        "libnpmaccess": "^8.0.1",
+        "libnpmdiff": "^6.0.3",
+        "libnpmexec": "^7.0.4",
+        "libnpmfund": "^5.0.1",
+        "libnpmhook": "^10.0.0",
+        "libnpmorg": "^6.0.1",
+        "libnpmpack": "^6.0.3",
+        "libnpmpublish": "^9.0.2",
+        "libnpmsearch": "^7.0.0",
+        "libnpmteam": "^6.0.0",
+        "libnpmversion": "^5.0.1",
+        "make-fetch-happen": "^13.0.0",
+        "minimatch": "^9.0.4",
+        "minipass": "^7.0.4",
+        "minipass-pipeline": "^1.2.4",
+        "ms": "^2.1.2",
+        "node-gyp": "^10.1.0",
+        "nopt": "^7.2.0",
+        "normalize-package-data": "^6.0.0",
+        "npm-audit-report": "^5.0.0",
+        "npm-install-checks": "^6.3.0",
+        "npm-package-arg": "^11.0.1",
+        "npm-pick-manifest": "^9.0.0",
+        "npm-profile": "^9.0.0",
+        "npm-registry-fetch": "^16.2.0",
+        "npm-user-validate": "^2.0.0",
+        "npmlog": "^7.0.1",
+        "p-map": "^4.0.0",
+        "pacote": "^17.0.6",
+        "parse-conflict-json": "^3.0.1",
+        "proc-log": "^3.0.0",
+        "qrcode-terminal": "^0.12.0",
+        "read": "^3.0.1",
+        "semver": "^7.6.0",
+        "spdx-expression-parse": "^4.0.0",
+        "ssri": "^10.0.5",
+        "supports-color": "^9.4.0",
+        "tar": "^6.2.1",
+        "text-table": "~0.2.0",
+        "tiny-relative-date": "^1.3.0",
+        "treeverse": "^3.0.0",
+        "validate-npm-package-name": "^5.0.0",
+        "which": "^4.0.0",
+        "write-file-atomic": "^5.0.1"
+      },
+      "bin": {
+        "npm": "bin/npm-cli.js",
+        "npx": "bin/npx-cli.js"
+      },
+      "engines": {
+        "node": "^18.17.0 || >=20.5.0"
+      }
+    },
+    "node_modules/npm/node_modules/@colors/colors": {
+      "version": "1.5.0",
+      "inBundle": true,
+      "license": "MIT",
+      "optional": true,
+      "engines": {
+        "node": ">=0.1.90"
+      }
+    },
+    "node_modules/npm/node_modules/@isaacs/cliui": {
+      "version": "8.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "string-width": "^5.1.2",
+        "string-width-cjs": "npm:string-width@^4.2.0",
+        "strip-ansi": "^7.0.1",
+        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
+        "wrap-ansi": "^8.1.0",
+        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/npm/node_modules/@isaacs/cliui/node_modules/ansi-regex": {
+      "version": "6.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
+      }
+    },
+    "node_modules/npm/node_modules/@isaacs/cliui/node_modules/emoji-regex": {
+      "version": "9.2.2",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/@isaacs/cliui/node_modules/string-width": {
+      "version": "5.1.2",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "eastasianwidth": "^0.2.0",
+        "emoji-regex": "^9.2.2",
+        "strip-ansi": "^7.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/npm/node_modules/@isaacs/cliui/node_modules/strip-ansi": {
+      "version": "7.1.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
+      }
+    },
+    "node_modules/npm/node_modules/@isaacs/string-locale-compare": {
+      "version": "1.1.0",
+      "inBundle": true,
+      "license": "ISC"
+    },
+    "node_modules/npm/node_modules/@npmcli/agent": {
+      "version": "2.2.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "agent-base": "^7.1.0",
+        "http-proxy-agent": "^7.0.0",
+        "https-proxy-agent": "^7.0.1",
+        "lru-cache": "^10.0.1",
+        "socks-proxy-agent": "^8.0.3"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/arborist": {
+      "version": "7.4.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@isaacs/string-locale-compare": "^1.1.0",
+        "@npmcli/fs": "^3.1.0",
+        "@npmcli/installed-package-contents": "^2.0.2",
+        "@npmcli/map-workspaces": "^3.0.2",
+        "@npmcli/metavuln-calculator": "^7.0.0",
+        "@npmcli/name-from-folder": "^2.0.0",
+        "@npmcli/node-gyp": "^3.0.0",
+        "@npmcli/package-json": "^5.0.0",
+        "@npmcli/query": "^3.1.0",
+        "@npmcli/redact": "^1.1.0",
+        "@npmcli/run-script": "^7.0.2",
+        "bin-links": "^4.0.1",
+        "cacache": "^18.0.0",
+        "common-ancestor-path": "^1.0.1",
+        "hosted-git-info": "^7.0.1",
+        "json-parse-even-better-errors": "^3.0.0",
+        "json-stringify-nice": "^1.1.4",
+        "minimatch": "^9.0.4",
+        "nopt": "^7.0.0",
+        "npm-install-checks": "^6.2.0",
+        "npm-package-arg": "^11.0.1",
+        "npm-pick-manifest": "^9.0.0",
+        "npm-registry-fetch": "^16.2.0",
+        "npmlog": "^7.0.1",
+        "pacote": "^17.0.4",
+        "parse-conflict-json": "^3.0.0",
+        "proc-log": "^3.0.0",
+        "promise-all-reject-late": "^1.0.0",
+        "promise-call-limit": "^3.0.1",
+        "read-package-json-fast": "^3.0.2",
+        "semver": "^7.3.7",
+        "ssri": "^10.0.5",
+        "treeverse": "^3.0.0",
+        "walk-up-path": "^3.0.1"
+      },
+      "bin": {
+        "arborist": "bin/index.js"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/config": {
+      "version": "8.2.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/map-workspaces": "^3.0.2",
+        "ci-info": "^4.0.0",
+        "ini": "^4.1.2",
+        "nopt": "^7.0.0",
+        "proc-log": "^3.0.0",
+        "read-package-json-fast": "^3.0.2",
+        "semver": "^7.3.5",
+        "walk-up-path": "^3.0.1"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/disparity-colors": {
+      "version": "3.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "ansi-styles": "^4.3.0"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/disparity-colors/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/fs": {
+      "version": "3.1.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "semver": "^7.3.5"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/git": {
+      "version": "5.0.5",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/promise-spawn": "^7.0.0",
+        "lru-cache": "^10.0.1",
+        "npm-pick-manifest": "^9.0.0",
+        "proc-log": "^3.0.0",
+        "promise-inflight": "^1.0.1",
+        "promise-retry": "^2.0.1",
+        "semver": "^7.3.5",
+        "which": "^4.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/installed-package-contents": {
+      "version": "2.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "npm-bundled": "^3.0.0",
+        "npm-normalize-package-bin": "^3.0.0"
+      },
+      "bin": {
+        "installed-package-contents": "lib/index.js"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/map-workspaces": {
+      "version": "3.0.6",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/name-from-folder": "^2.0.0",
+        "glob": "^10.2.2",
+        "minimatch": "^9.0.0",
+        "read-package-json-fast": "^3.0.0"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/metavuln-calculator": {
+      "version": "7.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "cacache": "^18.0.0",
+        "json-parse-even-better-errors": "^3.0.0",
+        "pacote": "^17.0.0",
+        "semver": "^7.3.5"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/name-from-folder": {
+      "version": "2.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/node-gyp": {
+      "version": "3.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/package-json": {
+      "version": "5.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/git": "^5.0.0",
+        "glob": "^10.2.2",
+        "hosted-git-info": "^7.0.0",
+        "json-parse-even-better-errors": "^3.0.0",
+        "normalize-package-data": "^6.0.0",
+        "proc-log": "^3.0.0",
+        "semver": "^7.5.3"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/promise-spawn": {
+      "version": "7.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "which": "^4.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/query": {
+      "version": "3.1.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "postcss-selector-parser": "^6.0.10"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/redact": {
+      "version": "1.1.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/run-script": {
+      "version": "7.0.4",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/node-gyp": "^3.0.0",
+        "@npmcli/package-json": "^5.0.0",
+        "@npmcli/promise-spawn": "^7.0.0",
+        "node-gyp": "^10.0.0",
+        "which": "^4.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@pkgjs/parseargs": {
+      "version": "0.11.0",
+      "inBundle": true,
+      "license": "MIT",
+      "optional": true,
+      "engines": {
+        "node": ">=14"
+      }
+    },
+    "node_modules/npm/node_modules/@sigstore/bundle": {
+      "version": "2.3.1",
+      "inBundle": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@sigstore/protobuf-specs": "^0.3.1"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@sigstore/core": {
+      "version": "1.1.0",
+      "inBundle": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@sigstore/protobuf-specs": {
+      "version": "0.3.1",
+      "inBundle": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@sigstore/sign": {
+      "version": "2.3.0",
+      "inBundle": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@sigstore/bundle": "^2.3.0",
+        "@sigstore/core": "^1.0.0",
+        "@sigstore/protobuf-specs": "^0.3.1",
+        "make-fetch-happen": "^13.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@sigstore/tuf": {
+      "version": "2.3.2",
+      "inBundle": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@sigstore/protobuf-specs": "^0.3.0",
+        "tuf-js": "^2.2.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@sigstore/verify": {
+      "version": "1.2.0",
+      "inBundle": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@sigstore/bundle": "^2.3.1",
+        "@sigstore/core": "^1.1.0",
+        "@sigstore/protobuf-specs": "^0.3.1"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@tufjs/canonical-json": {
+      "version": "2.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@tufjs/models": {
+      "version": "2.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "@tufjs/canonical-json": "2.0.0",
+        "minimatch": "^9.0.3"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/abbrev": {
+      "version": "2.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/agent-base": {
+      "version": "7.1.1",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "debug": "^4.3.4"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/npm/node_modules/aggregate-error": {
+      "version": "3.1.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "clean-stack": "^2.0.0",
+        "indent-string": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/ansi-regex": {
+      "version": "5.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/ansi-styles": {
+      "version": "6.2.1",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/npm/node_modules/aproba": {
+      "version": "2.0.0",
+      "inBundle": true,
+      "license": "ISC"
+    },
+    "node_modules/npm/node_modules/archy": {
+      "version": "1.0.0",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/are-we-there-yet": {
+      "version": "4.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/balanced-match": {
+      "version": "1.0.2",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/bin-links": {
+      "version": "4.0.3",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "cmd-shim": "^6.0.0",
+        "npm-normalize-package-bin": "^3.0.0",
+        "read-cmd-shim": "^4.0.0",
+        "write-file-atomic": "^5.0.0"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/binary-extensions": {
+      "version": "2.3.0",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/npm/node_modules/brace-expansion": {
+      "version": "2.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/builtins": {
+      "version": "5.1.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "semver": "^7.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/cacache": {
+      "version": "18.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/fs": "^3.1.0",
+        "fs-minipass": "^3.0.0",
+        "glob": "^10.2.2",
+        "lru-cache": "^10.0.1",
+        "minipass": "^7.0.3",
+        "minipass-collect": "^2.0.1",
+        "minipass-flush": "^1.0.5",
+        "minipass-pipeline": "^1.2.4",
+        "p-map": "^4.0.0",
+        "ssri": "^10.0.0",
+        "tar": "^6.1.11",
+        "unique-filename": "^3.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/chalk": {
+      "version": "5.3.0",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^12.17.0 || ^14.13 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/npm/node_modules/chownr": {
+      "version": "2.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/npm/node_modules/ci-info": {
+      "version": "4.0.0",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/sibiraj-s"
+        }
+      ],
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/cidr-regex": {
+      "version": "4.0.5",
+      "inBundle": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "ip-regex": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=14"
+      }
+    },
+    "node_modules/npm/node_modules/clean-stack": {
+      "version": "2.2.0",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/npm/node_modules/cli-columns": {
+      "version": "4.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "string-width": "^4.2.3",
+        "strip-ansi": "^6.0.1"
+      },
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/npm/node_modules/cli-table3": {
+      "version": "0.6.4",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "string-width": "^4.2.0"
+      },
+      "engines": {
+        "node": "10.* || >= 12.*"
+      },
+      "optionalDependencies": {
+        "@colors/colors": "1.5.0"
+      }
+    },
+    "node_modules/npm/node_modules/clone": {
+      "version": "1.0.4",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.8"
+      }
+    },
+    "node_modules/npm/node_modules/cmd-shim": {
+      "version": "6.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/color-convert": {
+      "version": "2.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "color-name": "~1.1.4"
+      },
+      "engines": {
+        "node": ">=7.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/color-name": {
+      "version": "1.1.4",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/color-support": {
+      "version": "1.1.3",
+      "inBundle": true,
+      "license": "ISC",
+      "bin": {
+        "color-support": "bin.js"
+      }
+    },
+    "node_modules/npm/node_modules/columnify": {
+      "version": "1.6.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "strip-ansi": "^6.0.1",
+        "wcwidth": "^1.0.0"
+      },
+      "engines": {
+        "node": ">=8.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/common-ancestor-path": {
+      "version": "1.0.1",
+      "inBundle": true,
+      "license": "ISC"
+    },
+    "node_modules/npm/node_modules/console-control-strings": {
+      "version": "1.1.0",
+      "inBundle": true,
+      "license": "ISC"
+    },
+    "node_modules/npm/node_modules/cross-spawn": {
+      "version": "7.0.3",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "path-key": "^3.1.0",
+        "shebang-command": "^2.0.0",
+        "which": "^2.0.1"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/npm/node_modules/cross-spawn/node_modules/which": {
+      "version": "2.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "isexe": "^2.0.0"
+      },
+      "bin": {
+        "node-which": "bin/node-which"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/npm/node_modules/cssesc": {
+      "version": "3.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "bin": {
+        "cssesc": "bin/cssesc"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/npm/node_modules/debug": {
+      "version": "4.3.4",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "ms": "2.1.2"
+      },
+      "engines": {
+        "node": ">=6.0"
+      },
+      "peerDependenciesMeta": {
+        "supports-color": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/npm/node_modules/debug/node_modules/ms": {
+      "version": "2.1.2",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/defaults": {
+      "version": "1.0.4",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "clone": "^1.0.2"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/npm/node_modules/diff": {
+      "version": "5.2.0",
+      "inBundle": true,
+      "license": "BSD-3-Clause",
+      "engines": {
+        "node": ">=0.3.1"
+      }
+    },
+    "node_modules/npm/node_modules/eastasianwidth": {
+      "version": "0.2.0",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/emoji-regex": {
+      "version": "8.0.0",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/encoding": {
+      "version": "0.1.13",
+      "inBundle": true,
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "iconv-lite": "^0.6.2"
+      }
+    },
+    "node_modules/npm/node_modules/env-paths": {
+      "version": "2.2.1",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/npm/node_modules/err-code": {
+      "version": "2.0.3",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/exponential-backoff": {
+      "version": "3.1.1",
+      "inBundle": true,
+      "license": "Apache-2.0"
+    },
+    "node_modules/npm/node_modules/fastest-levenshtein": {
+      "version": "1.0.16",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 4.9.1"
+      }
+    },
+    "node_modules/npm/node_modules/foreground-child": {
+      "version": "3.1.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "cross-spawn": "^7.0.0",
+        "signal-exit": "^4.0.1"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/npm/node_modules/fs-minipass": {
+      "version": "3.0.3",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "minipass": "^7.0.3"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/function-bind": {
+      "version": "1.1.2",
+      "inBundle": true,
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/npm/node_modules/gauge": {
+      "version": "5.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "aproba": "^1.0.3 || ^2.0.0",
+        "color-support": "^1.1.3",
+        "console-control-strings": "^1.1.0",
+        "has-unicode": "^2.0.1",
+        "signal-exit": "^4.0.1",
+        "string-width": "^4.2.3",
+        "strip-ansi": "^6.0.1",
+        "wide-align": "^1.1.5"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/glob": {
+      "version": "10.3.12",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "foreground-child": "^3.1.0",
+        "jackspeak": "^2.3.6",
+        "minimatch": "^9.0.1",
+        "minipass": "^7.0.4",
+        "path-scurry": "^1.10.2"
+      },
+      "bin": {
+        "glob": "dist/esm/bin.mjs"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/npm/node_modules/graceful-fs": {
+      "version": "4.2.11",
+      "inBundle": true,
+      "license": "ISC"
+    },
+    "node_modules/npm/node_modules/has-unicode": {
+      "version": "2.0.1",
+      "inBundle": true,
+      "license": "ISC"
+    },
+    "node_modules/npm/node_modules/hasown": {
+      "version": "2.0.2",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "function-bind": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/npm/node_modules/hosted-git-info": {
+      "version": "7.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "lru-cache": "^10.0.1"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/http-cache-semantics": {
+      "version": "4.1.1",
+      "inBundle": true,
+      "license": "BSD-2-Clause"
+    },
+    "node_modules/npm/node_modules/http-proxy-agent": {
+      "version": "7.0.2",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "agent-base": "^7.1.0",
+        "debug": "^4.3.4"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/npm/node_modules/https-proxy-agent": {
+      "version": "7.0.4",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "agent-base": "^7.0.2",
+        "debug": "4"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/npm/node_modules/iconv-lite": {
+      "version": "0.6.3",
+      "inBundle": true,
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "safer-buffer": ">= 2.1.2 < 3.0.0"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/npm/node_modules/ignore-walk": {
+      "version": "6.0.4",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "minimatch": "^9.0.0"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/imurmurhash": {
+      "version": "0.1.4",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.8.19"
+      }
+    },
+    "node_modules/npm/node_modules/indent-string": {
+      "version": "4.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/ini": {
+      "version": "4.1.2",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/init-package-json": {
+      "version": "6.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/package-json": "^5.0.0",
+        "npm-package-arg": "^11.0.0",
+        "promzard": "^1.0.0",
+        "read": "^3.0.1",
+        "semver": "^7.3.5",
+        "validate-npm-package-license": "^3.0.4",
+        "validate-npm-package-name": "^5.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/ip-address": {
+      "version": "9.0.5",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "jsbn": "1.1.0",
+        "sprintf-js": "^1.1.3"
+      },
+      "engines": {
+        "node": ">= 12"
+      }
+    },
+    "node_modules/npm/node_modules/ip-address/node_modules/sprintf-js": {
+      "version": "1.1.3",
+      "inBundle": true,
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/npm/node_modules/ip-regex": {
+      "version": "5.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/npm/node_modules/is-cidr": {
+      "version": "5.0.5",
+      "inBundle": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "cidr-regex": "^4.0.4"
+      },
+      "engines": {
+        "node": ">=14"
+      }
+    },
+    "node_modules/npm/node_modules/is-core-module": {
+      "version": "2.13.1",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "hasown": "^2.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/npm/node_modules/is-fullwidth-code-point": {
+      "version": "3.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/is-lambda": {
+      "version": "1.0.1",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/isexe": {
+      "version": "2.0.0",
+      "inBundle": true,
+      "license": "ISC"
+    },
+    "node_modules/npm/node_modules/jackspeak": {
+      "version": "2.3.6",
+      "inBundle": true,
+      "license": "BlueOak-1.0.0",
+      "dependencies": {
+        "@isaacs/cliui": "^8.0.2"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      },
+      "optionalDependencies": {
+        "@pkgjs/parseargs": "^0.11.0"
+      }
+    },
+    "node_modules/npm/node_modules/jsbn": {
+      "version": "1.1.0",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/json-parse-even-better-errors": {
+      "version": "3.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/json-stringify-nice": {
+      "version": "1.1.4",
+      "inBundle": true,
+      "license": "ISC",
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/npm/node_modules/jsonparse": {
+      "version": "1.3.1",
+      "engines": [
+        "node >= 0.2.0"
+      ],
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/just-diff": {
+      "version": "6.0.2",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/just-diff-apply": {
+      "version": "5.5.0",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/libnpmaccess": {
+      "version": "8.0.3",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "npm-package-arg": "^11.0.1",
+        "npm-registry-fetch": "^16.2.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/libnpmdiff": {
+      "version": "6.0.9",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/arborist": "^7.2.1",
+        "@npmcli/disparity-colors": "^3.0.0",
+        "@npmcli/installed-package-contents": "^2.0.2",
+        "binary-extensions": "^2.3.0",
+        "diff": "^5.1.0",
+        "minimatch": "^9.0.4",
+        "npm-package-arg": "^11.0.1",
+        "pacote": "^17.0.4",
+        "tar": "^6.2.1"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/libnpmexec": {
+      "version": "7.0.10",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/arborist": "^7.2.1",
+        "@npmcli/run-script": "^7.0.2",
+        "ci-info": "^4.0.0",
+        "npm-package-arg": "^11.0.1",
+        "npmlog": "^7.0.1",
+        "pacote": "^17.0.4",
+        "proc-log": "^3.0.0",
+        "read": "^3.0.1",
+        "read-package-json-fast": "^3.0.2",
+        "semver": "^7.3.7",
+        "walk-up-path": "^3.0.1"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/libnpmfund": {
+      "version": "5.0.7",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/arborist": "^7.2.1"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/libnpmhook": {
+      "version": "10.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "aproba": "^2.0.0",
+        "npm-registry-fetch": "^16.2.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/libnpmorg": {
+      "version": "6.0.3",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "aproba": "^2.0.0",
+        "npm-registry-fetch": "^16.2.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/libnpmpack": {
+      "version": "6.0.9",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/arborist": "^7.2.1",
+        "@npmcli/run-script": "^7.0.2",
+        "npm-package-arg": "^11.0.1",
+        "pacote": "^17.0.4"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/libnpmpublish": {
+      "version": "9.0.5",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "ci-info": "^4.0.0",
+        "normalize-package-data": "^6.0.0",
+        "npm-package-arg": "^11.0.1",
+        "npm-registry-fetch": "^16.2.0",
+        "proc-log": "^3.0.0",
+        "semver": "^7.3.7",
+        "sigstore": "^2.2.0",
+        "ssri": "^10.0.5"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/libnpmsearch": {
+      "version": "7.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "npm-registry-fetch": "^16.2.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/libnpmteam": {
+      "version": "6.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "aproba": "^2.0.0",
+        "npm-registry-fetch": "^16.2.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/libnpmversion": {
+      "version": "5.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/git": "^5.0.3",
+        "@npmcli/run-script": "^7.0.2",
+        "json-parse-even-better-errors": "^3.0.0",
+        "proc-log": "^3.0.0",
+        "semver": "^7.3.7"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/lru-cache": {
+      "version": "10.2.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "14 || >=16.14"
+      }
+    },
+    "node_modules/npm/node_modules/make-fetch-happen": {
+      "version": "13.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/agent": "^2.0.0",
+        "cacache": "^18.0.0",
+        "http-cache-semantics": "^4.1.1",
+        "is-lambda": "^1.0.1",
+        "minipass": "^7.0.2",
+        "minipass-fetch": "^3.0.0",
+        "minipass-flush": "^1.0.5",
+        "minipass-pipeline": "^1.2.4",
+        "negotiator": "^0.6.3",
+        "promise-retry": "^2.0.1",
+        "ssri": "^10.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/minimatch": {
+      "version": "9.0.4",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/npm/node_modules/minipass": {
+      "version": "7.0.4",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      }
+    },
+    "node_modules/npm/node_modules/minipass-collect": {
+      "version": "2.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "minipass": "^7.0.3"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      }
+    },
+    "node_modules/npm/node_modules/minipass-fetch": {
+      "version": "3.0.4",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "minipass": "^7.0.3",
+        "minipass-sized": "^1.0.3",
+        "minizlib": "^2.1.2"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      },
+      "optionalDependencies": {
+        "encoding": "^0.1.13"
+      }
+    },
+    "node_modules/npm/node_modules/minipass-flush": {
+      "version": "1.0.5",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "minipass": "^3.0.0"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/npm/node_modules/minipass-flush/node_modules/minipass": {
+      "version": "3.3.6",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/minipass-json-stream": {
+      "version": "1.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "jsonparse": "^1.3.1",
+        "minipass": "^3.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/minipass-json-stream/node_modules/minipass": {
+      "version": "3.3.6",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/minipass-pipeline": {
+      "version": "1.2.4",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "minipass": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/minipass-pipeline/node_modules/minipass": {
+      "version": "3.3.6",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/minipass-sized": {
+      "version": "1.0.3",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "minipass": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/minipass-sized/node_modules/minipass": {
+      "version": "3.3.6",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/minizlib": {
+      "version": "2.1.2",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "minipass": "^3.0.0",
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/npm/node_modules/minizlib/node_modules/minipass": {
+      "version": "3.3.6",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/mkdirp": {
+      "version": "1.0.4",
+      "inBundle": true,
+      "license": "MIT",
+      "bin": {
+        "mkdirp": "bin/cmd.js"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/npm/node_modules/ms": {
+      "version": "2.1.3",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/mute-stream": {
+      "version": "1.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/negotiator": {
+      "version": "0.6.3",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/npm/node_modules/node-gyp": {
+      "version": "10.1.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "env-paths": "^2.2.0",
+        "exponential-backoff": "^3.1.1",
+        "glob": "^10.3.10",
+        "graceful-fs": "^4.2.6",
+        "make-fetch-happen": "^13.0.0",
+        "nopt": "^7.0.0",
+        "proc-log": "^3.0.0",
+        "semver": "^7.3.5",
+        "tar": "^6.1.2",
+        "which": "^4.0.0"
+      },
+      "bin": {
+        "node-gyp": "bin/node-gyp.js"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/nopt": {
+      "version": "7.2.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "abbrev": "^2.0.0"
+      },
+      "bin": {
+        "nopt": "bin/nopt.js"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/normalize-package-data": {
+      "version": "6.0.0",
+      "inBundle": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "hosted-git-info": "^7.0.0",
+        "is-core-module": "^2.8.1",
+        "semver": "^7.3.5",
+        "validate-npm-package-license": "^3.0.4"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/npm-audit-report": {
+      "version": "5.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/npm-bundled": {
+      "version": "3.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "npm-normalize-package-bin": "^3.0.0"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/npm-install-checks": {
+      "version": "6.3.0",
+      "inBundle": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "semver": "^7.1.1"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/npm-normalize-package-bin": {
+      "version": "3.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/npm-package-arg": {
+      "version": "11.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "hosted-git-info": "^7.0.0",
+        "proc-log": "^3.0.0",
+        "semver": "^7.3.5",
+        "validate-npm-package-name": "^5.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/npm-packlist": {
+      "version": "8.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "ignore-walk": "^6.0.4"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/npm-pick-manifest": {
+      "version": "9.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "npm-install-checks": "^6.0.0",
+        "npm-normalize-package-bin": "^3.0.0",
+        "npm-package-arg": "^11.0.0",
+        "semver": "^7.3.5"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/npm-profile": {
+      "version": "9.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "npm-registry-fetch": "^16.0.0",
+        "proc-log": "^3.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/npm-registry-fetch": {
+      "version": "16.2.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/redact": "^1.1.0",
+        "make-fetch-happen": "^13.0.0",
+        "minipass": "^7.0.2",
+        "minipass-fetch": "^3.0.0",
+        "minipass-json-stream": "^1.0.1",
+        "minizlib": "^2.1.2",
+        "npm-package-arg": "^11.0.0",
+        "proc-log": "^3.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/npm-user-validate": {
+      "version": "2.0.0",
+      "inBundle": true,
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/npmlog": {
+      "version": "7.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "are-we-there-yet": "^4.0.0",
+        "console-control-strings": "^1.1.0",
+        "gauge": "^5.0.0",
+        "set-blocking": "^2.0.0"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/p-map": {
+      "version": "4.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "aggregate-error": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/npm/node_modules/pacote": {
+      "version": "17.0.6",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/git": "^5.0.0",
+        "@npmcli/installed-package-contents": "^2.0.1",
+        "@npmcli/promise-spawn": "^7.0.0",
+        "@npmcli/run-script": "^7.0.0",
+        "cacache": "^18.0.0",
+        "fs-minipass": "^3.0.0",
+        "minipass": "^7.0.2",
+        "npm-package-arg": "^11.0.0",
+        "npm-packlist": "^8.0.0",
+        "npm-pick-manifest": "^9.0.0",
+        "npm-registry-fetch": "^16.0.0",
+        "proc-log": "^3.0.0",
+        "promise-retry": "^2.0.1",
+        "read-package-json": "^7.0.0",
+        "read-package-json-fast": "^3.0.0",
+        "sigstore": "^2.2.0",
+        "ssri": "^10.0.0",
+        "tar": "^6.1.11"
+      },
+      "bin": {
+        "pacote": "lib/bin.js"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/parse-conflict-json": {
+      "version": "3.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "json-parse-even-better-errors": "^3.0.0",
+        "just-diff": "^6.0.0",
+        "just-diff-apply": "^5.2.0"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/path-key": {
+      "version": "3.1.1",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/path-scurry": {
+      "version": "1.10.2",
+      "inBundle": true,
+      "license": "BlueOak-1.0.0",
+      "dependencies": {
+        "lru-cache": "^10.2.0",
+        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/npm/node_modules/postcss-selector-parser": {
+      "version": "6.0.16",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "cssesc": "^3.0.0",
+        "util-deprecate": "^1.0.2"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/npm/node_modules/proc-log": {
+      "version": "3.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/promise-all-reject-late": {
+      "version": "1.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/npm/node_modules/promise-call-limit": {
+      "version": "3.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/npm/node_modules/promise-inflight": {
+      "version": "1.0.1",
+      "inBundle": true,
+      "license": "ISC"
+    },
+    "node_modules/npm/node_modules/promise-retry": {
+      "version": "2.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "err-code": "^2.0.2",
+        "retry": "^0.12.0"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/npm/node_modules/promzard": {
+      "version": "1.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "read": "^3.0.1"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/qrcode-terminal": {
+      "version": "0.12.0",
+      "inBundle": true,
+      "bin": {
+        "qrcode-terminal": "bin/qrcode-terminal.js"
+      }
+    },
+    "node_modules/npm/node_modules/read": {
+      "version": "3.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "mute-stream": "^1.0.0"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/read-cmd-shim": {
+      "version": "4.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/read-package-json": {
+      "version": "7.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "glob": "^10.2.2",
+        "json-parse-even-better-errors": "^3.0.0",
+        "normalize-package-data": "^6.0.0",
+        "npm-normalize-package-bin": "^3.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/read-package-json-fast": {
+      "version": "3.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "json-parse-even-better-errors": "^3.0.0",
+        "npm-normalize-package-bin": "^3.0.0"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/retry": {
+      "version": "0.12.0",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 4"
+      }
+    },
+    "node_modules/npm/node_modules/safer-buffer": {
+      "version": "2.1.2",
+      "inBundle": true,
+      "license": "MIT",
+      "optional": true
+    },
+    "node_modules/npm/node_modules/semver": {
+      "version": "7.6.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "lru-cache": "^6.0.0"
+      },
+      "bin": {
+        "semver": "bin/semver.js"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/npm/node_modules/semver/node_modules/lru-cache": {
+      "version": "6.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/npm/node_modules/set-blocking": {
+      "version": "2.0.0",
+      "inBundle": true,
+      "license": "ISC"
+    },
+    "node_modules/npm/node_modules/shebang-command": {
+      "version": "2.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "shebang-regex": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/shebang-regex": {
+      "version": "3.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/signal-exit": {
+      "version": "4.1.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/npm/node_modules/sigstore": {
+      "version": "2.3.0",
+      "inBundle": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@sigstore/bundle": "^2.3.1",
+        "@sigstore/core": "^1.0.0",
+        "@sigstore/protobuf-specs": "^0.3.1",
+        "@sigstore/sign": "^2.3.0",
+        "@sigstore/tuf": "^2.3.1",
+        "@sigstore/verify": "^1.2.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/smart-buffer": {
+      "version": "4.2.0",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 6.0.0",
+        "npm": ">= 3.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/socks": {
+      "version": "2.8.3",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "ip-address": "^9.0.5",
+        "smart-buffer": "^4.2.0"
+      },
+      "engines": {
+        "node": ">= 10.0.0",
+        "npm": ">= 3.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/socks-proxy-agent": {
+      "version": "8.0.3",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "agent-base": "^7.1.1",
+        "debug": "^4.3.4",
+        "socks": "^2.7.1"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/npm/node_modules/spdx-correct": {
+      "version": "3.2.0",
+      "inBundle": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "spdx-expression-parse": "^3.0.0",
+        "spdx-license-ids": "^3.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/spdx-correct/node_modules/spdx-expression-parse": {
+      "version": "3.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "spdx-exceptions": "^2.1.0",
+        "spdx-license-ids": "^3.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/spdx-exceptions": {
+      "version": "2.5.0",
+      "inBundle": true,
+      "license": "CC-BY-3.0"
+    },
+    "node_modules/npm/node_modules/spdx-expression-parse": {
+      "version": "4.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "spdx-exceptions": "^2.1.0",
+        "spdx-license-ids": "^3.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/spdx-license-ids": {
+      "version": "3.0.17",
+      "inBundle": true,
+      "license": "CC0-1.0"
+    },
+    "node_modules/npm/node_modules/ssri": {
+      "version": "10.0.5",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "minipass": "^7.0.3"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/string-width": {
+      "version": "4.2.3",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "emoji-regex": "^8.0.0",
+        "is-fullwidth-code-point": "^3.0.0",
+        "strip-ansi": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/string-width-cjs": {
+      "name": "string-width",
+      "version": "4.2.3",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "emoji-regex": "^8.0.0",
+        "is-fullwidth-code-point": "^3.0.0",
+        "strip-ansi": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/strip-ansi": {
+      "version": "6.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/strip-ansi-cjs": {
+      "name": "strip-ansi",
+      "version": "6.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/supports-color": {
+      "version": "9.4.0",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/supports-color?sponsor=1"
+      }
+    },
+    "node_modules/npm/node_modules/tar": {
+      "version": "6.2.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "chownr": "^2.0.0",
+        "fs-minipass": "^2.0.0",
+        "minipass": "^5.0.0",
+        "minizlib": "^2.1.1",
+        "mkdirp": "^1.0.3",
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/npm/node_modules/tar/node_modules/fs-minipass": {
+      "version": "2.1.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "minipass": "^3.0.0"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/npm/node_modules/tar/node_modules/fs-minipass/node_modules/minipass": {
+      "version": "3.3.6",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/tar/node_modules/minipass": {
+      "version": "5.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/text-table": {
+      "version": "0.2.0",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/tiny-relative-date": {
+      "version": "1.3.0",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/treeverse": {
+      "version": "3.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/tuf-js": {
+      "version": "2.2.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "@tufjs/models": "2.0.0",
+        "debug": "^4.3.4",
+        "make-fetch-happen": "^13.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/unique-filename": {
+      "version": "3.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "unique-slug": "^4.0.0"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/unique-slug": {
+      "version": "4.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "imurmurhash": "^0.1.4"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/util-deprecate": {
+      "version": "1.0.2",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/validate-npm-package-license": {
+      "version": "3.0.4",
+      "inBundle": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "spdx-correct": "^3.0.0",
+        "spdx-expression-parse": "^3.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/validate-npm-package-license/node_modules/spdx-expression-parse": {
+      "version": "3.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "spdx-exceptions": "^2.1.0",
+        "spdx-license-ids": "^3.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/validate-npm-package-name": {
+      "version": "5.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "builtins": "^5.0.0"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/walk-up-path": {
+      "version": "3.0.1",
+      "inBundle": true,
+      "license": "ISC"
+    },
+    "node_modules/npm/node_modules/wcwidth": {
+      "version": "1.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "defaults": "^1.0.3"
+      }
+    },
+    "node_modules/npm/node_modules/which": {
+      "version": "4.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "isexe": "^3.1.1"
+      },
+      "bin": {
+        "node-which": "bin/which.js"
+      },
+      "engines": {
+        "node": "^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/which/node_modules/isexe": {
+      "version": "3.1.1",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": ">=16"
+      }
+    },
+    "node_modules/npm/node_modules/wide-align": {
+      "version": "1.1.5",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "string-width": "^1.0.2 || 2 || 3 || 4"
+      }
+    },
+    "node_modules/npm/node_modules/wrap-ansi": {
+      "version": "8.1.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^6.1.0",
+        "string-width": "^5.0.1",
+        "strip-ansi": "^7.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
+      }
+    },
+    "node_modules/npm/node_modules/wrap-ansi-cjs": {
+      "name": "wrap-ansi",
+      "version": "7.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.0.0",
+        "string-width": "^4.1.0",
+        "strip-ansi": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
+      }
+    },
+    "node_modules/npm/node_modules/wrap-ansi-cjs/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/npm/node_modules/wrap-ansi/node_modules/ansi-regex": {
+      "version": "6.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
+      }
+    },
+    "node_modules/npm/node_modules/wrap-ansi/node_modules/emoji-regex": {
+      "version": "9.2.2",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/wrap-ansi/node_modules/string-width": {
+      "version": "5.1.2",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "eastasianwidth": "^0.2.0",
+        "emoji-regex": "^9.2.2",
+        "strip-ansi": "^7.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/npm/node_modules/wrap-ansi/node_modules/strip-ansi": {
+      "version": "7.1.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
+      }
+    },
+    "node_modules/npm/node_modules/write-file-atomic": {
+      "version": "5.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "imurmurhash": "^0.1.4",
+        "signal-exit": "^4.0.1"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/yallist": {
+      "version": "4.0.0",
+      "inBundle": true,
+      "license": "ISC"
+    },
+    "node_modules/on-exit-leak-free": {
+      "version": "2.1.0",
+      "license": "MIT"
+    },
+    "node_modules/once": {
+      "version": "1.4.0",
+      "license": "ISC",
+      "dependencies": {
+        "wrappy": "1"
+      }
+    },
+    "node_modules/pino": {
+      "version": "8.18.0",
+      "license": "MIT",
+      "dependencies": {
+        "atomic-sleep": "^1.0.0",
+        "fast-redact": "^3.1.1",
+        "on-exit-leak-free": "^2.1.0",
+        "pino-abstract-transport": "v1.1.0",
+        "pino-std-serializers": "^6.0.0",
+        "process-warning": "^3.0.0",
+        "quick-format-unescaped": "^4.0.3",
+        "real-require": "^0.2.0",
+        "safe-stable-stringify": "^2.3.1",
+        "sonic-boom": "^3.7.0",
+        "thread-stream": "^2.0.0"
+      },
+      "bin": {
+        "pino": "bin.js"
+      }
+    },
+    "node_modules/pino-abstract-transport": {
+      "version": "1.1.0",
+      "license": "MIT",
+      "dependencies": {
+        "readable-stream": "^4.0.0",
+        "split2": "^4.0.0"
+      }
+    },
+    "node_modules/pino-pretty": {
+      "version": "10.3.1",
+      "license": "MIT",
+      "dependencies": {
+        "colorette": "^2.0.7",
+        "dateformat": "^4.6.3",
+        "fast-copy": "^3.0.0",
+        "fast-safe-stringify": "^2.1.1",
+        "help-me": "^5.0.0",
+        "joycon": "^3.1.1",
+        "minimist": "^1.2.6",
+        "on-exit-leak-free": "^2.1.0",
+        "pino-abstract-transport": "^1.0.0",
+        "pump": "^3.0.0",
+        "readable-stream": "^4.0.0",
+        "secure-json-parse": "^2.4.0",
+        "sonic-boom": "^3.0.0",
+        "strip-json-comments": "^3.1.1"
+      },
+      "bin": {
+        "pino-pretty": "bin.js"
+      }
+    },
+    "node_modules/pino-std-serializers": {
+      "version": "6.2.2",
+      "license": "MIT"
+    },
+    "node_modules/prettier": {
+      "version": "3.2.4",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "prettier": "bin/prettier.cjs"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/prettier/prettier?sponsor=1"
+      }
+    },
+    "node_modules/process": {
+      "version": "0.11.10",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6.0"
+      }
+    },
+    "node_modules/process-warning": {
+      "version": "3.0.0",
+      "license": "MIT"
+    },
+    "node_modules/proxy-from-env": {
+      "version": "1.1.0",
+      "license": "MIT"
+    },
+    "node_modules/pump": {
+      "version": "3.0.0",
+      "license": "MIT",
+      "dependencies": {
+        "end-of-stream": "^1.1.0",
+        "once": "^1.3.1"
+      }
+    },
+    "node_modules/quick-format-unescaped": {
+      "version": "4.0.4",
+      "license": "MIT"
+    },
+    "node_modules/readable-stream": {
+      "version": "4.5.2",
+      "license": "MIT",
+      "dependencies": {
+        "abort-controller": "^3.0.0",
+        "buffer": "^6.0.3",
+        "events": "^3.3.0",
+        "process": "^0.11.10",
+        "string_decoder": "^1.3.0"
+      },
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      }
+    },
+    "node_modules/real-require": {
+      "version": "0.2.0",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 12.13.0"
+      }
+    },
+    "node_modules/regenerator-runtime": {
+      "version": "0.14.1",
+      "license": "MIT"
+    },
+    "node_modules/ripemd160": {
+      "version": "2.0.2",
+      "license": "MIT",
+      "dependencies": {
+        "hash-base": "^3.0.0",
+        "inherits": "^2.0.1"
+      }
+    },
+    "node_modules/rpc-websockets": {
+      "version": "7.9.0",
+      "license": "LGPL-3.0-only",
+      "dependencies": {
+        "@babel/runtime": "^7.17.2",
+        "eventemitter3": "^4.0.7",
+        "uuid": "^8.3.2",
+        "ws": "^8.5.0"
+      },
+      "funding": {
+        "type": "paypal",
+        "url": "https://paypal.me/kozjak"
+      },
+      "optionalDependencies": {
+        "bufferutil": "^4.0.1",
+        "utf-8-validate": "^5.0.2"
+      }
+    },
+    "node_modules/rpc-websockets/node_modules/ws": {
+      "version": "8.16.0",
+      "license": "MIT",
+      "engines": {
+        "node": ">=10.0.0"
+      },
+      "peerDependencies": {
+        "bufferutil": "^4.0.1",
+        "utf-8-validate": ">=5.0.2"
+      },
+      "peerDependenciesMeta": {
+        "bufferutil": {
+          "optional": true
+        },
+        "utf-8-validate": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/safe-buffer": {
+      "version": "5.2.1",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT"
+    },
+    "node_modules/safe-stable-stringify": {
+      "version": "2.4.3",
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/secure-json-parse": {
+      "version": "2.7.0",
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/sha.js": {
+      "version": "2.4.11",
+      "license": "(MIT AND BSD-3-Clause)",
+      "dependencies": {
+        "inherits": "^2.0.1",
+        "safe-buffer": "^5.0.1"
+      },
+      "bin": {
+        "sha.js": "bin.js"
+      }
+    },
+    "node_modules/sonic-boom": {
+      "version": "3.8.0",
+      "license": "MIT",
+      "dependencies": {
+        "atomic-sleep": "^1.0.0"
+      }
+    },
+    "node_modules/split2": {
+      "version": "4.2.0",
+      "license": "ISC",
+      "engines": {
+        "node": ">= 10.x"
+      }
+    },
+    "node_modules/string_decoder": {
+      "version": "1.3.0",
+      "license": "MIT",
+      "dependencies": {
+        "safe-buffer": "~5.2.0"
+      }
+    },
+    "node_modules/strip-json-comments": {
+      "version": "3.1.1",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/superstruct": {
+      "version": "0.14.2",
+      "license": "MIT"
+    },
+    "node_modules/text-encoding-utf-8": {
+      "version": "1.0.2"
+    },
+    "node_modules/thread-stream": {
+      "version": "2.3.0",
+      "license": "MIT",
+      "dependencies": {
+        "real-require": "^0.2.0"
+      }
+    },
+    "node_modules/through": {
+      "version": "2.3.8",
+      "license": "MIT"
+    },
+    "node_modules/toformat": {
+      "version": "2.0.0",
+      "license": "MIT"
+    },
+    "node_modules/tr46": {
+      "version": "0.0.3",
+      "license": "MIT"
+    },
+    "node_modules/ts-node": {
+      "version": "10.9.2",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@cspotcode/source-map-support": "^0.8.0",
+        "@tsconfig/node10": "^1.0.7",
+        "@tsconfig/node12": "^1.0.7",
+        "@tsconfig/node14": "^1.0.0",
+        "@tsconfig/node16": "^1.0.2",
+        "acorn": "^8.4.1",
+        "acorn-walk": "^8.1.1",
+        "arg": "^4.1.0",
+        "create-require": "^1.1.0",
+        "diff": "^4.0.1",
+        "make-error": "^1.1.1",
+        "v8-compile-cache-lib": "^3.0.1",
+        "yn": "3.1.1"
+      },
+      "bin": {
+        "ts-node": "dist/bin.js",
+        "ts-node-cwd": "dist/bin-cwd.js",
+        "ts-node-esm": "dist/bin-esm.js",
+        "ts-node-script": "dist/bin-script.js",
+        "ts-node-transpile-only": "dist/bin-transpile.js",
+        "ts-script": "dist/bin-script-deprecated.js"
+      },
+      "peerDependencies": {
+        "@swc/core": ">=1.2.50",
+        "@swc/wasm": ">=1.2.50",
+        "@types/node": "*",
+        "typescript": ">=2.7"
+      },
+      "peerDependenciesMeta": {
+        "@swc/core": {
+          "optional": true
+        },
+        "@swc/wasm": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/tslib": {
+      "version": "2.6.2",
+      "license": "0BSD"
+    },
+    "node_modules/tweetnacl": {
+      "version": "1.0.3",
+      "license": "Unlicense"
+    },
+    "node_modules/typescript": {
+      "version": "5.3.3",
+      "dev": true,
+      "license": "Apache-2.0",
+      "bin": {
+        "tsc": "bin/tsc",
+        "tsserver": "bin/tsserver"
+      },
+      "engines": {
+        "node": ">=14.17"
+      }
+    },
+    "node_modules/utf-8-validate": {
+      "version": "5.0.10",
+      "hasInstallScript": true,
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "node-gyp-build": "^4.3.0"
+      },
+      "engines": {
+        "node": ">=6.14.2"
+      }
+    },
+    "node_modules/util-deprecate": {
+      "version": "1.0.2",
+      "license": "MIT"
+    },
+    "node_modules/uuid": {
+      "version": "8.3.2",
+      "license": "MIT",
+      "bin": {
+        "uuid": "dist/bin/uuid"
+      }
+    },
+    "node_modules/v8-compile-cache-lib": {
+      "version": "3.0.1",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/webidl-conversions": {
+      "version": "3.0.1",
+      "license": "BSD-2-Clause"
+    },
+    "node_modules/whatwg-url": {
+      "version": "5.0.0",
+      "license": "MIT",
+      "dependencies": {
+        "tr46": "~0.0.3",
+        "webidl-conversions": "^3.0.0"
+      }
+    },
+    "node_modules/wrappy": {
+      "version": "1.0.2",
+      "license": "ISC"
+    },
+    "node_modules/ws": {
+      "version": "7.5.9",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8.3.0"
+      },
+      "peerDependencies": {
+        "bufferutil": "^4.0.1",
+        "utf-8-validate": "^5.0.2"
+      },
+      "peerDependenciesMeta": {
+        "bufferutil": {
+          "optional": true
+        },
+        "utf-8-validate": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/yn": {
+      "version": "3.1.1",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    }
+  }
+}
Index: Bot原版/Bot Solana Sniper Main/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/package.json b/Bot原版/Bot Solana Sniper Main/package.json
new file mode 100644
--- /dev/null	(date 1732301213314)
+++ b/Bot原版/Bot Solana Sniper Main/package.json	(date 1732301213314)
@@ -0,0 +1,35 @@
+{
+  "name": "axisbot-solana-sniper",
+  "author": "AxisBot",
+  "homepage": "https://axisbot.xyz",
+  "version": "1.0.1",
+  "scripts": {
+    "start": "ts-node index.ts",
+    "tsc": "tsc --noEmit"
+  },
+  "dependencies": {
+    "@metaplex-foundation/mpl-token-metadata": "^3.2.1",
+    "@raydium-io/raydium-sdk": "^1.3.1-beta.47",
+    "@solana/spl-token": "^0.4.0",
+    "@solana/web3.js": "^1.89.1",
+    "async-mutex": "^0.5.0",
+    "axios": "^1.6.8",
+    "bigint-buffer": "^1.1.5",
+    "bip39": "^3.1.0",
+    "bn.js": "^5.2.1",
+    "bs58": "^5.0.0",
+    "dotenv": "^16.4.1",
+    "ed25519-hd-key": "^1.3.0",
+    "i": "^0.3.7",
+    "npm": "^10.5.2",
+    "pino": "^8.18.0",
+    "pino-pretty": "^10.3.1",
+    "pino-std-serializers": "^6.2.2"
+  },
+  "devDependencies": {
+    "@types/bn.js": "^5.1.5",
+    "prettier": "^3.2.4",
+    "ts-node": "^10.9.2",
+    "typescript": "^5.3.3"
+  }
+}
Index: Bot原版/Bot Solana Sniper Main/LICENSE.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/LICENSE.md b/Bot原版/Bot Solana Sniper Main/LICENSE.md
new file mode 100644
--- /dev/null	(date 1732301213281)
+++ b/Bot原版/Bot Solana Sniper Main/LICENSE.md	(date 1732301213281)
@@ -0,0 +1,13 @@
+AXISBOT CO
+
+Disclaimer:
+The AxisBot Solana Sniper is a code presented to simplify many routine trading tasks, 
+which combines many useful utilities. 
+Trading cryptocurrencies involves substantial risk, including the potential loss of principal. 
+The bot does not guarantee profits or specific outcomes. 
+Users are solely responsible for any risks associated with using this tool. 
+Always conduct your research, exercise caution, and consider your risk tolerance before engaging in any trading activities, 
+automated or otherwise. 
+The creators and contributors of this bot bear no responsibility for any financial losses incurred while using this tool.
+By using the Axis Sniper Bot, you acknowledge and accept the risks associated with cryptocurrency trading, 
+and you agree that the creators and contributors are not liable for any damages or losses resulting from its use.
\ No newline at end of file
Index: Bot汉化/bot Solana Sniper Main/package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/package-lock.json b/Bot汉化/bot Solana Sniper Main/package-lock.json
new file mode 100644
--- /dev/null	(date 1727204665775)
+++ b/Bot汉化/bot Solana Sniper Main/package-lock.json	(date 1727204665775)
@@ -0,0 +1,4016 @@
+{
+  "name": "axisbot-solana-sniper",
+  "version": "1.0.1",
+  "lockfileVersion": 3,
+  "requires": true,
+  "packages": {
+    "": {
+      "name": "axisbot-solana-sniper",
+      "version": "1.0.1",
+      "dependencies": {
+        "@metaplex-foundation/mpl-token-metadata": "^3.2.1",
+        "@raydium-io/raydium-sdk": "^1.3.1-beta.47",
+        "@solana/spl-token": "^0.4.0",
+        "@solana/web3.js": "^1.89.1",
+        "async-mutex": "^0.5.0",
+        "axios": "^1.6.8",
+        "bigint-buffer": "^1.1.5",
+        "bip39": "^3.1.0",
+        "bn.js": "^5.2.1",
+        "bs58": "^5.0.0",
+        "dotenv": "^16.4.1",
+        "ed25519-hd-key": "^1.3.0",
+        "i": "^0.3.7",
+        "npm": "^10.5.2",
+        "pino": "^8.18.0",
+        "pino-pretty": "^10.3.1",
+        "pino-std-serializers": "^6.2.2"
+      },
+      "devDependencies": {
+        "@types/bn.js": "^5.1.5",
+        "prettier": "^3.2.4",
+        "ts-node": "^10.9.2",
+        "typescript": "^5.3.3"
+      }
+    },
+    "node_modules/@babel/runtime": {
+      "version": "7.23.8",
+      "license": "MIT",
+      "dependencies": {
+        "regenerator-runtime": "^0.14.0"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@cspotcode/source-map-support": {
+      "version": "0.8.1",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/trace-mapping": "0.3.9"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@jridgewell/resolve-uri": {
+      "version": "3.1.1",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@jridgewell/sourcemap-codec": {
+      "version": "1.4.15",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@jridgewell/trace-mapping": {
+      "version": "0.3.9",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/resolve-uri": "^3.0.3",
+        "@jridgewell/sourcemap-codec": "^1.4.10"
+      }
+    },
+    "node_modules/@metaplex-foundation/mpl-token-metadata": {
+      "version": "3.2.1",
+      "resolved": "https://registry.npmjs.org/@metaplex-foundation/mpl-token-metadata/-/mpl-token-metadata-3.2.1.tgz",
+      "integrity": "sha512-26W1NhQwDWmLOg/pBRYut7x/vEs/5kFS2sWVEY5/X0f2jJOLhnd4NaZQcq+5u+XZsXvm1jq2AtrRGPNK43oqWQ==",
+      "dependencies": {
+        "@metaplex-foundation/mpl-toolbox": "^0.9.4"
+      },
+      "peerDependencies": {
+        "@metaplex-foundation/umi": ">= 0.8.2 < 1"
+      }
+    },
+    "node_modules/@metaplex-foundation/mpl-toolbox": {
+      "version": "0.9.4",
+      "resolved": "https://registry.npmjs.org/@metaplex-foundation/mpl-toolbox/-/mpl-toolbox-0.9.4.tgz",
+      "integrity": "sha512-fd6JxfoLbj/MM8FG2x91KYVy1U6AjBQw4qjt7+Da3trzQaWnSaYHDcYRG/53xqfvZ9qofY1T2t53GXPlD87lnQ==",
+      "peerDependencies": {
+        "@metaplex-foundation/umi": ">= 0.8.2 < 1"
+      }
+    },
+    "node_modules/@metaplex-foundation/umi": {
+      "version": "0.9.1",
+      "resolved": "https://registry.npmjs.org/@metaplex-foundation/umi/-/umi-0.9.1.tgz",
+      "integrity": "sha512-IhHoOvp4vfO/++YL+78+iVuLM53+FDwUOZDYgH6lx0jYXyQ27BeaieeR5i+q3A9dz4KxQo5Nzc5aCA1109QGCQ==",
+      "peer": true,
+      "dependencies": {
+        "@metaplex-foundation/umi-options": "^0.8.9",
+        "@metaplex-foundation/umi-public-keys": "^0.8.9",
+        "@metaplex-foundation/umi-serializers": "^0.9.0"
+      }
+    },
+    "node_modules/@metaplex-foundation/umi-options": {
+      "version": "0.8.9",
+      "resolved": "https://registry.npmjs.org/@metaplex-foundation/umi-options/-/umi-options-0.8.9.tgz",
+      "integrity": "sha512-jSQ61sZMPSAk/TXn8v8fPqtz3x8d0/blVZXLLbpVbo2/T5XobiI6/MfmlUosAjAUaQl6bHRF8aIIqZEFkJiy4A==",
+      "peer": true
+    },
+    "node_modules/@metaplex-foundation/umi-public-keys": {
+      "version": "0.8.9",
+      "resolved": "https://registry.npmjs.org/@metaplex-foundation/umi-public-keys/-/umi-public-keys-0.8.9.tgz",
+      "integrity": "sha512-CxMzN7dgVGOq9OcNCJe2casKUpJ3RmTVoOvDFyeoTQuK+vkZ1YSSahbqC1iGuHEtKTLSjtWjKvUU6O7zWFTw3Q==",
+      "peer": true,
+      "dependencies": {
+        "@metaplex-foundation/umi-serializers-encodings": "^0.8.9"
+      }
+    },
+    "node_modules/@metaplex-foundation/umi-serializers": {
+      "version": "0.9.0",
+      "resolved": "https://registry.npmjs.org/@metaplex-foundation/umi-serializers/-/umi-serializers-0.9.0.tgz",
+      "integrity": "sha512-hAOW9Djl4w4ioKeR4erDZl5IG4iJdP0xA19ZomdaCbMhYAAmG/FEs5khh0uT2mq53/MnzWcXSUPoO8WBN4Q+Vg==",
+      "peer": true,
+      "dependencies": {
+        "@metaplex-foundation/umi-options": "^0.8.9",
+        "@metaplex-foundation/umi-public-keys": "^0.8.9",
+        "@metaplex-foundation/umi-serializers-core": "^0.8.9",
+        "@metaplex-foundation/umi-serializers-encodings": "^0.8.9",
+        "@metaplex-foundation/umi-serializers-numbers": "^0.8.9"
+      }
+    },
+    "node_modules/@metaplex-foundation/umi-serializers-core": {
+      "version": "0.8.9",
+      "resolved": "https://registry.npmjs.org/@metaplex-foundation/umi-serializers-core/-/umi-serializers-core-0.8.9.tgz",
+      "integrity": "sha512-WT82tkiYJ0Qmscp7uTj1Hz6aWQPETwaKLAENAUN5DeWghkuBKtuxyBKVvEOuoXerJSdhiAk0e8DWA4cxcTTQ/w==",
+      "peer": true
+    },
+    "node_modules/@metaplex-foundation/umi-serializers-encodings": {
+      "version": "0.8.9",
+      "resolved": "https://registry.npmjs.org/@metaplex-foundation/umi-serializers-encodings/-/umi-serializers-encodings-0.8.9.tgz",
+      "integrity": "sha512-N3VWLDTJ0bzzMKcJDL08U3FaqRmwlN79FyE4BHj6bbAaJ9LEHjDQ9RJijZyWqTm0jE7I750fU7Ow5EZL38Xi6Q==",
+      "peer": true,
+      "dependencies": {
+        "@metaplex-foundation/umi-serializers-core": "^0.8.9"
+      }
+    },
+    "node_modules/@metaplex-foundation/umi-serializers-numbers": {
+      "version": "0.8.9",
+      "resolved": "https://registry.npmjs.org/@metaplex-foundation/umi-serializers-numbers/-/umi-serializers-numbers-0.8.9.tgz",
+      "integrity": "sha512-NtBf1fnVNQJHFQjLFzRu2i9GGnigb9hOm/Gfrk628d0q0tRJB7BOM3bs5C61VAs7kJs4yd+pDNVAERJkknQ7Lg==",
+      "peer": true,
+      "dependencies": {
+        "@metaplex-foundation/umi-serializers-core": "^0.8.9"
+      }
+    },
+    "node_modules/@noble/curves": {
+      "version": "1.3.0",
+      "license": "MIT",
+      "dependencies": {
+        "@noble/hashes": "1.3.3"
+      },
+      "funding": {
+        "url": "https://paulmillr.com/funding/"
+      }
+    },
+    "node_modules/@noble/hashes": {
+      "version": "1.3.3",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 16"
+      },
+      "funding": {
+        "url": "https://paulmillr.com/funding/"
+      }
+    },
+    "node_modules/@raydium-io/raydium-sdk": {
+      "version": "1.3.1-beta.47",
+      "license": "GPL-3.0",
+      "dependencies": {
+        "@solana/buffer-layout": "^4.0.1",
+        "@solana/spl-token": "^0.3.9",
+        "axios": "^1.6.2",
+        "big.js": "^6.2.1",
+        "bn.js": "^5.2.1",
+        "decimal.js": "^10.4.3",
+        "decimal.js-light": "^2.5.1",
+        "fecha": "^4.2.3",
+        "lodash": "^4.17.21",
+        "toformat": "^2.0.0"
+      },
+      "peerDependencies": {
+        "@solana/web3.js": "^1.73.0"
+      }
+    },
+    "node_modules/@raydium-io/raydium-sdk/node_modules/@solana/spl-token": {
+      "version": "0.3.11",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@solana/buffer-layout": "^4.0.0",
+        "@solana/buffer-layout-utils": "^0.2.0",
+        "@solana/spl-token-metadata": "^0.1.2",
+        "buffer": "^6.0.3"
+      },
+      "engines": {
+        "node": ">=16"
+      },
+      "peerDependencies": {
+        "@solana/web3.js": "^1.88.0"
+      }
+    },
+    "node_modules/@solana/buffer-layout": {
+      "version": "4.0.1",
+      "license": "MIT",
+      "dependencies": {
+        "buffer": "~6.0.3"
+      },
+      "engines": {
+        "node": ">=5.10"
+      }
+    },
+    "node_modules/@solana/buffer-layout-utils": {
+      "version": "0.2.0",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@solana/buffer-layout": "^4.0.0",
+        "@solana/web3.js": "^1.32.0",
+        "bigint-buffer": "^1.1.5",
+        "bignumber.js": "^9.0.1"
+      },
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@solana/codecs-core": {
+      "version": "2.0.0-experimental.8618508",
+      "license": "MIT"
+    },
+    "node_modules/@solana/codecs-data-structures": {
+      "version": "2.0.0-experimental.8618508",
+      "license": "MIT",
+      "dependencies": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
+      }
+    },
+    "node_modules/@solana/codecs-numbers": {
+      "version": "2.0.0-experimental.8618508",
+      "license": "MIT",
+      "dependencies": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508"
+      }
+    },
+    "node_modules/@solana/codecs-strings": {
+      "version": "2.0.0-experimental.8618508",
+      "license": "MIT",
+      "dependencies": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
+      },
+      "peerDependencies": {
+        "fastestsmallesttextencoderdecoder": "^1.0.22"
+      }
+    },
+    "node_modules/@solana/options": {
+      "version": "2.0.0-experimental.8618508",
+      "license": "MIT",
+      "dependencies": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508"
+      }
+    },
+    "node_modules/@solana/spl-token": {
+      "version": "0.4.0",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@solana/buffer-layout": "^4.0.0",
+        "@solana/buffer-layout-utils": "^0.2.0",
+        "@solana/spl-token-metadata": "^0.1.2",
+        "buffer": "^6.0.3"
+      },
+      "engines": {
+        "node": ">=16"
+      },
+      "peerDependencies": {
+        "@solana/web3.js": "^1.89.1"
+      }
+    },
+    "node_modules/@solana/spl-token-metadata": {
+      "version": "0.1.2",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@solana/codecs-core": "2.0.0-experimental.8618508",
+        "@solana/codecs-data-structures": "2.0.0-experimental.8618508",
+        "@solana/codecs-numbers": "2.0.0-experimental.8618508",
+        "@solana/codecs-strings": "2.0.0-experimental.8618508",
+        "@solana/options": "2.0.0-experimental.8618508",
+        "@solana/spl-type-length-value": "0.1.0"
+      },
+      "engines": {
+        "node": ">=16"
+      },
+      "peerDependencies": {
+        "@solana/web3.js": "^1.87.6"
+      }
+    },
+    "node_modules/@solana/spl-type-length-value": {
+      "version": "0.1.0",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "buffer": "^6.0.3"
+      },
+      "engines": {
+        "node": ">=16"
+      }
+    },
+    "node_modules/@solana/web3.js": {
+      "version": "1.89.1",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/runtime": "^7.23.4",
+        "@noble/curves": "^1.2.0",
+        "@noble/hashes": "^1.3.2",
+        "@solana/buffer-layout": "^4.0.1",
+        "agentkeepalive": "^4.5.0",
+        "bigint-buffer": "^1.1.5",
+        "bn.js": "^5.2.1",
+        "borsh": "^0.7.0",
+        "bs58": "^4.0.1",
+        "buffer": "6.0.3",
+        "fast-stable-stringify": "^1.0.0",
+        "jayson": "^4.1.0",
+        "node-fetch": "^2.7.0",
+        "rpc-websockets": "^7.5.1",
+        "superstruct": "^0.14.2"
+      }
+    },
+    "node_modules/@solana/web3.js/node_modules/base-x": {
+      "version": "3.0.9",
+      "license": "MIT",
+      "dependencies": {
+        "safe-buffer": "^5.0.1"
+      }
+    },
+    "node_modules/@solana/web3.js/node_modules/bs58": {
+      "version": "4.0.1",
+      "license": "MIT",
+      "dependencies": {
+        "base-x": "^3.0.2"
+      }
+    },
+    "node_modules/@solana/web3.js/node_modules/node-fetch": {
+      "version": "2.7.0",
+      "license": "MIT",
+      "dependencies": {
+        "whatwg-url": "^5.0.0"
+      },
+      "engines": {
+        "node": "4.x || >=6.0.0"
+      },
+      "peerDependencies": {
+        "encoding": "^0.1.0"
+      },
+      "peerDependenciesMeta": {
+        "encoding": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@tsconfig/node10": {
+      "version": "1.0.9",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@tsconfig/node12": {
+      "version": "1.0.11",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@tsconfig/node14": {
+      "version": "1.0.3",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@tsconfig/node16": {
+      "version": "1.0.3",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@types/bn.js": {
+      "version": "5.1.5",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*"
+      }
+    },
+    "node_modules/@types/connect": {
+      "version": "3.4.38",
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*"
+      }
+    },
+    "node_modules/@types/node": {
+      "version": "12.20.55",
+      "license": "MIT"
+    },
+    "node_modules/@types/ws": {
+      "version": "7.4.7",
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*"
+      }
+    },
+    "node_modules/abort-controller": {
+      "version": "3.0.0",
+      "license": "MIT",
+      "dependencies": {
+        "event-target-shim": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=6.5"
+      }
+    },
+    "node_modules/acorn": {
+      "version": "8.8.2",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "acorn": "bin/acorn"
+      },
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
+    "node_modules/acorn-walk": {
+      "version": "8.2.0",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
+    "node_modules/agentkeepalive": {
+      "version": "4.5.0",
+      "license": "MIT",
+      "dependencies": {
+        "humanize-ms": "^1.2.1"
+      },
+      "engines": {
+        "node": ">= 8.0.0"
+      }
+    },
+    "node_modules/arg": {
+      "version": "4.1.3",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/async-mutex": {
+      "version": "0.5.0",
+      "license": "MIT",
+      "dependencies": {
+        "tslib": "^2.4.0"
+      }
+    },
+    "node_modules/asynckit": {
+      "version": "0.4.0",
+      "license": "MIT"
+    },
+    "node_modules/atomic-sleep": {
+      "version": "1.0.0",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8.0.0"
+      }
+    },
+    "node_modules/axios": {
+      "version": "1.6.8",
+      "resolved": "https://registry.npmjs.org/axios/-/axios-1.6.8.tgz",
+      "integrity": "sha512-v/ZHtJDU39mDpyBoFVkETcd/uNdxrWRrg3bKpOKzXFA6Bvqopts6ALSMU3y6ijYxbw2B+wPrIv46egTzJXCLGQ==",
+      "dependencies": {
+        "follow-redirects": "^1.15.6",
+        "form-data": "^4.0.0",
+        "proxy-from-env": "^1.1.0"
+      }
+    },
+    "node_modules/base-x": {
+      "version": "4.0.0",
+      "license": "MIT"
+    },
+    "node_modules/base64-js": {
+      "version": "1.5.1",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT"
+    },
+    "node_modules/big.js": {
+      "version": "6.2.1",
+      "license": "MIT",
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/bigjs"
+      }
+    },
+    "node_modules/bigint-buffer": {
+      "version": "1.1.5",
+      "hasInstallScript": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "bindings": "^1.3.0"
+      },
+      "engines": {
+        "node": ">= 10.0.0"
+      }
+    },
+    "node_modules/bignumber.js": {
+      "version": "9.1.2",
+      "license": "MIT",
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/bindings": {
+      "version": "1.5.0",
+      "license": "MIT",
+      "dependencies": {
+        "file-uri-to-path": "1.0.0"
+      }
+    },
+    "node_modules/bip39": {
+      "version": "3.1.0",
+      "license": "ISC",
+      "dependencies": {
+        "@noble/hashes": "^1.2.0"
+      }
+    },
+    "node_modules/bn.js": {
+      "version": "5.2.1",
+      "license": "MIT"
+    },
+    "node_modules/borsh": {
+      "version": "0.7.0",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "bn.js": "^5.2.0",
+        "bs58": "^4.0.0",
+        "text-encoding-utf-8": "^1.0.2"
+      }
+    },
+    "node_modules/borsh/node_modules/base-x": {
+      "version": "3.0.9",
+      "license": "MIT",
+      "dependencies": {
+        "safe-buffer": "^5.0.1"
+      }
+    },
+    "node_modules/borsh/node_modules/bs58": {
+      "version": "4.0.1",
+      "license": "MIT",
+      "dependencies": {
+        "base-x": "^3.0.2"
+      }
+    },
+    "node_modules/bs58": {
+      "version": "5.0.0",
+      "license": "MIT",
+      "dependencies": {
+        "base-x": "^4.0.0"
+      }
+    },
+    "node_modules/buffer": {
+      "version": "6.0.3",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "base64-js": "^1.3.1",
+        "ieee754": "^1.2.1"
+      }
+    },
+    "node_modules/bufferutil": {
+      "version": "4.0.8",
+      "hasInstallScript": true,
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "node-gyp-build": "^4.3.0"
+      },
+      "engines": {
+        "node": ">=6.14.2"
+      }
+    },
+    "node_modules/cipher-base": {
+      "version": "1.0.4",
+      "license": "MIT",
+      "dependencies": {
+        "inherits": "^2.0.1",
+        "safe-buffer": "^5.0.1"
+      }
+    },
+    "node_modules/colorette": {
+      "version": "2.0.20",
+      "license": "MIT"
+    },
+    "node_modules/combined-stream": {
+      "version": "1.0.8",
+      "license": "MIT",
+      "dependencies": {
+        "delayed-stream": "~1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/commander": {
+      "version": "2.20.3",
+      "license": "MIT"
+    },
+    "node_modules/create-hash": {
+      "version": "1.2.0",
+      "license": "MIT",
+      "dependencies": {
+        "cipher-base": "^1.0.1",
+        "inherits": "^2.0.1",
+        "md5.js": "^1.3.4",
+        "ripemd160": "^2.0.1",
+        "sha.js": "^2.4.0"
+      }
+    },
+    "node_modules/create-hmac": {
+      "version": "1.1.7",
+      "license": "MIT",
+      "dependencies": {
+        "cipher-base": "^1.0.3",
+        "create-hash": "^1.1.0",
+        "inherits": "^2.0.1",
+        "ripemd160": "^2.0.0",
+        "safe-buffer": "^5.0.1",
+        "sha.js": "^2.4.8"
+      }
+    },
+    "node_modules/create-require": {
+      "version": "1.1.1",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/dateformat": {
+      "version": "4.6.3",
+      "license": "MIT",
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/decimal.js": {
+      "version": "10.4.3",
+      "license": "MIT"
+    },
+    "node_modules/decimal.js-light": {
+      "version": "2.5.1",
+      "license": "MIT"
+    },
+    "node_modules/delay": {
+      "version": "5.0.0",
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/delayed-stream": {
+      "version": "1.0.0",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
+    "node_modules/diff": {
+      "version": "4.0.2",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "engines": {
+        "node": ">=0.3.1"
+      }
+    },
+    "node_modules/dotenv": {
+      "version": "16.4.1",
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/motdotla/dotenv?sponsor=1"
+      }
+    },
+    "node_modules/ed25519-hd-key": {
+      "version": "1.3.0",
+      "license": "MIT",
+      "dependencies": {
+        "create-hmac": "1.1.7",
+        "tweetnacl": "1.0.3"
+      }
+    },
+    "node_modules/end-of-stream": {
+      "version": "1.4.4",
+      "license": "MIT",
+      "dependencies": {
+        "once": "^1.4.0"
+      }
+    },
+    "node_modules/es6-promise": {
+      "version": "4.2.8",
+      "license": "MIT"
+    },
+    "node_modules/es6-promisify": {
+      "version": "5.0.0",
+      "license": "MIT",
+      "dependencies": {
+        "es6-promise": "^4.0.3"
+      }
+    },
+    "node_modules/event-target-shim": {
+      "version": "5.0.1",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/eventemitter3": {
+      "version": "4.0.7",
+      "license": "MIT"
+    },
+    "node_modules/events": {
+      "version": "3.3.0",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.8.x"
+      }
+    },
+    "node_modules/eyes": {
+      "version": "0.1.8",
+      "engines": {
+        "node": "> 0.1.90"
+      }
+    },
+    "node_modules/fast-copy": {
+      "version": "3.0.1",
+      "license": "MIT"
+    },
+    "node_modules/fast-redact": {
+      "version": "3.2.0",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/fast-safe-stringify": {
+      "version": "2.1.1",
+      "license": "MIT"
+    },
+    "node_modules/fast-stable-stringify": {
+      "version": "1.0.0",
+      "license": "MIT"
+    },
+    "node_modules/fastestsmallesttextencoderdecoder": {
+      "version": "1.0.22",
+      "license": "CC0-1.0",
+      "peer": true
+    },
+    "node_modules/fecha": {
+      "version": "4.2.3",
+      "license": "MIT"
+    },
+    "node_modules/file-uri-to-path": {
+      "version": "1.0.0",
+      "license": "MIT"
+    },
+    "node_modules/follow-redirects": {
+      "version": "1.15.6",
+      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.6.tgz",
+      "integrity": "sha512-wWN62YITEaOpSK584EZXJafH1AGpO8RVgElfkuXbTOrPX4fIfOyEpW/CsiNd8JdYrAoOvafRTOEnvsO++qCqFA==",
+      "funding": [
+        {
+          "type": "individual",
+          "url": "https://github.com/sponsors/RubenVerborgh"
+        }
+      ],
+      "engines": {
+        "node": ">=4.0"
+      },
+      "peerDependenciesMeta": {
+        "debug": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/form-data": {
+      "version": "4.0.0",
+      "license": "MIT",
+      "dependencies": {
+        "asynckit": "^0.4.0",
+        "combined-stream": "^1.0.8",
+        "mime-types": "^2.1.12"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/hash-base": {
+      "version": "3.1.0",
+      "license": "MIT",
+      "dependencies": {
+        "inherits": "^2.0.4",
+        "readable-stream": "^3.6.0",
+        "safe-buffer": "^5.2.0"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/hash-base/node_modules/readable-stream": {
+      "version": "3.6.2",
+      "license": "MIT",
+      "dependencies": {
+        "inherits": "^2.0.3",
+        "string_decoder": "^1.1.1",
+        "util-deprecate": "^1.0.1"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/help-me": {
+      "version": "5.0.0",
+      "license": "MIT"
+    },
+    "node_modules/humanize-ms": {
+      "version": "1.2.1",
+      "license": "MIT",
+      "dependencies": {
+        "ms": "^2.0.0"
+      }
+    },
+    "node_modules/i": {
+      "version": "0.3.7",
+      "engines": {
+        "node": ">=0.4"
+      }
+    },
+    "node_modules/ieee754": {
+      "version": "1.2.1",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/inherits": {
+      "version": "2.0.4",
+      "license": "ISC"
+    },
+    "node_modules/isomorphic-ws": {
+      "version": "4.0.1",
+      "license": "MIT",
+      "peerDependencies": {
+        "ws": "*"
+      }
+    },
+    "node_modules/jayson": {
+      "version": "4.1.0",
+      "license": "MIT",
+      "dependencies": {
+        "@types/connect": "^3.4.33",
+        "@types/node": "^12.12.54",
+        "@types/ws": "^7.4.4",
+        "commander": "^2.20.3",
+        "delay": "^5.0.0",
+        "es6-promisify": "^5.0.0",
+        "eyes": "^0.1.8",
+        "isomorphic-ws": "^4.0.1",
+        "json-stringify-safe": "^5.0.1",
+        "JSONStream": "^1.3.5",
+        "uuid": "^8.3.2",
+        "ws": "^7.4.5"
+      },
+      "bin": {
+        "jayson": "bin/jayson.js"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/joycon": {
+      "version": "3.1.1",
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/json-stringify-safe": {
+      "version": "5.0.1",
+      "license": "ISC"
+    },
+    "node_modules/jsonparse": {
+      "version": "1.3.1",
+      "engines": [
+        "node >= 0.2.0"
+      ],
+      "license": "MIT"
+    },
+    "node_modules/JSONStream": {
+      "version": "1.3.5",
+      "license": "(MIT OR Apache-2.0)",
+      "dependencies": {
+        "jsonparse": "^1.2.0",
+        "through": ">=2.2.7 <3"
+      },
+      "bin": {
+        "JSONStream": "bin.js"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/lodash": {
+      "version": "4.17.21",
+      "license": "MIT"
+    },
+    "node_modules/make-error": {
+      "version": "1.3.6",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/md5.js": {
+      "version": "1.3.5",
+      "license": "MIT",
+      "dependencies": {
+        "hash-base": "^3.0.0",
+        "inherits": "^2.0.1",
+        "safe-buffer": "^5.1.2"
+      }
+    },
+    "node_modules/mime-db": {
+      "version": "1.52.0",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/mime-types": {
+      "version": "2.1.35",
+      "license": "MIT",
+      "dependencies": {
+        "mime-db": "1.52.0"
+      },
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/minimist": {
+      "version": "1.2.8",
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/ms": {
+      "version": "2.1.3",
+      "license": "MIT"
+    },
+    "node_modules/node-gyp-build": {
+      "version": "4.8.0",
+      "license": "MIT",
+      "optional": true,
+      "bin": {
+        "node-gyp-build": "bin.js",
+        "node-gyp-build-optional": "optional.js",
+        "node-gyp-build-test": "build-test.js"
+      }
+    },
+    "node_modules/npm": {
+      "version": "10.5.2",
+      "bundleDependencies": [
+        "@isaacs/string-locale-compare",
+        "@npmcli/arborist",
+        "@npmcli/config",
+        "@npmcli/fs",
+        "@npmcli/map-workspaces",
+        "@npmcli/package-json",
+        "@npmcli/promise-spawn",
+        "@npmcli/redact",
+        "@npmcli/run-script",
+        "@sigstore/tuf",
+        "abbrev",
+        "archy",
+        "cacache",
+        "chalk",
+        "ci-info",
+        "cli-columns",
+        "cli-table3",
+        "columnify",
+        "fastest-levenshtein",
+        "fs-minipass",
+        "glob",
+        "graceful-fs",
+        "hosted-git-info",
+        "ini",
+        "init-package-json",
+        "is-cidr",
+        "json-parse-even-better-errors",
+        "libnpmaccess",
+        "libnpmdiff",
+        "libnpmexec",
+        "libnpmfund",
+        "libnpmhook",
+        "libnpmorg",
+        "libnpmpack",
+        "libnpmpublish",
+        "libnpmsearch",
+        "libnpmteam",
+        "libnpmversion",
+        "make-fetch-happen",
+        "minimatch",
+        "minipass",
+        "minipass-pipeline",
+        "ms",
+        "node-gyp",
+        "nopt",
+        "normalize-package-data",
+        "npm-audit-report",
+        "npm-install-checks",
+        "npm-package-arg",
+        "npm-pick-manifest",
+        "npm-profile",
+        "npm-registry-fetch",
+        "npm-user-validate",
+        "npmlog",
+        "p-map",
+        "pacote",
+        "parse-conflict-json",
+        "proc-log",
+        "qrcode-terminal",
+        "read",
+        "semver",
+        "spdx-expression-parse",
+        "ssri",
+        "supports-color",
+        "tar",
+        "text-table",
+        "tiny-relative-date",
+        "treeverse",
+        "validate-npm-package-name",
+        "which",
+        "write-file-atomic"
+      ],
+      "license": "Artistic-2.0",
+      "workspaces": [
+        "docs",
+        "smoke-tests",
+        "mock-globals",
+        "mock-registry",
+        "workspaces/*"
+      ],
+      "dependencies": {
+        "@isaacs/string-locale-compare": "^1.1.0",
+        "@npmcli/arborist": "^7.2.1",
+        "@npmcli/config": "^8.0.2",
+        "@npmcli/fs": "^3.1.0",
+        "@npmcli/map-workspaces": "^3.0.6",
+        "@npmcli/package-json": "^5.0.2",
+        "@npmcli/promise-spawn": "^7.0.1",
+        "@npmcli/redact": "^1.1.0",
+        "@npmcli/run-script": "^7.0.4",
+        "@sigstore/tuf": "^2.3.2",
+        "abbrev": "^2.0.0",
+        "archy": "~1.0.0",
+        "cacache": "^18.0.2",
+        "chalk": "^5.3.0",
+        "ci-info": "^4.0.0",
+        "cli-columns": "^4.0.0",
+        "cli-table3": "^0.6.4",
+        "columnify": "^1.6.0",
+        "fastest-levenshtein": "^1.0.16",
+        "fs-minipass": "^3.0.3",
+        "glob": "^10.3.12",
+        "graceful-fs": "^4.2.11",
+        "hosted-git-info": "^7.0.1",
+        "ini": "^4.1.2",
+        "init-package-json": "^6.0.2",
+        "is-cidr": "^5.0.5",
+        "json-parse-even-better-errors": "^3.0.1",
+        "libnpmaccess": "^8.0.1",
+        "libnpmdiff": "^6.0.3",
+        "libnpmexec": "^7.0.4",
+        "libnpmfund": "^5.0.1",
+        "libnpmhook": "^10.0.0",
+        "libnpmorg": "^6.0.1",
+        "libnpmpack": "^6.0.3",
+        "libnpmpublish": "^9.0.2",
+        "libnpmsearch": "^7.0.0",
+        "libnpmteam": "^6.0.0",
+        "libnpmversion": "^5.0.1",
+        "make-fetch-happen": "^13.0.0",
+        "minimatch": "^9.0.4",
+        "minipass": "^7.0.4",
+        "minipass-pipeline": "^1.2.4",
+        "ms": "^2.1.2",
+        "node-gyp": "^10.1.0",
+        "nopt": "^7.2.0",
+        "normalize-package-data": "^6.0.0",
+        "npm-audit-report": "^5.0.0",
+        "npm-install-checks": "^6.3.0",
+        "npm-package-arg": "^11.0.1",
+        "npm-pick-manifest": "^9.0.0",
+        "npm-profile": "^9.0.0",
+        "npm-registry-fetch": "^16.2.0",
+        "npm-user-validate": "^2.0.0",
+        "npmlog": "^7.0.1",
+        "p-map": "^4.0.0",
+        "pacote": "^17.0.6",
+        "parse-conflict-json": "^3.0.1",
+        "proc-log": "^3.0.0",
+        "qrcode-terminal": "^0.12.0",
+        "read": "^3.0.1",
+        "semver": "^7.6.0",
+        "spdx-expression-parse": "^4.0.0",
+        "ssri": "^10.0.5",
+        "supports-color": "^9.4.0",
+        "tar": "^6.2.1",
+        "text-table": "~0.2.0",
+        "tiny-relative-date": "^1.3.0",
+        "treeverse": "^3.0.0",
+        "validate-npm-package-name": "^5.0.0",
+        "which": "^4.0.0",
+        "write-file-atomic": "^5.0.1"
+      },
+      "bin": {
+        "npm": "bin/npm-cli.js",
+        "npx": "bin/npx-cli.js"
+      },
+      "engines": {
+        "node": "^18.17.0 || >=20.5.0"
+      }
+    },
+    "node_modules/npm/node_modules/@colors/colors": {
+      "version": "1.5.0",
+      "inBundle": true,
+      "license": "MIT",
+      "optional": true,
+      "engines": {
+        "node": ">=0.1.90"
+      }
+    },
+    "node_modules/npm/node_modules/@isaacs/cliui": {
+      "version": "8.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "string-width": "^5.1.2",
+        "string-width-cjs": "npm:string-width@^4.2.0",
+        "strip-ansi": "^7.0.1",
+        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
+        "wrap-ansi": "^8.1.0",
+        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/npm/node_modules/@isaacs/cliui/node_modules/ansi-regex": {
+      "version": "6.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
+      }
+    },
+    "node_modules/npm/node_modules/@isaacs/cliui/node_modules/emoji-regex": {
+      "version": "9.2.2",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/@isaacs/cliui/node_modules/string-width": {
+      "version": "5.1.2",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "eastasianwidth": "^0.2.0",
+        "emoji-regex": "^9.2.2",
+        "strip-ansi": "^7.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/npm/node_modules/@isaacs/cliui/node_modules/strip-ansi": {
+      "version": "7.1.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
+      }
+    },
+    "node_modules/npm/node_modules/@isaacs/string-locale-compare": {
+      "version": "1.1.0",
+      "inBundle": true,
+      "license": "ISC"
+    },
+    "node_modules/npm/node_modules/@npmcli/agent": {
+      "version": "2.2.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "agent-base": "^7.1.0",
+        "http-proxy-agent": "^7.0.0",
+        "https-proxy-agent": "^7.0.1",
+        "lru-cache": "^10.0.1",
+        "socks-proxy-agent": "^8.0.3"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/arborist": {
+      "version": "7.4.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@isaacs/string-locale-compare": "^1.1.0",
+        "@npmcli/fs": "^3.1.0",
+        "@npmcli/installed-package-contents": "^2.0.2",
+        "@npmcli/map-workspaces": "^3.0.2",
+        "@npmcli/metavuln-calculator": "^7.0.0",
+        "@npmcli/name-from-folder": "^2.0.0",
+        "@npmcli/node-gyp": "^3.0.0",
+        "@npmcli/package-json": "^5.0.0",
+        "@npmcli/query": "^3.1.0",
+        "@npmcli/redact": "^1.1.0",
+        "@npmcli/run-script": "^7.0.2",
+        "bin-links": "^4.0.1",
+        "cacache": "^18.0.0",
+        "common-ancestor-path": "^1.0.1",
+        "hosted-git-info": "^7.0.1",
+        "json-parse-even-better-errors": "^3.0.0",
+        "json-stringify-nice": "^1.1.4",
+        "minimatch": "^9.0.4",
+        "nopt": "^7.0.0",
+        "npm-install-checks": "^6.2.0",
+        "npm-package-arg": "^11.0.1",
+        "npm-pick-manifest": "^9.0.0",
+        "npm-registry-fetch": "^16.2.0",
+        "npmlog": "^7.0.1",
+        "pacote": "^17.0.4",
+        "parse-conflict-json": "^3.0.0",
+        "proc-log": "^3.0.0",
+        "promise-all-reject-late": "^1.0.0",
+        "promise-call-limit": "^3.0.1",
+        "read-package-json-fast": "^3.0.2",
+        "semver": "^7.3.7",
+        "ssri": "^10.0.5",
+        "treeverse": "^3.0.0",
+        "walk-up-path": "^3.0.1"
+      },
+      "bin": {
+        "arborist": "bin/index.js"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/config": {
+      "version": "8.2.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/map-workspaces": "^3.0.2",
+        "ci-info": "^4.0.0",
+        "ini": "^4.1.2",
+        "nopt": "^7.0.0",
+        "proc-log": "^3.0.0",
+        "read-package-json-fast": "^3.0.2",
+        "semver": "^7.3.5",
+        "walk-up-path": "^3.0.1"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/disparity-colors": {
+      "version": "3.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "ansi-styles": "^4.3.0"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/disparity-colors/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/fs": {
+      "version": "3.1.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "semver": "^7.3.5"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/git": {
+      "version": "5.0.5",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/promise-spawn": "^7.0.0",
+        "lru-cache": "^10.0.1",
+        "npm-pick-manifest": "^9.0.0",
+        "proc-log": "^3.0.0",
+        "promise-inflight": "^1.0.1",
+        "promise-retry": "^2.0.1",
+        "semver": "^7.3.5",
+        "which": "^4.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/installed-package-contents": {
+      "version": "2.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "npm-bundled": "^3.0.0",
+        "npm-normalize-package-bin": "^3.0.0"
+      },
+      "bin": {
+        "installed-package-contents": "lib/index.js"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/map-workspaces": {
+      "version": "3.0.6",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/name-from-folder": "^2.0.0",
+        "glob": "^10.2.2",
+        "minimatch": "^9.0.0",
+        "read-package-json-fast": "^3.0.0"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/metavuln-calculator": {
+      "version": "7.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "cacache": "^18.0.0",
+        "json-parse-even-better-errors": "^3.0.0",
+        "pacote": "^17.0.0",
+        "semver": "^7.3.5"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/name-from-folder": {
+      "version": "2.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/node-gyp": {
+      "version": "3.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/package-json": {
+      "version": "5.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/git": "^5.0.0",
+        "glob": "^10.2.2",
+        "hosted-git-info": "^7.0.0",
+        "json-parse-even-better-errors": "^3.0.0",
+        "normalize-package-data": "^6.0.0",
+        "proc-log": "^3.0.0",
+        "semver": "^7.5.3"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/promise-spawn": {
+      "version": "7.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "which": "^4.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/query": {
+      "version": "3.1.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "postcss-selector-parser": "^6.0.10"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/redact": {
+      "version": "1.1.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@npmcli/run-script": {
+      "version": "7.0.4",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/node-gyp": "^3.0.0",
+        "@npmcli/package-json": "^5.0.0",
+        "@npmcli/promise-spawn": "^7.0.0",
+        "node-gyp": "^10.0.0",
+        "which": "^4.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@pkgjs/parseargs": {
+      "version": "0.11.0",
+      "inBundle": true,
+      "license": "MIT",
+      "optional": true,
+      "engines": {
+        "node": ">=14"
+      }
+    },
+    "node_modules/npm/node_modules/@sigstore/bundle": {
+      "version": "2.3.1",
+      "inBundle": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@sigstore/protobuf-specs": "^0.3.1"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@sigstore/core": {
+      "version": "1.1.0",
+      "inBundle": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@sigstore/protobuf-specs": {
+      "version": "0.3.1",
+      "inBundle": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@sigstore/sign": {
+      "version": "2.3.0",
+      "inBundle": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@sigstore/bundle": "^2.3.0",
+        "@sigstore/core": "^1.0.0",
+        "@sigstore/protobuf-specs": "^0.3.1",
+        "make-fetch-happen": "^13.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@sigstore/tuf": {
+      "version": "2.3.2",
+      "inBundle": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@sigstore/protobuf-specs": "^0.3.0",
+        "tuf-js": "^2.2.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@sigstore/verify": {
+      "version": "1.2.0",
+      "inBundle": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@sigstore/bundle": "^2.3.1",
+        "@sigstore/core": "^1.1.0",
+        "@sigstore/protobuf-specs": "^0.3.1"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@tufjs/canonical-json": {
+      "version": "2.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/@tufjs/models": {
+      "version": "2.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "@tufjs/canonical-json": "2.0.0",
+        "minimatch": "^9.0.3"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/abbrev": {
+      "version": "2.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/agent-base": {
+      "version": "7.1.1",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "debug": "^4.3.4"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/npm/node_modules/aggregate-error": {
+      "version": "3.1.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "clean-stack": "^2.0.0",
+        "indent-string": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/ansi-regex": {
+      "version": "5.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/ansi-styles": {
+      "version": "6.2.1",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/npm/node_modules/aproba": {
+      "version": "2.0.0",
+      "inBundle": true,
+      "license": "ISC"
+    },
+    "node_modules/npm/node_modules/archy": {
+      "version": "1.0.0",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/are-we-there-yet": {
+      "version": "4.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/balanced-match": {
+      "version": "1.0.2",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/bin-links": {
+      "version": "4.0.3",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "cmd-shim": "^6.0.0",
+        "npm-normalize-package-bin": "^3.0.0",
+        "read-cmd-shim": "^4.0.0",
+        "write-file-atomic": "^5.0.0"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/binary-extensions": {
+      "version": "2.3.0",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/npm/node_modules/brace-expansion": {
+      "version": "2.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/builtins": {
+      "version": "5.1.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "semver": "^7.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/cacache": {
+      "version": "18.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/fs": "^3.1.0",
+        "fs-minipass": "^3.0.0",
+        "glob": "^10.2.2",
+        "lru-cache": "^10.0.1",
+        "minipass": "^7.0.3",
+        "minipass-collect": "^2.0.1",
+        "minipass-flush": "^1.0.5",
+        "minipass-pipeline": "^1.2.4",
+        "p-map": "^4.0.0",
+        "ssri": "^10.0.0",
+        "tar": "^6.1.11",
+        "unique-filename": "^3.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/chalk": {
+      "version": "5.3.0",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^12.17.0 || ^14.13 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/npm/node_modules/chownr": {
+      "version": "2.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/npm/node_modules/ci-info": {
+      "version": "4.0.0",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/sibiraj-s"
+        }
+      ],
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/cidr-regex": {
+      "version": "4.0.5",
+      "inBundle": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "ip-regex": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=14"
+      }
+    },
+    "node_modules/npm/node_modules/clean-stack": {
+      "version": "2.2.0",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/npm/node_modules/cli-columns": {
+      "version": "4.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "string-width": "^4.2.3",
+        "strip-ansi": "^6.0.1"
+      },
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/npm/node_modules/cli-table3": {
+      "version": "0.6.4",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "string-width": "^4.2.0"
+      },
+      "engines": {
+        "node": "10.* || >= 12.*"
+      },
+      "optionalDependencies": {
+        "@colors/colors": "1.5.0"
+      }
+    },
+    "node_modules/npm/node_modules/clone": {
+      "version": "1.0.4",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.8"
+      }
+    },
+    "node_modules/npm/node_modules/cmd-shim": {
+      "version": "6.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/color-convert": {
+      "version": "2.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "color-name": "~1.1.4"
+      },
+      "engines": {
+        "node": ">=7.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/color-name": {
+      "version": "1.1.4",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/color-support": {
+      "version": "1.1.3",
+      "inBundle": true,
+      "license": "ISC",
+      "bin": {
+        "color-support": "bin.js"
+      }
+    },
+    "node_modules/npm/node_modules/columnify": {
+      "version": "1.6.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "strip-ansi": "^6.0.1",
+        "wcwidth": "^1.0.0"
+      },
+      "engines": {
+        "node": ">=8.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/common-ancestor-path": {
+      "version": "1.0.1",
+      "inBundle": true,
+      "license": "ISC"
+    },
+    "node_modules/npm/node_modules/console-control-strings": {
+      "version": "1.1.0",
+      "inBundle": true,
+      "license": "ISC"
+    },
+    "node_modules/npm/node_modules/cross-spawn": {
+      "version": "7.0.3",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "path-key": "^3.1.0",
+        "shebang-command": "^2.0.0",
+        "which": "^2.0.1"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/npm/node_modules/cross-spawn/node_modules/which": {
+      "version": "2.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "isexe": "^2.0.0"
+      },
+      "bin": {
+        "node-which": "bin/node-which"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/npm/node_modules/cssesc": {
+      "version": "3.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "bin": {
+        "cssesc": "bin/cssesc"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/npm/node_modules/debug": {
+      "version": "4.3.4",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "ms": "2.1.2"
+      },
+      "engines": {
+        "node": ">=6.0"
+      },
+      "peerDependenciesMeta": {
+        "supports-color": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/npm/node_modules/debug/node_modules/ms": {
+      "version": "2.1.2",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/defaults": {
+      "version": "1.0.4",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "clone": "^1.0.2"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/npm/node_modules/diff": {
+      "version": "5.2.0",
+      "inBundle": true,
+      "license": "BSD-3-Clause",
+      "engines": {
+        "node": ">=0.3.1"
+      }
+    },
+    "node_modules/npm/node_modules/eastasianwidth": {
+      "version": "0.2.0",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/emoji-regex": {
+      "version": "8.0.0",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/encoding": {
+      "version": "0.1.13",
+      "inBundle": true,
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "iconv-lite": "^0.6.2"
+      }
+    },
+    "node_modules/npm/node_modules/env-paths": {
+      "version": "2.2.1",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/npm/node_modules/err-code": {
+      "version": "2.0.3",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/exponential-backoff": {
+      "version": "3.1.1",
+      "inBundle": true,
+      "license": "Apache-2.0"
+    },
+    "node_modules/npm/node_modules/fastest-levenshtein": {
+      "version": "1.0.16",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 4.9.1"
+      }
+    },
+    "node_modules/npm/node_modules/foreground-child": {
+      "version": "3.1.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "cross-spawn": "^7.0.0",
+        "signal-exit": "^4.0.1"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/npm/node_modules/fs-minipass": {
+      "version": "3.0.3",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "minipass": "^7.0.3"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/function-bind": {
+      "version": "1.1.2",
+      "inBundle": true,
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/npm/node_modules/gauge": {
+      "version": "5.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "aproba": "^1.0.3 || ^2.0.0",
+        "color-support": "^1.1.3",
+        "console-control-strings": "^1.1.0",
+        "has-unicode": "^2.0.1",
+        "signal-exit": "^4.0.1",
+        "string-width": "^4.2.3",
+        "strip-ansi": "^6.0.1",
+        "wide-align": "^1.1.5"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/glob": {
+      "version": "10.3.12",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "foreground-child": "^3.1.0",
+        "jackspeak": "^2.3.6",
+        "minimatch": "^9.0.1",
+        "minipass": "^7.0.4",
+        "path-scurry": "^1.10.2"
+      },
+      "bin": {
+        "glob": "dist/esm/bin.mjs"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/npm/node_modules/graceful-fs": {
+      "version": "4.2.11",
+      "inBundle": true,
+      "license": "ISC"
+    },
+    "node_modules/npm/node_modules/has-unicode": {
+      "version": "2.0.1",
+      "inBundle": true,
+      "license": "ISC"
+    },
+    "node_modules/npm/node_modules/hasown": {
+      "version": "2.0.2",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "function-bind": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/npm/node_modules/hosted-git-info": {
+      "version": "7.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "lru-cache": "^10.0.1"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/http-cache-semantics": {
+      "version": "4.1.1",
+      "inBundle": true,
+      "license": "BSD-2-Clause"
+    },
+    "node_modules/npm/node_modules/http-proxy-agent": {
+      "version": "7.0.2",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "agent-base": "^7.1.0",
+        "debug": "^4.3.4"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/npm/node_modules/https-proxy-agent": {
+      "version": "7.0.4",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "agent-base": "^7.0.2",
+        "debug": "4"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/npm/node_modules/iconv-lite": {
+      "version": "0.6.3",
+      "inBundle": true,
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "safer-buffer": ">= 2.1.2 < 3.0.0"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/npm/node_modules/ignore-walk": {
+      "version": "6.0.4",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "minimatch": "^9.0.0"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/imurmurhash": {
+      "version": "0.1.4",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.8.19"
+      }
+    },
+    "node_modules/npm/node_modules/indent-string": {
+      "version": "4.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/ini": {
+      "version": "4.1.2",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/init-package-json": {
+      "version": "6.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/package-json": "^5.0.0",
+        "npm-package-arg": "^11.0.0",
+        "promzard": "^1.0.0",
+        "read": "^3.0.1",
+        "semver": "^7.3.5",
+        "validate-npm-package-license": "^3.0.4",
+        "validate-npm-package-name": "^5.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/ip-address": {
+      "version": "9.0.5",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "jsbn": "1.1.0",
+        "sprintf-js": "^1.1.3"
+      },
+      "engines": {
+        "node": ">= 12"
+      }
+    },
+    "node_modules/npm/node_modules/ip-address/node_modules/sprintf-js": {
+      "version": "1.1.3",
+      "inBundle": true,
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/npm/node_modules/ip-regex": {
+      "version": "5.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/npm/node_modules/is-cidr": {
+      "version": "5.0.5",
+      "inBundle": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "cidr-regex": "^4.0.4"
+      },
+      "engines": {
+        "node": ">=14"
+      }
+    },
+    "node_modules/npm/node_modules/is-core-module": {
+      "version": "2.13.1",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "hasown": "^2.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/npm/node_modules/is-fullwidth-code-point": {
+      "version": "3.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/is-lambda": {
+      "version": "1.0.1",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/isexe": {
+      "version": "2.0.0",
+      "inBundle": true,
+      "license": "ISC"
+    },
+    "node_modules/npm/node_modules/jackspeak": {
+      "version": "2.3.6",
+      "inBundle": true,
+      "license": "BlueOak-1.0.0",
+      "dependencies": {
+        "@isaacs/cliui": "^8.0.2"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      },
+      "optionalDependencies": {
+        "@pkgjs/parseargs": "^0.11.0"
+      }
+    },
+    "node_modules/npm/node_modules/jsbn": {
+      "version": "1.1.0",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/json-parse-even-better-errors": {
+      "version": "3.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/json-stringify-nice": {
+      "version": "1.1.4",
+      "inBundle": true,
+      "license": "ISC",
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/npm/node_modules/jsonparse": {
+      "version": "1.3.1",
+      "engines": [
+        "node >= 0.2.0"
+      ],
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/just-diff": {
+      "version": "6.0.2",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/just-diff-apply": {
+      "version": "5.5.0",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/libnpmaccess": {
+      "version": "8.0.3",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "npm-package-arg": "^11.0.1",
+        "npm-registry-fetch": "^16.2.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/libnpmdiff": {
+      "version": "6.0.9",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/arborist": "^7.2.1",
+        "@npmcli/disparity-colors": "^3.0.0",
+        "@npmcli/installed-package-contents": "^2.0.2",
+        "binary-extensions": "^2.3.0",
+        "diff": "^5.1.0",
+        "minimatch": "^9.0.4",
+        "npm-package-arg": "^11.0.1",
+        "pacote": "^17.0.4",
+        "tar": "^6.2.1"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/libnpmexec": {
+      "version": "7.0.10",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/arborist": "^7.2.1",
+        "@npmcli/run-script": "^7.0.2",
+        "ci-info": "^4.0.0",
+        "npm-package-arg": "^11.0.1",
+        "npmlog": "^7.0.1",
+        "pacote": "^17.0.4",
+        "proc-log": "^3.0.0",
+        "read": "^3.0.1",
+        "read-package-json-fast": "^3.0.2",
+        "semver": "^7.3.7",
+        "walk-up-path": "^3.0.1"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/libnpmfund": {
+      "version": "5.0.7",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/arborist": "^7.2.1"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/libnpmhook": {
+      "version": "10.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "aproba": "^2.0.0",
+        "npm-registry-fetch": "^16.2.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/libnpmorg": {
+      "version": "6.0.3",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "aproba": "^2.0.0",
+        "npm-registry-fetch": "^16.2.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/libnpmpack": {
+      "version": "6.0.9",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/arborist": "^7.2.1",
+        "@npmcli/run-script": "^7.0.2",
+        "npm-package-arg": "^11.0.1",
+        "pacote": "^17.0.4"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/libnpmpublish": {
+      "version": "9.0.5",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "ci-info": "^4.0.0",
+        "normalize-package-data": "^6.0.0",
+        "npm-package-arg": "^11.0.1",
+        "npm-registry-fetch": "^16.2.0",
+        "proc-log": "^3.0.0",
+        "semver": "^7.3.7",
+        "sigstore": "^2.2.0",
+        "ssri": "^10.0.5"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/libnpmsearch": {
+      "version": "7.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "npm-registry-fetch": "^16.2.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/libnpmteam": {
+      "version": "6.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "aproba": "^2.0.0",
+        "npm-registry-fetch": "^16.2.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/libnpmversion": {
+      "version": "5.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/git": "^5.0.3",
+        "@npmcli/run-script": "^7.0.2",
+        "json-parse-even-better-errors": "^3.0.0",
+        "proc-log": "^3.0.0",
+        "semver": "^7.3.7"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/lru-cache": {
+      "version": "10.2.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "14 || >=16.14"
+      }
+    },
+    "node_modules/npm/node_modules/make-fetch-happen": {
+      "version": "13.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/agent": "^2.0.0",
+        "cacache": "^18.0.0",
+        "http-cache-semantics": "^4.1.1",
+        "is-lambda": "^1.0.1",
+        "minipass": "^7.0.2",
+        "minipass-fetch": "^3.0.0",
+        "minipass-flush": "^1.0.5",
+        "minipass-pipeline": "^1.2.4",
+        "negotiator": "^0.6.3",
+        "promise-retry": "^2.0.1",
+        "ssri": "^10.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/minimatch": {
+      "version": "9.0.4",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/npm/node_modules/minipass": {
+      "version": "7.0.4",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      }
+    },
+    "node_modules/npm/node_modules/minipass-collect": {
+      "version": "2.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "minipass": "^7.0.3"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      }
+    },
+    "node_modules/npm/node_modules/minipass-fetch": {
+      "version": "3.0.4",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "minipass": "^7.0.3",
+        "minipass-sized": "^1.0.3",
+        "minizlib": "^2.1.2"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      },
+      "optionalDependencies": {
+        "encoding": "^0.1.13"
+      }
+    },
+    "node_modules/npm/node_modules/minipass-flush": {
+      "version": "1.0.5",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "minipass": "^3.0.0"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/npm/node_modules/minipass-flush/node_modules/minipass": {
+      "version": "3.3.6",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/minipass-json-stream": {
+      "version": "1.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "jsonparse": "^1.3.1",
+        "minipass": "^3.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/minipass-json-stream/node_modules/minipass": {
+      "version": "3.3.6",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/minipass-pipeline": {
+      "version": "1.2.4",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "minipass": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/minipass-pipeline/node_modules/minipass": {
+      "version": "3.3.6",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/minipass-sized": {
+      "version": "1.0.3",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "minipass": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/minipass-sized/node_modules/minipass": {
+      "version": "3.3.6",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/minizlib": {
+      "version": "2.1.2",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "minipass": "^3.0.0",
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/npm/node_modules/minizlib/node_modules/minipass": {
+      "version": "3.3.6",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/mkdirp": {
+      "version": "1.0.4",
+      "inBundle": true,
+      "license": "MIT",
+      "bin": {
+        "mkdirp": "bin/cmd.js"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/npm/node_modules/ms": {
+      "version": "2.1.3",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/mute-stream": {
+      "version": "1.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/negotiator": {
+      "version": "0.6.3",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/npm/node_modules/node-gyp": {
+      "version": "10.1.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "env-paths": "^2.2.0",
+        "exponential-backoff": "^3.1.1",
+        "glob": "^10.3.10",
+        "graceful-fs": "^4.2.6",
+        "make-fetch-happen": "^13.0.0",
+        "nopt": "^7.0.0",
+        "proc-log": "^3.0.0",
+        "semver": "^7.3.5",
+        "tar": "^6.1.2",
+        "which": "^4.0.0"
+      },
+      "bin": {
+        "node-gyp": "bin/node-gyp.js"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/nopt": {
+      "version": "7.2.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "abbrev": "^2.0.0"
+      },
+      "bin": {
+        "nopt": "bin/nopt.js"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/normalize-package-data": {
+      "version": "6.0.0",
+      "inBundle": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "hosted-git-info": "^7.0.0",
+        "is-core-module": "^2.8.1",
+        "semver": "^7.3.5",
+        "validate-npm-package-license": "^3.0.4"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/npm-audit-report": {
+      "version": "5.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/npm-bundled": {
+      "version": "3.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "npm-normalize-package-bin": "^3.0.0"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/npm-install-checks": {
+      "version": "6.3.0",
+      "inBundle": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "semver": "^7.1.1"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/npm-normalize-package-bin": {
+      "version": "3.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/npm-package-arg": {
+      "version": "11.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "hosted-git-info": "^7.0.0",
+        "proc-log": "^3.0.0",
+        "semver": "^7.3.5",
+        "validate-npm-package-name": "^5.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/npm-packlist": {
+      "version": "8.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "ignore-walk": "^6.0.4"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/npm-pick-manifest": {
+      "version": "9.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "npm-install-checks": "^6.0.0",
+        "npm-normalize-package-bin": "^3.0.0",
+        "npm-package-arg": "^11.0.0",
+        "semver": "^7.3.5"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/npm-profile": {
+      "version": "9.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "npm-registry-fetch": "^16.0.0",
+        "proc-log": "^3.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/npm-registry-fetch": {
+      "version": "16.2.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/redact": "^1.1.0",
+        "make-fetch-happen": "^13.0.0",
+        "minipass": "^7.0.2",
+        "minipass-fetch": "^3.0.0",
+        "minipass-json-stream": "^1.0.1",
+        "minizlib": "^2.1.2",
+        "npm-package-arg": "^11.0.0",
+        "proc-log": "^3.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/npm-user-validate": {
+      "version": "2.0.0",
+      "inBundle": true,
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/npmlog": {
+      "version": "7.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "are-we-there-yet": "^4.0.0",
+        "console-control-strings": "^1.1.0",
+        "gauge": "^5.0.0",
+        "set-blocking": "^2.0.0"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/p-map": {
+      "version": "4.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "aggregate-error": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/npm/node_modules/pacote": {
+      "version": "17.0.6",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "@npmcli/git": "^5.0.0",
+        "@npmcli/installed-package-contents": "^2.0.1",
+        "@npmcli/promise-spawn": "^7.0.0",
+        "@npmcli/run-script": "^7.0.0",
+        "cacache": "^18.0.0",
+        "fs-minipass": "^3.0.0",
+        "minipass": "^7.0.2",
+        "npm-package-arg": "^11.0.0",
+        "npm-packlist": "^8.0.0",
+        "npm-pick-manifest": "^9.0.0",
+        "npm-registry-fetch": "^16.0.0",
+        "proc-log": "^3.0.0",
+        "promise-retry": "^2.0.1",
+        "read-package-json": "^7.0.0",
+        "read-package-json-fast": "^3.0.0",
+        "sigstore": "^2.2.0",
+        "ssri": "^10.0.0",
+        "tar": "^6.1.11"
+      },
+      "bin": {
+        "pacote": "lib/bin.js"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/parse-conflict-json": {
+      "version": "3.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "json-parse-even-better-errors": "^3.0.0",
+        "just-diff": "^6.0.0",
+        "just-diff-apply": "^5.2.0"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/path-key": {
+      "version": "3.1.1",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/path-scurry": {
+      "version": "1.10.2",
+      "inBundle": true,
+      "license": "BlueOak-1.0.0",
+      "dependencies": {
+        "lru-cache": "^10.2.0",
+        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/npm/node_modules/postcss-selector-parser": {
+      "version": "6.0.16",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "cssesc": "^3.0.0",
+        "util-deprecate": "^1.0.2"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/npm/node_modules/proc-log": {
+      "version": "3.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/promise-all-reject-late": {
+      "version": "1.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/npm/node_modules/promise-call-limit": {
+      "version": "3.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/npm/node_modules/promise-inflight": {
+      "version": "1.0.1",
+      "inBundle": true,
+      "license": "ISC"
+    },
+    "node_modules/npm/node_modules/promise-retry": {
+      "version": "2.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "err-code": "^2.0.2",
+        "retry": "^0.12.0"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/npm/node_modules/promzard": {
+      "version": "1.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "read": "^3.0.1"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/qrcode-terminal": {
+      "version": "0.12.0",
+      "inBundle": true,
+      "bin": {
+        "qrcode-terminal": "bin/qrcode-terminal.js"
+      }
+    },
+    "node_modules/npm/node_modules/read": {
+      "version": "3.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "mute-stream": "^1.0.0"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/read-cmd-shim": {
+      "version": "4.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/read-package-json": {
+      "version": "7.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "glob": "^10.2.2",
+        "json-parse-even-better-errors": "^3.0.0",
+        "normalize-package-data": "^6.0.0",
+        "npm-normalize-package-bin": "^3.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/read-package-json-fast": {
+      "version": "3.0.2",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "json-parse-even-better-errors": "^3.0.0",
+        "npm-normalize-package-bin": "^3.0.0"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/retry": {
+      "version": "0.12.0",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 4"
+      }
+    },
+    "node_modules/npm/node_modules/safer-buffer": {
+      "version": "2.1.2",
+      "inBundle": true,
+      "license": "MIT",
+      "optional": true
+    },
+    "node_modules/npm/node_modules/semver": {
+      "version": "7.6.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "lru-cache": "^6.0.0"
+      },
+      "bin": {
+        "semver": "bin/semver.js"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/npm/node_modules/semver/node_modules/lru-cache": {
+      "version": "6.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/npm/node_modules/set-blocking": {
+      "version": "2.0.0",
+      "inBundle": true,
+      "license": "ISC"
+    },
+    "node_modules/npm/node_modules/shebang-command": {
+      "version": "2.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "shebang-regex": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/shebang-regex": {
+      "version": "3.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/signal-exit": {
+      "version": "4.1.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/npm/node_modules/sigstore": {
+      "version": "2.3.0",
+      "inBundle": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@sigstore/bundle": "^2.3.1",
+        "@sigstore/core": "^1.0.0",
+        "@sigstore/protobuf-specs": "^0.3.1",
+        "@sigstore/sign": "^2.3.0",
+        "@sigstore/tuf": "^2.3.1",
+        "@sigstore/verify": "^1.2.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/smart-buffer": {
+      "version": "4.2.0",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 6.0.0",
+        "npm": ">= 3.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/socks": {
+      "version": "2.8.3",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "ip-address": "^9.0.5",
+        "smart-buffer": "^4.2.0"
+      },
+      "engines": {
+        "node": ">= 10.0.0",
+        "npm": ">= 3.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/socks-proxy-agent": {
+      "version": "8.0.3",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "agent-base": "^7.1.1",
+        "debug": "^4.3.4",
+        "socks": "^2.7.1"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/npm/node_modules/spdx-correct": {
+      "version": "3.2.0",
+      "inBundle": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "spdx-expression-parse": "^3.0.0",
+        "spdx-license-ids": "^3.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/spdx-correct/node_modules/spdx-expression-parse": {
+      "version": "3.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "spdx-exceptions": "^2.1.0",
+        "spdx-license-ids": "^3.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/spdx-exceptions": {
+      "version": "2.5.0",
+      "inBundle": true,
+      "license": "CC-BY-3.0"
+    },
+    "node_modules/npm/node_modules/spdx-expression-parse": {
+      "version": "4.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "spdx-exceptions": "^2.1.0",
+        "spdx-license-ids": "^3.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/spdx-license-ids": {
+      "version": "3.0.17",
+      "inBundle": true,
+      "license": "CC0-1.0"
+    },
+    "node_modules/npm/node_modules/ssri": {
+      "version": "10.0.5",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "minipass": "^7.0.3"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/string-width": {
+      "version": "4.2.3",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "emoji-regex": "^8.0.0",
+        "is-fullwidth-code-point": "^3.0.0",
+        "strip-ansi": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/string-width-cjs": {
+      "name": "string-width",
+      "version": "4.2.3",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "emoji-regex": "^8.0.0",
+        "is-fullwidth-code-point": "^3.0.0",
+        "strip-ansi": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/strip-ansi": {
+      "version": "6.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/strip-ansi-cjs": {
+      "name": "strip-ansi",
+      "version": "6.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/supports-color": {
+      "version": "9.4.0",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/supports-color?sponsor=1"
+      }
+    },
+    "node_modules/npm/node_modules/tar": {
+      "version": "6.2.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "chownr": "^2.0.0",
+        "fs-minipass": "^2.0.0",
+        "minipass": "^5.0.0",
+        "minizlib": "^2.1.1",
+        "mkdirp": "^1.0.3",
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/npm/node_modules/tar/node_modules/fs-minipass": {
+      "version": "2.1.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "minipass": "^3.0.0"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/npm/node_modules/tar/node_modules/fs-minipass/node_modules/minipass": {
+      "version": "3.3.6",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/tar/node_modules/minipass": {
+      "version": "5.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/npm/node_modules/text-table": {
+      "version": "0.2.0",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/tiny-relative-date": {
+      "version": "1.3.0",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/treeverse": {
+      "version": "3.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/tuf-js": {
+      "version": "2.2.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "@tufjs/models": "2.0.0",
+        "debug": "^4.3.4",
+        "make-fetch-happen": "^13.0.0"
+      },
+      "engines": {
+        "node": "^16.14.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/unique-filename": {
+      "version": "3.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "unique-slug": "^4.0.0"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/unique-slug": {
+      "version": "4.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "imurmurhash": "^0.1.4"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/util-deprecate": {
+      "version": "1.0.2",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/validate-npm-package-license": {
+      "version": "3.0.4",
+      "inBundle": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "spdx-correct": "^3.0.0",
+        "spdx-expression-parse": "^3.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/validate-npm-package-license/node_modules/spdx-expression-parse": {
+      "version": "3.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "spdx-exceptions": "^2.1.0",
+        "spdx-license-ids": "^3.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/validate-npm-package-name": {
+      "version": "5.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "builtins": "^5.0.0"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/walk-up-path": {
+      "version": "3.0.1",
+      "inBundle": true,
+      "license": "ISC"
+    },
+    "node_modules/npm/node_modules/wcwidth": {
+      "version": "1.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "defaults": "^1.0.3"
+      }
+    },
+    "node_modules/npm/node_modules/which": {
+      "version": "4.0.0",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "isexe": "^3.1.1"
+      },
+      "bin": {
+        "node-which": "bin/which.js"
+      },
+      "engines": {
+        "node": "^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/which/node_modules/isexe": {
+      "version": "3.1.1",
+      "inBundle": true,
+      "license": "ISC",
+      "engines": {
+        "node": ">=16"
+      }
+    },
+    "node_modules/npm/node_modules/wide-align": {
+      "version": "1.1.5",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "string-width": "^1.0.2 || 2 || 3 || 4"
+      }
+    },
+    "node_modules/npm/node_modules/wrap-ansi": {
+      "version": "8.1.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^6.1.0",
+        "string-width": "^5.0.1",
+        "strip-ansi": "^7.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
+      }
+    },
+    "node_modules/npm/node_modules/wrap-ansi-cjs": {
+      "name": "wrap-ansi",
+      "version": "7.0.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.0.0",
+        "string-width": "^4.1.0",
+        "strip-ansi": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
+      }
+    },
+    "node_modules/npm/node_modules/wrap-ansi-cjs/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/npm/node_modules/wrap-ansi/node_modules/ansi-regex": {
+      "version": "6.0.1",
+      "inBundle": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
+      }
+    },
+    "node_modules/npm/node_modules/wrap-ansi/node_modules/emoji-regex": {
+      "version": "9.2.2",
+      "inBundle": true,
+      "license": "MIT"
+    },
+    "node_modules/npm/node_modules/wrap-ansi/node_modules/string-width": {
+      "version": "5.1.2",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "eastasianwidth": "^0.2.0",
+        "emoji-regex": "^9.2.2",
+        "strip-ansi": "^7.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/npm/node_modules/wrap-ansi/node_modules/strip-ansi": {
+      "version": "7.1.0",
+      "inBundle": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
+      }
+    },
+    "node_modules/npm/node_modules/write-file-atomic": {
+      "version": "5.0.1",
+      "inBundle": true,
+      "license": "ISC",
+      "dependencies": {
+        "imurmurhash": "^0.1.4",
+        "signal-exit": "^4.0.1"
+      },
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/npm/node_modules/yallist": {
+      "version": "4.0.0",
+      "inBundle": true,
+      "license": "ISC"
+    },
+    "node_modules/on-exit-leak-free": {
+      "version": "2.1.0",
+      "license": "MIT"
+    },
+    "node_modules/once": {
+      "version": "1.4.0",
+      "license": "ISC",
+      "dependencies": {
+        "wrappy": "1"
+      }
+    },
+    "node_modules/pino": {
+      "version": "8.18.0",
+      "license": "MIT",
+      "dependencies": {
+        "atomic-sleep": "^1.0.0",
+        "fast-redact": "^3.1.1",
+        "on-exit-leak-free": "^2.1.0",
+        "pino-abstract-transport": "v1.1.0",
+        "pino-std-serializers": "^6.0.0",
+        "process-warning": "^3.0.0",
+        "quick-format-unescaped": "^4.0.3",
+        "real-require": "^0.2.0",
+        "safe-stable-stringify": "^2.3.1",
+        "sonic-boom": "^3.7.0",
+        "thread-stream": "^2.0.0"
+      },
+      "bin": {
+        "pino": "bin.js"
+      }
+    },
+    "node_modules/pino-abstract-transport": {
+      "version": "1.1.0",
+      "license": "MIT",
+      "dependencies": {
+        "readable-stream": "^4.0.0",
+        "split2": "^4.0.0"
+      }
+    },
+    "node_modules/pino-pretty": {
+      "version": "10.3.1",
+      "license": "MIT",
+      "dependencies": {
+        "colorette": "^2.0.7",
+        "dateformat": "^4.6.3",
+        "fast-copy": "^3.0.0",
+        "fast-safe-stringify": "^2.1.1",
+        "help-me": "^5.0.0",
+        "joycon": "^3.1.1",
+        "minimist": "^1.2.6",
+        "on-exit-leak-free": "^2.1.0",
+        "pino-abstract-transport": "^1.0.0",
+        "pump": "^3.0.0",
+        "readable-stream": "^4.0.0",
+        "secure-json-parse": "^2.4.0",
+        "sonic-boom": "^3.0.0",
+        "strip-json-comments": "^3.1.1"
+      },
+      "bin": {
+        "pino-pretty": "bin.js"
+      }
+    },
+    "node_modules/pino-std-serializers": {
+      "version": "6.2.2",
+      "license": "MIT"
+    },
+    "node_modules/prettier": {
+      "version": "3.2.4",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "prettier": "bin/prettier.cjs"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/prettier/prettier?sponsor=1"
+      }
+    },
+    "node_modules/process": {
+      "version": "0.11.10",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6.0"
+      }
+    },
+    "node_modules/process-warning": {
+      "version": "3.0.0",
+      "license": "MIT"
+    },
+    "node_modules/proxy-from-env": {
+      "version": "1.1.0",
+      "license": "MIT"
+    },
+    "node_modules/pump": {
+      "version": "3.0.0",
+      "license": "MIT",
+      "dependencies": {
+        "end-of-stream": "^1.1.0",
+        "once": "^1.3.1"
+      }
+    },
+    "node_modules/quick-format-unescaped": {
+      "version": "4.0.4",
+      "license": "MIT"
+    },
+    "node_modules/readable-stream": {
+      "version": "4.5.2",
+      "license": "MIT",
+      "dependencies": {
+        "abort-controller": "^3.0.0",
+        "buffer": "^6.0.3",
+        "events": "^3.3.0",
+        "process": "^0.11.10",
+        "string_decoder": "^1.3.0"
+      },
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      }
+    },
+    "node_modules/real-require": {
+      "version": "0.2.0",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 12.13.0"
+      }
+    },
+    "node_modules/regenerator-runtime": {
+      "version": "0.14.1",
+      "license": "MIT"
+    },
+    "node_modules/ripemd160": {
+      "version": "2.0.2",
+      "license": "MIT",
+      "dependencies": {
+        "hash-base": "^3.0.0",
+        "inherits": "^2.0.1"
+      }
+    },
+    "node_modules/rpc-websockets": {
+      "version": "7.9.0",
+      "license": "LGPL-3.0-only",
+      "dependencies": {
+        "@babel/runtime": "^7.17.2",
+        "eventemitter3": "^4.0.7",
+        "uuid": "^8.3.2",
+        "ws": "^8.5.0"
+      },
+      "funding": {
+        "type": "paypal",
+        "url": "https://paypal.me/kozjak"
+      },
+      "optionalDependencies": {
+        "bufferutil": "^4.0.1",
+        "utf-8-validate": "^5.0.2"
+      }
+    },
+    "node_modules/rpc-websockets/node_modules/ws": {
+      "version": "8.16.0",
+      "license": "MIT",
+      "engines": {
+        "node": ">=10.0.0"
+      },
+      "peerDependencies": {
+        "bufferutil": "^4.0.1",
+        "utf-8-validate": ">=5.0.2"
+      },
+      "peerDependenciesMeta": {
+        "bufferutil": {
+          "optional": true
+        },
+        "utf-8-validate": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/safe-buffer": {
+      "version": "5.2.1",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT"
+    },
+    "node_modules/safe-stable-stringify": {
+      "version": "2.4.3",
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/secure-json-parse": {
+      "version": "2.7.0",
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/sha.js": {
+      "version": "2.4.11",
+      "license": "(MIT AND BSD-3-Clause)",
+      "dependencies": {
+        "inherits": "^2.0.1",
+        "safe-buffer": "^5.0.1"
+      },
+      "bin": {
+        "sha.js": "bin.js"
+      }
+    },
+    "node_modules/sonic-boom": {
+      "version": "3.8.0",
+      "license": "MIT",
+      "dependencies": {
+        "atomic-sleep": "^1.0.0"
+      }
+    },
+    "node_modules/split2": {
+      "version": "4.2.0",
+      "license": "ISC",
+      "engines": {
+        "node": ">= 10.x"
+      }
+    },
+    "node_modules/string_decoder": {
+      "version": "1.3.0",
+      "license": "MIT",
+      "dependencies": {
+        "safe-buffer": "~5.2.0"
+      }
+    },
+    "node_modules/strip-json-comments": {
+      "version": "3.1.1",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/superstruct": {
+      "version": "0.14.2",
+      "license": "MIT"
+    },
+    "node_modules/text-encoding-utf-8": {
+      "version": "1.0.2"
+    },
+    "node_modules/thread-stream": {
+      "version": "2.3.0",
+      "license": "MIT",
+      "dependencies": {
+        "real-require": "^0.2.0"
+      }
+    },
+    "node_modules/through": {
+      "version": "2.3.8",
+      "license": "MIT"
+    },
+    "node_modules/toformat": {
+      "version": "2.0.0",
+      "license": "MIT"
+    },
+    "node_modules/tr46": {
+      "version": "0.0.3",
+      "license": "MIT"
+    },
+    "node_modules/ts-node": {
+      "version": "10.9.2",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@cspotcode/source-map-support": "^0.8.0",
+        "@tsconfig/node10": "^1.0.7",
+        "@tsconfig/node12": "^1.0.7",
+        "@tsconfig/node14": "^1.0.0",
+        "@tsconfig/node16": "^1.0.2",
+        "acorn": "^8.4.1",
+        "acorn-walk": "^8.1.1",
+        "arg": "^4.1.0",
+        "create-require": "^1.1.0",
+        "diff": "^4.0.1",
+        "make-error": "^1.1.1",
+        "v8-compile-cache-lib": "^3.0.1",
+        "yn": "3.1.1"
+      },
+      "bin": {
+        "ts-node": "dist/bin.js",
+        "ts-node-cwd": "dist/bin-cwd.js",
+        "ts-node-esm": "dist/bin-esm.js",
+        "ts-node-script": "dist/bin-script.js",
+        "ts-node-transpile-only": "dist/bin-transpile.js",
+        "ts-script": "dist/bin-script-deprecated.js"
+      },
+      "peerDependencies": {
+        "@swc/core": ">=1.2.50",
+        "@swc/wasm": ">=1.2.50",
+        "@types/node": "*",
+        "typescript": ">=2.7"
+      },
+      "peerDependenciesMeta": {
+        "@swc/core": {
+          "optional": true
+        },
+        "@swc/wasm": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/tslib": {
+      "version": "2.6.2",
+      "license": "0BSD"
+    },
+    "node_modules/tweetnacl": {
+      "version": "1.0.3",
+      "license": "Unlicense"
+    },
+    "node_modules/typescript": {
+      "version": "5.3.3",
+      "dev": true,
+      "license": "Apache-2.0",
+      "bin": {
+        "tsc": "bin/tsc",
+        "tsserver": "bin/tsserver"
+      },
+      "engines": {
+        "node": ">=14.17"
+      }
+    },
+    "node_modules/utf-8-validate": {
+      "version": "5.0.10",
+      "hasInstallScript": true,
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "node-gyp-build": "^4.3.0"
+      },
+      "engines": {
+        "node": ">=6.14.2"
+      }
+    },
+    "node_modules/util-deprecate": {
+      "version": "1.0.2",
+      "license": "MIT"
+    },
+    "node_modules/uuid": {
+      "version": "8.3.2",
+      "license": "MIT",
+      "bin": {
+        "uuid": "dist/bin/uuid"
+      }
+    },
+    "node_modules/v8-compile-cache-lib": {
+      "version": "3.0.1",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/webidl-conversions": {
+      "version": "3.0.1",
+      "license": "BSD-2-Clause"
+    },
+    "node_modules/whatwg-url": {
+      "version": "5.0.0",
+      "license": "MIT",
+      "dependencies": {
+        "tr46": "~0.0.3",
+        "webidl-conversions": "^3.0.0"
+      }
+    },
+    "node_modules/wrappy": {
+      "version": "1.0.2",
+      "license": "ISC"
+    },
+    "node_modules/ws": {
+      "version": "7.5.9",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8.3.0"
+      },
+      "peerDependencies": {
+        "bufferutil": "^4.0.1",
+        "utf-8-validate": "^5.0.2"
+      },
+      "peerDependenciesMeta": {
+        "bufferutil": {
+          "optional": true
+        },
+        "utf-8-validate": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/yn": {
+      "version": "3.1.1",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    }
+  }
+}
Index: Bot汉化/bot Solana Sniper Main/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/package.json b/Bot汉化/bot Solana Sniper Main/package.json
new file mode 100644
--- /dev/null	(date 1727201868986)
+++ b/Bot汉化/bot Solana Sniper Main/package.json	(date 1727201868986)
@@ -0,0 +1,35 @@
+{
+  "name": "axisbot-solana-sniper",
+  "author": "AxisBot",
+  "homepage": "https://axisbot.xyz",
+  "version": "1.0.1",
+  "scripts": {
+    "start": "ts-node index.ts",
+    "tsc": "tsc --noEmit"
+  },
+  "dependencies": {
+    "@metaplex-foundation/mpl-token-metadata": "^3.2.1",
+    "@raydium-io/raydium-sdk": "^1.3.1-beta.47",
+    "@solana/spl-token": "^0.4.0",
+    "@solana/web3.js": "^1.89.1",
+    "async-mutex": "^0.5.0",
+    "axios": "^1.6.8",
+    "bigint-buffer": "^1.1.5",
+    "bip39": "^3.1.0",
+    "bn.js": "^5.2.1",
+    "bs58": "^5.0.0",
+    "dotenv": "^16.4.1",
+    "ed25519-hd-key": "^1.3.0",
+    "i": "^0.3.7",
+    "npm": "^10.5.2",
+    "pino": "^8.18.0",
+    "pino-pretty": "^10.3.1",
+    "pino-std-serializers": "^6.2.2"
+  },
+  "devDependencies": {
+    "@types/bn.js": "^5.1.5",
+    "prettier": "^3.2.4",
+    "ts-node": "^10.9.2",
+    "typescript": "^5.3.3"
+  }
+}
Index: Bot原版/Bot Solana Sniper Main/tsconfig.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/tsconfig.json b/Bot原版/Bot Solana Sniper Main/tsconfig.json
new file mode 100644
--- /dev/null	(date 1732301213411)
+++ b/Bot原版/Bot Solana Sniper Main/tsconfig.json	(date 1732301213411)
@@ -0,0 +1,109 @@
+{
+  "compilerOptions": {
+    /* Visit https://aka.ms/tsconfig to read more about this file */
+
+    /* Projects */
+    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
+    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
+    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
+    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
+    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
+    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */
+
+    /* Language and Environment */
+    "target": "es2016",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
+    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
+    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
+    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
+    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
+    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
+    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
+    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
+    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
+    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
+    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
+    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */
+
+    /* Modules */
+    "module": "commonjs",                                /* Specify what module code is generated. */
+    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
+    // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
+    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
+    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
+    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
+    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
+    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
+    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
+    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
+    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
+    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
+    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
+    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
+    "resolveJsonModule": true,                        /* Enable importing .json files. */
+    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
+    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */
+
+    /* JavaScript Support */
+    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
+    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
+    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */
+
+    /* Emit */
+    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
+    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
+    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
+    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
+    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
+    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
+    // "outDir": "./",                                   /* Specify an output folder for all emitted files. */
+    // "removeComments": true,                           /* Disable emitting comments. */
+    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
+    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
+    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */
+    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
+    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
+    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
+    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
+    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
+    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
+    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
+    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
+    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
+    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
+    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
+    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */
+
+    /* Interop Constraints */
+    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
+    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
+    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
+    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
+    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
+    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */
+
+    /* Type Checking */
+    "strict": true,                                      /* Enable all strict type-checking options. */
+    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
+    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
+    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
+    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
+    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
+    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
+    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
+    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
+    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
+    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
+    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
+    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
+    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
+    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
+    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
+    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
+    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
+    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */
+
+    /* Completeness */
+    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
+    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
+  }
+}
Index: Bot原版/Bot Solana Sniper Main/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/README.md b/Bot原版/Bot Solana Sniper Main/README.md
new file mode 100644
--- /dev/null	(date 1732301213361)
+++ b/Bot原版/Bot Solana Sniper Main/README.md	(date 1732301213361)
@@ -0,0 +1,122 @@
+# AxisBot Solana Sniper v1.0
+
+AxisBot - snipe and sell SPL tokens at lightning speed. Our sniping bot helps you maintain a higher level of security while also giving you the fastest sniping speed possible. Built by Traders for Traders.
+
+## Setup
+
+To run the script you need to:
+
+- Create a new empty Solana wallet
+- Transfer some SOL to it.
+- Convert some SOL to USDC or WSOL.
+  - You need USDC or WSOL depending on the configuration set below.
+- Configure the script by updating `.env.copy` file (remove the .copy from the file name when done).
+  - Check [Configuration](#configuration) section bellow
+- Install dependencies by typing: `npm install`
+- Run the script by typing: `npm run start` in terminal
+
+### Configuration
+
+#### Wallet
+
+- `PRIVATE_KEY` - Your wallet's private key.
+
+#### Connection
+
+- `RPC_ENDPOINT` - HTTPS RPC endpoint for interacting with the Solana network.
+- `RPC_WEBSOCKET_ENDPOINT` - WebSocket RPC endpoint for real-time updates from the Solana network.
+- `COMMITMENT_LEVEL`- The commitment level of transactions (e.g., "finalized" for the highest level of security).
+
+#### Bot
+
+- `LOG_LEVEL` - Set logging level, e.g., `info`, `debug`, `trace`, etc.
+- `ONE_TOKEN_AT_A_TIME` - Set to `true` to process buying one token at a time.
+- `COMPUTE_UNIT_LIMIT` - Compute limit used to calculate fees.
+- `COMPUTE_UNIT_PRICE` - Compute price used to calculate fees.
+- `PRE_LOAD_EXISTING_MARKETS` - Bot will load all existing markets in memory on start.
+  - This option should not be used with public RPC.
+- `CACHE_NEW_MARKETS` - Set to `true` to cache new markets.
+  - This option should not be used with public RPC.
+- `TRANSACTION_EXECUTOR` - Set to jito to use JSON-RPC jito executer
+- `CUSTOM_FEE` - If using warp or jito executors this value will be used for transaction fees instead of `COMPUTE_UNIT_LIMIT` and `COMPUTE_UNIT_LIMIT`
+  - Minimum value is 0.0001 SOL, but we recommend using 0.01 SOL or above
+  - On top of this fee, minimal solana network fee will be applied
+
+#### Buy
+
+- `QUOTE_MINT` - Which pools to snipe, USDC or WSOL.
+- `QUOTE_AMOUNT` - Amount used to buy each new token.
+- `AUTO_BUY_DELAY` - Delay in milliseconds before buying a token.
+- `MAX_BUY_RETRIES` - Maximum number of retries for buying a token.
+- `BUY_SLIPPAGE` - Slippage %
+
+#### Sell
+
+- `AUTO_SELL` - Set to `true` to enable automatic selling of tokens.
+  - If you want to manually sell bought tokens, disable this option.
+- `MAX_SELL_RETRIES` - Maximum number of retries for selling a token.
+- `AUTO_SELL_DELAY` - Delay in milliseconds before auto-selling a token.
+- `PRICE_CHECK_INTERVAL` - Interval in milliseconds for checking the take profit and stop loss conditions.
+  - Set to zero to disable take profit and stop loss.
+- `PRICE_CHECK_DURATION` - Time in milliseconds to wait for stop loss/take profit conditions.
+  - If you don't reach profit or loss bot will auto sell after this time.
+  - Set to zero to disable take profit and stop loss.
+- `TAKE_PROFIT` - Percentage profit at which to take profit.
+  - Take profit is calculated based on quote mint.
+- `STOP_LOSS` - Percentage loss at which to stop the loss.
+  - Stop loss is calculated based on quote mint.
+- `SELL_SLIPPAGE` - Slippage %.
+
+#### Snipe list
+
+- `USE_SNIPE_LIST` - Set to `true` to enable buying only tokens listed in `snipe-list.txt`.
+  - Pool must not exist before the bot starts.
+  - If token can be traded before bot starts nothing will happen. Bot will not buy the token.
+- `SNIPE_LIST_REFRESH_INTERVAL` - Interval in milliseconds to refresh the snipe list.
+  - You can update snipe list while bot is running. It will pickup the new changes each time it does refresh.
+
+Note: When using snipe list filters below will be disabled.
+
+#### Filters
+
+- `FILTER_CHECK_INTERVAL` - Interval in milliseconds for checking if pool match the filters.
+  - Set to zero to disable filters.
+- `FILTER_CHECK_DURATION` - Time in milliseconds to wait for pool to match the filters.
+  - If pool doesn't match the filter buy will not happen.
+  - Set to zero to disable filters.
+- `CONSECUTIVE_FILTER_MATCHES` - How many times in a row pool needs to match the filters.
+  - This is useful because when pool is burned (and rugged), other filters may not report the same behavior. eg. pool size may still have old value
+- `CHECK_IF_MUTABLE` - Set to `true` to buy tokens only if their metadata are not mutable.
+- `CHECK_IF_MINT_IS_RENOUNCED` - Set to `true` to buy tokens only if their mint is renounced.
+- `CHECK_IF_FREEZABLE` - Set to `true` to buy tokens only if they are not freezable.
+- `CHECK_IF_BURNED` - Set to `true` to buy tokens only if their liquidity pool is burned.
+- `MIN_POOL_SIZE` - Bot will buy only if the pool size is greater than or equal the specified amount.
+  - Set `0` to disable.
+- `MAX_POOL_SIZE` - Bot will buy only if the pool size is less than or equal the specified amount.
+  - Set `0` to disable.
+
+## Common issues
+
+If you have an error which is not listed here, please create a new issue in this repository.
+To collect more information on an issue, please change `LOG_LEVEL` to `debug`.
+
+### No token account
+
+- If you see following error in your log file:  
+  `Error: No SOL token account found in wallet: `  
+  it means that wallet you provided doesn't have USDC/WSOL token account.
+  - FIX: Go to dex and swap some SOL to USDC/WSOL. For example when you swap sol to wsol you should see it in wallet as shown below:
+
+## Disclaimer
+
+Disclaimer:
+The AxisBot Solana Sniper is a code presented to simplify many routine trading tasks, 
+which combines many useful utilities. 
+Trading cryptocurrencies involves substantial risk, including the potential loss of principal. 
+The bot does not guarantee profits or specific outcomes. 
+Users are solely responsible for any risks associated with using this tool. 
+Always conduct your research, exercise caution, and consider your risk tolerance before engaging in any trading activities, 
+automated or otherwise. 
+The creators and contributors of this bot bear no responsibility for any financial losses incurred while using this tool.
+By using the Axis Sniper Bot, you acknowledge and accept the risks associated with cryptocurrency trading, 
+and you agree that the creators and contributors are not liable for any damages or losses resulting from its use.
\ No newline at end of file
Index: Bot汉化/bot Solana Sniper Main/tsconfig.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/tsconfig.json b/Bot汉化/bot Solana Sniper Main/tsconfig.json
new file mode 100644
--- /dev/null	(date 1727201869094)
+++ b/Bot汉化/bot Solana Sniper Main/tsconfig.json	(date 1727201869094)
@@ -0,0 +1,109 @@
+{
+  "compilerOptions": {
+    /* Visit https://aka.ms/tsconfig to read more about this file */
+
+    /* Projects */
+    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
+    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
+    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
+    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
+    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
+    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */
+
+    /* Language and Environment */
+    "target": "es2016",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
+    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
+    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
+    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
+    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
+    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
+    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
+    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
+    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
+    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
+    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
+    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */
+
+    /* Modules */
+    "module": "commonjs",                                /* Specify what module code is generated. */
+    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
+    // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
+    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
+    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
+    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
+    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
+    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
+    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
+    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
+    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
+    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
+    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
+    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
+    "resolveJsonModule": true,                        /* Enable importing .json files. */
+    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
+    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */
+
+    /* JavaScript Support */
+    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
+    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
+    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */
+
+    /* Emit */
+    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
+    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
+    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
+    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
+    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
+    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
+    // "outDir": "./",                                   /* Specify an output folder for all emitted files. */
+    // "removeComments": true,                           /* Disable emitting comments. */
+    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
+    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
+    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */
+    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
+    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
+    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
+    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
+    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
+    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
+    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
+    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
+    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
+    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
+    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
+    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */
+
+    /* Interop Constraints */
+    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
+    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
+    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
+    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
+    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
+    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */
+
+    /* Type Checking */
+    "strict": true,                                      /* Enable all strict type-checking options. */
+    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
+    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
+    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
+    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
+    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
+    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
+    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
+    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
+    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
+    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
+    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
+    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
+    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
+    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
+    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
+    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
+    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
+    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */
+
+    /* Completeness */
+    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
+    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
+  }
+}
Index: Bot汉化/bot Solana Sniper Main/helpers/market.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/helpers/market.ts b/Bot汉化/bot Solana Sniper Main/helpers/market.ts
new file mode 100644
--- /dev/null	(date 1727206464943)
+++ b/Bot汉化/bot Solana Sniper Main/helpers/market.ts	(date 1727206464943)
@@ -0,0 +1,33 @@
+// 导入所需的模块和库
+import { Commitment, Connection, PublicKey } from '@solana/web3.js'; // Solana 相关库
+import { GetStructureSchema, MARKET_STATE_LAYOUT_V3, publicKey, struct } from '@raydium-io/raydium-sdk'; // Raydium SDK
+
+// 定义最小市场状态布局 V3
+export const MINIMAL_MARKET_STATE_LAYOUT_V3 = struct([
+  publicKey('eventQueue'), // 事件队列的公钥
+  publicKey('bids'), // 买入订单的公钥
+  publicKey('asks'), // 卖出订单的公钥
+]);
+
+// 定义类型
+export type MinimalMarketStateLayoutV3 = typeof MINIMAL_MARKET_STATE_LAYOUT_V3; // 最小市场状态布局类型
+export type MinimalMarketLayoutV3 = GetStructureSchema<MinimalMarketStateLayoutV3>; // 获取最小市场布局的结构类型
+
+// 获取最小市场 V3 的异步函数
+export async function getMinimalMarketV3(
+  connection: Connection, // Solana 连接
+  marketId: PublicKey, // 市场 ID
+  commitment?: Commitment, // 提交级别（可选）
+): Promise<MinimalMarketLayoutV3> { // 返回最小市场布局 V3
+                                    // 从区块链获取市场信息
+  const marketInfo = await connection.getAccountInfo(marketId, {
+    commitment, // 提交级别
+    dataSlice: { // 数据切片
+      offset: MARKET_STATE_LAYOUT_V3.offsetOf('eventQueue'), // 从事件队列开始的偏移
+      length: 32 * 3, // 读取的长度
+    },
+  });
+
+  // 解码并返回市场信息
+  return MINIMAL_MARKET_STATE_LAYOUT_V3.decode(marketInfo!.data);
+}
Index: Bot原版/Bot Solana Sniper Main/listeners/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/listeners/index.ts b/Bot原版/Bot Solana Sniper Main/listeners/index.ts
new file mode 100644
--- /dev/null	(date 1732301213741)
+++ b/Bot原版/Bot Solana Sniper Main/listeners/index.ts	(date 1732301213741)
@@ -0,0 +1,1 @@
+export * from './listeners';
Index: Bot原版/Bot Solana Sniper Main/listeners/listeners.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/listeners/listeners.ts b/Bot原版/Bot Solana Sniper Main/listeners/listeners.ts
new file mode 100644
--- /dev/null	(date 1732301213761)
+++ b/Bot原版/Bot Solana Sniper Main/listeners/listeners.ts	(date 1732301213761)
@@ -0,0 +1,112 @@
+import { LIQUIDITY_STATE_LAYOUT_V4, MAINNET_PROGRAM_ID, MARKET_STATE_LAYOUT_V3, Token } from '@raydium-io/raydium-sdk';
+import bs58 from 'bs58';
+import { Connection, PublicKey } from '@solana/web3.js';
+import { TOKEN_PROGRAM_ID } from '@solana/spl-token';
+import { EventEmitter } from 'events';
+
+export class Listeners extends EventEmitter {
+  private subscriptions: number[] = [];
+
+  constructor(private readonly connection: Connection) {
+    super();
+  }
+
+  public async start(config: {
+    walletPublicKey: PublicKey;
+    quoteToken: Token;
+    autoSell: boolean;
+    cacheNewMarkets: boolean;
+  }) {
+    if (config.cacheNewMarkets) {
+      const openBookSubscription = await this.subscribeToOpenBookMarkets(config);
+      this.subscriptions.push(openBookSubscription);
+    }
+
+    const raydiumSubscription = await this.subscribeToRaydiumPools(config);
+    this.subscriptions.push(raydiumSubscription);
+
+    if (config.autoSell) {
+      const walletSubscription = await this.subscribeToWalletChanges(config);
+      this.subscriptions.push(walletSubscription);
+    }
+  }
+
+  private async subscribeToOpenBookMarkets(config: { quoteToken: Token }) {
+    return this.connection.onProgramAccountChange(
+      MAINNET_PROGRAM_ID.OPENBOOK_MARKET,
+      async (updatedAccountInfo) => {
+        this.emit('market', updatedAccountInfo);
+      },
+      this.connection.commitment,
+      [
+        { dataSize: MARKET_STATE_LAYOUT_V3.span },
+        {
+          memcmp: {
+            offset: MARKET_STATE_LAYOUT_V3.offsetOf('quoteMint'),
+            bytes: config.quoteToken.mint.toBase58(),
+          },
+        },
+      ],
+    );
+  }
+
+  private async subscribeToRaydiumPools(config: { quoteToken: Token }) {
+    return this.connection.onProgramAccountChange(
+      MAINNET_PROGRAM_ID.AmmV4,
+      async (updatedAccountInfo) => {
+        this.emit('pool', updatedAccountInfo);
+      },
+      this.connection.commitment,
+      [
+        { dataSize: LIQUIDITY_STATE_LAYOUT_V4.span },
+        {
+          memcmp: {
+            offset: LIQUIDITY_STATE_LAYOUT_V4.offsetOf('quoteMint'),
+            bytes: config.quoteToken.mint.toBase58(),
+          },
+        },
+        {
+          memcmp: {
+            offset: LIQUIDITY_STATE_LAYOUT_V4.offsetOf('marketProgramId'),
+            bytes: MAINNET_PROGRAM_ID.OPENBOOK_MARKET.toBase58(),
+          },
+        },
+        {
+          memcmp: {
+            offset: LIQUIDITY_STATE_LAYOUT_V4.offsetOf('status'),
+            bytes: bs58.encode([6, 0, 0, 0, 0, 0, 0, 0]),
+          },
+        },
+      ],
+    );
+  }
+
+  private async subscribeToWalletChanges(config: { walletPublicKey: PublicKey }) {
+    return this.connection.onProgramAccountChange(
+      TOKEN_PROGRAM_ID,
+      async (updatedAccountInfo) => {
+        this.emit('wallet', updatedAccountInfo);
+      },
+      this.connection.commitment,
+      [
+        {
+          dataSize: 165,
+        },
+        {
+          memcmp: {
+            offset: 32,
+            bytes: config.walletPublicKey.toBase58(),
+          },
+        },
+      ],
+    );
+  }
+
+  public async stop() {
+    for (let i = this.subscriptions.length; i >= 0; --i) {
+      const subscription = this.subscriptions[i];
+      await this.connection.removeAccountChangeListener(subscription);
+      this.subscriptions.splice(i, 1);
+    }
+  }
+}
Index: Bot汉化/bot Solana Sniper Main/helpers/promises.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/helpers/promises.ts b/Bot汉化/bot Solana Sniper Main/helpers/promises.ts
new file mode 100644
--- /dev/null	(date 1727206491648)
+++ b/Bot汉化/bot Solana Sniper Main/helpers/promises.ts	(date 1727206491648)
@@ -0,0 +1,3 @@
+// 创建一个睡眠函数，返回一个 Promise
+export const sleep = (ms = 0) => new Promise((resolve) => setTimeout(resolve, ms));
+// 默认参数 ms 为 0，调用 setTimeout 在指定的毫秒数后解析 Promise
Index: Bot汉化/bot Solana Sniper Main/helpers/liquidity.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/helpers/liquidity.ts b/Bot汉化/bot Solana Sniper Main/helpers/liquidity.ts
new file mode 100644
--- /dev/null	(date 1727206429466)
+++ b/Bot汉化/bot Solana Sniper Main/helpers/liquidity.ts	(date 1727206429466)
@@ -0,0 +1,45 @@
+// 导入所需的模块和库
+import { PublicKey } from '@solana/web3.js'; // Solana 相关库
+import { Liquidity, LiquidityPoolKeys, LiquidityStateV4, MAINNET_PROGRAM_ID, Market } from '@raydium-io/raydium-sdk'; // Raydium SDK
+import { MinimalMarketLayoutV3 } from './market'; // 最小市场布局
+
+// 创建流动池密钥的函数
+export function createPoolKeys(
+  id: PublicKey, // 流动池 ID
+  accountData: LiquidityStateV4, // 流动池状态
+  minimalMarketLayoutV3: MinimalMarketLayoutV3, // 最小市场布局
+): LiquidityPoolKeys { // 返回流动池密钥
+  return {
+    id, // 流动池 ID
+    baseMint: accountData.baseMint, // 基础代币的 mint 地址
+    quoteMint: accountData.quoteMint, // 报价代币的 mint 地址
+    lpMint: accountData.lpMint, // 流动性代币的 mint 地址
+    baseDecimals: accountData.baseDecimal.toNumber(), // 基础代币的小数位数
+    quoteDecimals: accountData.quoteDecimal.toNumber(), // 报价代币的小数位数
+    lpDecimals: 5, // 流动性代币的小数位数
+    version: 4, // 版本号
+    programId: MAINNET_PROGRAM_ID.AmmV4, // 程序 ID
+    authority: Liquidity.getAssociatedAuthority({ // 获取关联的授权公钥
+      programId: MAINNET_PROGRAM_ID.AmmV4,
+    }).publicKey,
+    openOrders: accountData.openOrders, // 当前开放订单
+    targetOrders: accountData.targetOrders, // 目标订单
+    baseVault: accountData.baseVault, // 基础代币的库房地址
+    quoteVault: accountData.quoteVault, // 报价代币的库房地址
+    marketVersion: 3, // 市场版本号
+    marketProgramId: accountData.marketProgramId, // 市场程序 ID
+    marketId: accountData.marketId, // 市场 ID
+    marketAuthority: Market.getAssociatedAuthority({ // 获取市场的关联授权公钥
+      programId: accountData.marketProgramId,
+      marketId: accountData.marketId,
+    }).publicKey,
+    marketBaseVault: accountData.baseVault, // 市场基础代币的库房地址
+    marketQuoteVault: accountData.quoteVault, // 市场报价代币的库房地址
+    marketBids: minimalMarketLayoutV3.bids, // 市场买入订单
+    marketAsks: minimalMarketLayoutV3.asks, // 市场卖出订单
+    marketEventQueue: minimalMarketLayoutV3.eventQueue, // 市场事件队列
+    withdrawQueue: accountData.withdrawQueue, // 提款队列
+    lpVault: accountData.lpVault, // 流动性代币库房地址
+    lookupTableAccount: PublicKey.default, // 查找表账户
+  };
+}
Index: Bot原版/Bot Solana Sniper Main/helpers/token.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/helpers/token.ts b/Bot原版/Bot Solana Sniper Main/helpers/token.ts
new file mode 100644
--- /dev/null	(date 1732301213701)
+++ b/Bot原版/Bot Solana Sniper Main/helpers/token.ts	(date 1732301213701)
@@ -0,0 +1,23 @@
+import { Token } from '@raydium-io/raydium-sdk';
+import { TOKEN_PROGRAM_ID } from '@solana/spl-token';
+import { PublicKey } from '@solana/web3.js';
+
+export function getToken(token: string) {
+  switch (token) {
+    case 'WSOL': {
+      return Token.WSOL;
+    }
+    case 'USDC': {
+      return new Token(
+        TOKEN_PROGRAM_ID,
+        new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'),
+        6,
+        'USDC',
+        'USDC',
+      );
+    }
+    default: {
+      throw new Error(`Unsupported quote mint "${token}". Supported values are USDC and WSOL`);
+    }
+  }
+}
Index: Bot原版/Bot Solana Sniper Main/helpers/wallet.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/helpers/wallet.ts b/Bot原版/Bot Solana Sniper Main/helpers/wallet.ts
new file mode 100644
--- /dev/null	(date 1732301213720)
+++ b/Bot原版/Bot Solana Sniper Main/helpers/wallet.ts	(date 1732301213720)
@@ -0,0 +1,21 @@
+import { Keypair } from '@solana/web3.js';
+import bs58 from 'bs58';
+import { mnemonicToSeedSync } from 'bip39';
+import { derivePath } from 'ed25519-hd-key';
+
+export function getWallet(wallet: string): Keypair {
+  // most likely someone pasted the private key in binary format
+  if (wallet.startsWith('[')) {
+    return Keypair.fromSecretKey(JSON.parse(wallet));
+  }
+
+  // most likely someone pasted mnemonic
+  if (wallet.split(' ').length > 1) {
+    const seed = mnemonicToSeedSync(wallet, '');
+    const path = `m/44'/501'/0'/0'`; // we assume it's first path
+    return Keypair.fromSeed(derivePath(path, seed.toString('hex')).key);
+  }
+
+  // most likely someone pasted base58 encoded private key
+  return Keypair.fromSecretKey(bs58.decode(wallet));
+}
Index: Bot汉化/bot Solana Sniper Main/helpers/logger.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/helpers/logger.ts b/Bot汉化/bot Solana Sniper Main/helpers/logger.ts
new file mode 100644
--- /dev/null	(date 1727206446380)
+++ b/Bot汉化/bot Solana Sniper Main/helpers/logger.ts	(date 1727206446380)
@@ -0,0 +1,20 @@
+// 导入 pino 日志库
+import pino from 'pino';
+
+// 配置日志传输格式
+const transport = pino.transport({
+  target: 'pino-pretty', // 使用 pino-pretty 格式化日志输出
+});
+
+// 创建日志记录器
+export const logger = pino(
+  {
+    level: 'info', // 设置日志级别为 info
+    redact: ['poolKeys'], // 遮蔽 poolKeys 字段以保护敏感信息
+    serializers: {
+      error: pino.stdSerializers.err, // 使用标准错误序列化器
+    },
+    base: undefined, // 不输出基础字段
+  },
+  transport, // 使用配置的传输格式
+);
Index: Bot原版/Bot Solana Sniper Main/transactions/jito-rpc-transaction-executor.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/transactions/jito-rpc-transaction-executor.ts b/Bot原版/Bot Solana Sniper Main/transactions/jito-rpc-transaction-executor.ts
new file mode 100644
--- /dev/null	(date 1732301213814)
+++ b/Bot原版/Bot Solana Sniper Main/transactions/jito-rpc-transaction-executor.ts	(date 1732301213814)
@@ -0,0 +1,131 @@
+import {
+  BlockhashWithExpiryBlockHeight,
+  Keypair,
+  PublicKey,
+  SystemProgram,
+  Connection,
+  TransactionMessage,
+  VersionedTransaction,
+} from '@solana/web3.js';
+import { TransactionExecutor } from './transaction-executor.interface';
+import { logger } from '../helpers';
+import axios, { AxiosError } from 'axios';
+import bs58 from 'bs58';
+import { Currency, CurrencyAmount } from '@raydium-io/raydium-sdk';
+
+export class JitoTransactionExecutor implements TransactionExecutor {
+  // https://jito-labs.gitbook.io/mev/searcher-resources/json-rpc-api-reference/bundles/gettipaccounts
+  private jitpTipAccounts = [
+    'Cw8CFyM9FkoMi7K7Crf6HNQqf4uEMzpKw6QNghXLvLkY',
+    'DttWaMuVvTiduZRnguLF7jNxTgiMBZ1hyAumKUiL2KRL',
+    '96gYZGLnJYVFmbjzopPSU6QiEV5fGqZNyN9nmNhvrZU5',
+    '3AVi9Tg9Uo68tJfuvoKvqKNWKkC5wPdSSdeBnizKZ6jT',
+    'HFqU5x63VTqvQss8hp11i4wVV8bD44PvwucfZ2bU7gRe',
+    'ADaUMid9yfUytqMBgopwjb2DTLSokTSzL1zt6iGPaS49',
+    'ADuUkR4vqLUMWXxW9gh6D6L8pMSawimctcNZ5pGwDcEt',
+    'DfXygSm4jCyNCybVYYK6DwvWqjKee8pbDmJGcLWNDXjh',
+  ];
+
+  private JitoFeeWallet: PublicKey;
+
+  constructor(
+    private readonly jitoFee: string,
+    private readonly connection: Connection,
+  ) {
+    this.JitoFeeWallet = this.getRandomValidatorKey();
+  }
+
+  private getRandomValidatorKey(): PublicKey {
+    const randomValidator = this.jitpTipAccounts[Math.floor(Math.random() * this.jitpTipAccounts.length)];
+    return new PublicKey(randomValidator);
+  }
+
+  public async executeAndConfirm(
+    transaction: VersionedTransaction,
+    payer: Keypair,
+    latestBlockhash: BlockhashWithExpiryBlockHeight,
+  ): Promise<{ confirmed: boolean; signature?: string }> {
+    logger.debug('Starting Jito transaction execution...');
+    this.JitoFeeWallet = this.getRandomValidatorKey(); // Update wallet key each execution
+    logger.trace(`Selected Jito fee wallet: ${this.JitoFeeWallet.toBase58()}`);
+
+    try {
+      const fee = new CurrencyAmount(Currency.SOL, this.jitoFee, false).raw.toNumber();
+      logger.trace(`Calculated fee: ${fee} lamports`);
+
+      const jitTipTxFeeMessage = new TransactionMessage({
+        payerKey: payer.publicKey,
+        recentBlockhash: latestBlockhash.blockhash,
+        instructions: [
+          SystemProgram.transfer({
+            fromPubkey: payer.publicKey,
+            toPubkey: this.JitoFeeWallet,
+            lamports: fee,
+          }),
+        ],
+      }).compileToV0Message();
+
+      const jitoFeeTx = new VersionedTransaction(jitTipTxFeeMessage);
+      jitoFeeTx.sign([payer]);
+
+      const jitoTxsignature = bs58.encode(jitoFeeTx.signatures[0]);
+
+      // Serialize the transactions once here
+      const serializedjitoFeeTx = bs58.encode(jitoFeeTx.serialize());
+      const serializedTransaction = bs58.encode(transaction.serialize());
+      const serializedTransactions = [serializedjitoFeeTx, serializedTransaction];
+
+      // https://jito-labs.gitbook.io/mev/searcher-resources/json-rpc-api-reference/url
+      const endpoints = [
+        'https://mainnet.block-engine.jito.wtf/api/v1/bundles',
+        'https://amsterdam.mainnet.block-engine.jito.wtf/api/v1/bundles',
+        'https://frankfurt.mainnet.block-engine.jito.wtf/api/v1/bundles',
+        'https://ny.mainnet.block-engine.jito.wtf/api/v1/bundles',
+        'https://tokyo.mainnet.block-engine.jito.wtf/api/v1/bundles',
+      ];
+
+      const requests = endpoints.map((url) =>
+        axios.post(url, {
+          jsonrpc: '2.0',
+          id: 1,
+          method: 'sendBundle',
+          params: [serializedTransactions],
+        }),
+      );
+
+      logger.trace('Sending transactions to endpoints...');
+      const results = await Promise.all(requests.map((p) => p.catch((e) => e)));
+
+      const successfulResults = results.filter((result) => !(result instanceof Error));
+
+      if (successfulResults.length > 0) {
+        logger.trace(`At least one successful response`);
+        logger.debug(`Confirming jito transaction...`);
+        return await this.confirm(jitoTxsignature, latestBlockhash);
+      } else {
+        logger.debug(`No successful responses received for jito`);
+      }
+
+      return { confirmed: false };
+    } catch (error) {
+      if (error instanceof AxiosError) {
+        logger.trace({ error: error.response?.data }, 'Failed to execute jito transaction');
+      }
+      logger.error('Error during transaction execution', error);
+      return { confirmed: false };
+    }
+  }
+
+  private async confirm(signature: string, latestBlockhash: BlockhashWithExpiryBlockHeight) {
+    const confirmation = await this.connection.confirmTransaction(
+      {
+        signature,
+        lastValidBlockHeight: latestBlockhash.lastValidBlockHeight,
+        blockhash: latestBlockhash.blockhash,
+      },
+      this.connection.commitment,
+    );
+
+    return { confirmed: !confirmation.value.err, signature };
+  }
+}
Index: Bot汉化/bot Solana Sniper Main/listeners/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/listeners/index.ts b/Bot汉化/bot Solana Sniper Main/listeners/index.ts
new file mode 100644
--- /dev/null	(date 1727201869504)
+++ b/Bot汉化/bot Solana Sniper Main/listeners/index.ts	(date 1727201869504)
@@ -0,0 +1,1 @@
+export * from './listeners';
Index: Bot汉化/bot Solana Sniper Main/listeners/listeners.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/listeners/listeners.ts b/Bot汉化/bot Solana Sniper Main/listeners/listeners.ts
new file mode 100644
--- /dev/null	(date 1727206348075)
+++ b/Bot汉化/bot Solana Sniper Main/listeners/listeners.ts	(date 1727206348075)
@@ -0,0 +1,122 @@
+// 导入所需的模块和库
+import { LIQUIDITY_STATE_LAYOUT_V4, MAINNET_PROGRAM_ID, MARKET_STATE_LAYOUT_V3, Token } from '@raydium-io/raydium-sdk'; // Raydium SDK
+import bs58 from 'bs58'; // Base58 编码库
+import { Connection, PublicKey } from '@solana/web3.js'; // Solana 相关库
+import { TOKEN_PROGRAM_ID } from '@solana/spl-token'; // 代币程序 ID
+import { EventEmitter } from 'events'; // 事件发射器
+
+// 监听器类，扩展自 EventEmitter
+export class Listeners extends EventEmitter {
+  private subscriptions: number[] = []; // 存储订阅 ID
+
+  constructor(private readonly connection: Connection) {
+    super(); // 调用父类构造函数
+  }
+
+  // 启动监听器，接受配置参数
+  public async start(config: {
+    walletPublicKey: PublicKey; // 钱包公钥
+    quoteToken: Token; // 报价代币
+    autoSell: boolean; // 是否自动出售
+    cacheNewMarkets: boolean; // 是否缓存新市场
+  }) {
+    // 如果配置了缓存新市场，则订阅开放市场变化
+    if (config.cacheNewMarkets) {
+      const openBookSubscription = await this.subscribeToOpenBookMarkets(config);
+      this.subscriptions.push(openBookSubscription); // 存储订阅 ID
+    }
+
+    // 订阅 Raydium 池变化
+    const raydiumSubscription = await this.subscribeToRaydiumPools(config);
+    this.subscriptions.push(raydiumSubscription); // 存储订阅 ID
+
+    // 如果配置了自动出售，则订阅钱包变化
+    if (config.autoSell) {
+      const walletSubscription = await this.subscribeToWalletChanges(config);
+      this.subscriptions.push(walletSubscription); // 存储订阅 ID
+    }
+  }
+
+  // 订阅开放书市场的变化
+  private async subscribeToOpenBookMarkets(config: { quoteToken: Token }) {
+    return this.connection.onProgramAccountChange(
+      MAINNET_PROGRAM_ID.OPENBOOK_MARKET, // 订阅的程序 ID
+      async (updatedAccountInfo) => {
+        this.emit('market', updatedAccountInfo); // 触发市场更新事件
+      },
+      this.connection.commitment, // 提交级别
+      [
+        { dataSize: MARKET_STATE_LAYOUT_V3.span }, // 数据大小过滤
+        {
+          memcmp: { // 根据报价代币的 mint 过滤
+            offset: MARKET_STATE_LAYOUT_V3.offsetOf('quoteMint'),
+            bytes: config.quoteToken.mint.toBase58(),
+          },
+        },
+      ],
+    );
+  }
+
+  // 订阅 Raydium 池的变化
+  private async subscribeToRaydiumPools(config: { quoteToken: Token }) {
+    return this.connection.onProgramAccountChange(
+      MAINNET_PROGRAM_ID.AmmV4, // 订阅的程序 ID
+      async (updatedAccountInfo) => {
+        this.emit('pool', updatedAccountInfo); // 触发池更新事件
+      },
+      this.connection.commitment, // 提交级别
+      [
+        { dataSize: LIQUIDITY_STATE_LAYOUT_V4.span }, // 数据大小过滤
+        {
+          memcmp: { // 根据报价代币的 mint 过滤
+            offset: LIQUIDITY_STATE_LAYOUT_V4.offsetOf('quoteMint'),
+            bytes: config.quoteToken.mint.toBase58(),
+          },
+        },
+        {
+          memcmp: { // 根据市场程序 ID 过滤
+            offset: LIQUIDITY_STATE_LAYOUT_V4.offsetOf('marketProgramId'),
+            bytes: MAINNET_PROGRAM_ID.OPENBOOK_MARKET.toBase58(),
+          },
+        },
+        {
+          memcmp: { // 根据状态过滤
+            offset: LIQUIDITY_STATE_LAYOUT_V4.offsetOf('status'),
+            bytes: bs58.encode([6, 0, 0, 0, 0, 0, 0, 0]),
+          },
+        },
+      ],
+    );
+  }
+
+  // 订阅钱包变化
+  private async subscribeToWalletChanges(config: { walletPublicKey: PublicKey }) {
+    return this.connection.onProgramAccountChange(
+      TOKEN_PROGRAM_ID, // 订阅的程序 ID
+      async (updatedAccountInfo) => {
+        this.emit('wallet', updatedAccountInfo); // 触发钱包更新事件
+      },
+      this.connection.commitment, // 提交级别
+      [
+        {
+          dataSize: 165, // 数据大小过滤
+        },
+        {
+          memcmp: { // 根据钱包公钥过滤
+            offset: 32, // 偏移量
+            bytes: config.walletPublicKey.toBase58(),
+          },
+        },
+      ],
+    );
+  }
+
+  // 停止所有订阅
+  public async stop() {
+    for (let i = this.subscriptions.length; i >= 0; --i) {
+      const subscription = this.subscriptions[i];
+      await this.connection.removeAccountChangeListener(subscription); // 移除账户变化监听
+      this.subscriptions.splice(i, 1); // 从订阅列表中删除
+    }
+  }
+}
Index: Bot原版/Bot Solana Sniper Main/transactions/transaction-executor.interface.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/transactions/transaction-executor.interface.ts b/Bot原版/Bot Solana Sniper Main/transactions/transaction-executor.interface.ts
new file mode 100644
--- /dev/null	(date 1732301213831)
+++ b/Bot原版/Bot Solana Sniper Main/transactions/transaction-executor.interface.ts	(date 1732301213831)
@@ -0,0 +1,9 @@
+import { BlockhashWithExpiryBlockHeight, Keypair, VersionedTransaction } from '@solana/web3.js';
+
+export interface TransactionExecutor {
+  executeAndConfirm(
+    transaction: VersionedTransaction,
+    payer: Keypair,
+    latestBlockHash: BlockhashWithExpiryBlockHeight,
+  ): Promise<{ confirmed: boolean; signature?: string, error?: string }>;
+}
Index: Bot汉化/bot Solana Sniper Main/helpers/token.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/helpers/token.ts b/Bot汉化/bot Solana Sniper Main/helpers/token.ts
new file mode 100644
--- /dev/null	(date 1727206512704)
+++ b/Bot汉化/bot Solana Sniper Main/helpers/token.ts	(date 1727206512704)
@@ -0,0 +1,26 @@
+// 导入所需的模块和库
+import { Token } from '@raydium-io/raydium-sdk'; // Raydium SDK 的 Token 类
+import { TOKEN_PROGRAM_ID } from '@solana/spl-token'; // Solana 代币程序 ID
+import { PublicKey } from '@solana/web3.js'; // Solana 相关库
+
+// 获取代币的函数
+export function getToken(token: string) {
+  // 根据代币类型返回相应的 Token 对象
+  switch (token) {
+    case 'WSOL': { // 如果代币是 WSOL
+      return Token.WSOL; // 返回 WSOL 代币对象
+    }
+    case 'USDC': { // 如果代币是 USDC
+      return new Token(
+        TOKEN_PROGRAM_ID, // 代币程序 ID
+        new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'), // USDC 的公钥
+        6, // USDC 的小数位数
+        'USDC', // 代币符号
+        'USDC', // 代币名称
+      );
+    }
+    default: { // 处理不支持的代币类型
+      throw new Error(`不支持的报价代币 "${token}"。支持的值为 USDC 和 WSOL`); // 抛出错误
+    }
+  }
+}
Index: Bot原版/Bot Solana Sniper Main/transactions/default-transaction-executor.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/transactions/default-transaction-executor.ts b/Bot原版/Bot Solana Sniper Main/transactions/default-transaction-executor.ts
new file mode 100644
--- /dev/null	(date 1732301213781)
+++ b/Bot原版/Bot Solana Sniper Main/transactions/default-transaction-executor.ts	(date 1732301213781)
@@ -0,0 +1,44 @@
+import {
+  BlockhashWithExpiryBlockHeight,
+  Connection,
+  Keypair,
+  Transaction,
+  VersionedTransaction,
+} from '@solana/web3.js';
+import { TransactionExecutor } from './transaction-executor.interface';
+import { logger } from '../helpers';
+
+export class DefaultTransactionExecutor implements TransactionExecutor {
+  constructor(private readonly connection: Connection) {}
+
+  public async executeAndConfirm(
+    transaction: VersionedTransaction,
+    payer: Keypair,
+    latestBlockhash: BlockhashWithExpiryBlockHeight,
+  ): Promise<{ confirmed: boolean; signature?: string }> {
+    logger.debug('Executing transaction...');
+    const signature = await this.execute(transaction);
+
+    logger.debug({ signature }, 'Confirming transaction...');
+    return this.confirm(signature, latestBlockhash);
+  }
+
+  private async execute(transaction: Transaction | VersionedTransaction) {
+    return this.connection.sendRawTransaction(transaction.serialize(), {
+      preflightCommitment: this.connection.commitment,
+    });
+  }
+
+  private async confirm(signature: string, latestBlockhash: BlockhashWithExpiryBlockHeight) {
+    const confirmation = await this.connection.confirmTransaction(
+      {
+        signature,
+        lastValidBlockHeight: latestBlockhash.lastValidBlockHeight,
+        blockhash: latestBlockhash.blockhash,
+      },
+      this.connection.commitment,
+    );
+
+    return { confirmed: !confirmation.value.err, signature };
+  }
+}
Index: Bot汉化/bot Solana Sniper Main/helpers/wallet.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/helpers/wallet.ts b/Bot汉化/bot Solana Sniper Main/helpers/wallet.ts
new file mode 100644
--- /dev/null	(date 1727206534814)
+++ b/Bot汉化/bot Solana Sniper Main/helpers/wallet.ts	(date 1727206534814)
@@ -0,0 +1,23 @@
+// 导入所需的模块和库
+import { Keypair } from '@solana/web3.js'; // Solana 相关库
+import bs58 from 'bs58'; // Base58 编码库
+import { mnemonicToSeedSync } from 'bip39'; // 处理助记词的库
+import { derivePath } from 'ed25519-hd-key'; // HD 钱包路径推导库
+
+// 获取钱包的函数
+export function getWallet(wallet: string): Keypair {
+  // 如果钱包字符串以 "[" 开头，表示可能是二进制格式的私钥
+  if (wallet.startsWith('[')) {
+    return Keypair.fromSecretKey(JSON.parse(wallet)); // 解析并返回密钥对
+  }
+
+  // 如果钱包字符串包含空格，表示可能是助记词
+  if (wallet.split(' ').length > 1) {
+    const seed = mnemonicToSeedSync(wallet, ''); // 将助记词转换为种子
+    const path = `m/44'/501'/0'/0'`; // 假设使用第一个路径
+    return Keypair.fromSeed(derivePath(path, seed.toString('hex')).key); // 从种子生成密钥对
+  }
+
+  // 如果钱包字符串是 Base58 编码的私钥
+  return Keypair.fromSecretKey(bs58.decode(wallet)); // 解码并返回密钥对
+}
Index: Bot原版/Bot Solana Sniper Main/transactions/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/transactions/index.ts b/Bot原版/Bot Solana Sniper Main/transactions/index.ts
new file mode 100644
--- /dev/null	(date 1732301213791)
+++ b/Bot原版/Bot Solana Sniper Main/transactions/index.ts	(date 1732301213791)
@@ -0,0 +1,2 @@
+export * from './default-transaction-executor';
+export * from './transaction-executor.interface';
Index: Bot原版/Bot Solana Sniper Main/helpers/constants.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/helpers/constants.ts b/Bot原版/Bot Solana Sniper Main/helpers/constants.ts
new file mode 100644
--- /dev/null	(date 1732301213601)
+++ b/Bot原版/Bot Solana Sniper Main/helpers/constants.ts	(date 1732301213601)
@@ -0,0 +1,64 @@
+import { Logger } from 'pino';
+import dotenv from 'dotenv';
+import { Commitment } from '@solana/web3.js';
+import { logger } from './logger';
+
+dotenv.config();
+
+const retrieveEnvVariable = (variableName: string, logger: Logger) => {
+  const variable = process.env[variableName] || '';
+  if (!variable) {
+    logger.error(`${variableName} is not set`);
+    process.exit(1);
+  }
+  return variable;
+};
+
+// Wallet
+export const PRIVATE_KEY = retrieveEnvVariable('PRIVATE_KEY', logger);
+
+// Connection
+export const NETWORK = 'mainnet-beta';
+export const COMMITMENT_LEVEL: Commitment = retrieveEnvVariable('COMMITMENT_LEVEL', logger) as Commitment;
+export const RPC_ENDPOINT = retrieveEnvVariable('RPC_ENDPOINT', logger);
+export const RPC_WEBSOCKET_ENDPOINT = retrieveEnvVariable('RPC_WEBSOCKET_ENDPOINT', logger);
+
+// Bot
+export const LOG_LEVEL = retrieveEnvVariable('LOG_LEVEL', logger);
+export const ONE_TOKEN_AT_A_TIME = retrieveEnvVariable('ONE_TOKEN_AT_A_TIME', logger) === 'true';
+export const COMPUTE_UNIT_LIMIT = Number(retrieveEnvVariable('COMPUTE_UNIT_LIMIT', logger));
+export const COMPUTE_UNIT_PRICE = Number(retrieveEnvVariable('COMPUTE_UNIT_PRICE', logger));
+export const PRE_LOAD_EXISTING_MARKETS = retrieveEnvVariable('PRE_LOAD_EXISTING_MARKETS', logger) === 'true';
+export const CACHE_NEW_MARKETS = retrieveEnvVariable('CACHE_NEW_MARKETS', logger) === 'true';
+export const TRANSACTION_EXECUTOR = retrieveEnvVariable('TRANSACTION_EXECUTOR', logger);
+export const CUSTOM_FEE = retrieveEnvVariable('CUSTOM_FEE', logger);
+
+// Buy
+export const AUTO_BUY_DELAY = Number(retrieveEnvVariable('AUTO_BUY_DELAY', logger));
+export const QUOTE_MINT = retrieveEnvVariable('QUOTE_MINT', logger);
+export const QUOTE_AMOUNT = retrieveEnvVariable('QUOTE_AMOUNT', logger);
+export const MAX_BUY_RETRIES = Number(retrieveEnvVariable('MAX_BUY_RETRIES', logger));
+export const BUY_SLIPPAGE = Number(retrieveEnvVariable('BUY_SLIPPAGE', logger));
+
+// Sell
+export const AUTO_SELL = retrieveEnvVariable('AUTO_SELL', logger) === 'true';
+export const AUTO_SELL_DELAY = Number(retrieveEnvVariable('AUTO_SELL_DELAY', logger));
+export const MAX_SELL_RETRIES = Number(retrieveEnvVariable('MAX_SELL_RETRIES', logger));
+export const TAKE_PROFIT = Number(retrieveEnvVariable('TAKE_PROFIT', logger));
+export const STOP_LOSS = Number(retrieveEnvVariable('STOP_LOSS', logger));
+export const PRICE_CHECK_INTERVAL = Number(retrieveEnvVariable('PRICE_CHECK_INTERVAL', logger));
+export const PRICE_CHECK_DURATION = Number(retrieveEnvVariable('PRICE_CHECK_DURATION', logger));
+export const SELL_SLIPPAGE = Number(retrieveEnvVariable('SELL_SLIPPAGE', logger));
+
+// Filters
+export const FILTER_CHECK_INTERVAL = Number(retrieveEnvVariable('FILTER_CHECK_INTERVAL', logger));
+export const FILTER_CHECK_DURATION = Number(retrieveEnvVariable('FILTER_CHECK_DURATION', logger));
+export const CONSECUTIVE_FILTER_MATCHES = Number(retrieveEnvVariable('CONSECUTIVE_FILTER_MATCHES', logger));
+export const CHECK_IF_MUTABLE = retrieveEnvVariable('CHECK_IF_MUTABLE', logger) === 'true';
+export const CHECK_IF_MINT_IS_RENOUNCED = retrieveEnvVariable('CHECK_IF_MINT_IS_RENOUNCED', logger) === 'true';
+export const CHECK_IF_FREEZABLE = retrieveEnvVariable('CHECK_IF_FREEZABLE', logger) === 'true';
+export const CHECK_IF_BURNED = retrieveEnvVariable('CHECK_IF_BURNED', logger) === 'true';
+export const MIN_POOL_SIZE = retrieveEnvVariable('MIN_POOL_SIZE', logger);
+export const MAX_POOL_SIZE = retrieveEnvVariable('MAX_POOL_SIZE', logger);
+export const USE_SNIPE_LIST = retrieveEnvVariable('USE_SNIPE_LIST', logger) === 'true';
+export const SNIPE_LIST_REFRESH_INTERVAL = Number(retrieveEnvVariable('SNIPE_LIST_REFRESH_INTERVAL', logger));
Index: Bot汉化/bot Solana Sniper Main/filters/mutable.filter.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/filters/mutable.filter.ts b/Bot汉化/bot Solana Sniper Main/filters/mutable.filter.ts
new file mode 100644
--- /dev/null	(date 1727206582701)
+++ b/Bot汉化/bot Solana Sniper Main/filters/mutable.filter.ts	(date 1727206582701)
@@ -0,0 +1,43 @@
+// 导入所需的模块和库
+import { Filter, FilterResult } from './pool-filters'; // 过滤器接口和结果类型
+import { Connection, PublicKey } from '@solana/web3.js'; // Solana 相关库
+import { LiquidityPoolKeysV4 } from '@raydium-io/raydium-sdk'; // Raydium SDK 的流动性池密钥类型
+import { getPdaMetadataKey } from '@raydium-io/raydium-sdk'; // 获取 PDA 元数据键的函数
+import { getMetadataAccountDataSerializer, MetadataAccountData, MetadataAccountDataArgs } from '@metaplex-foundation/mpl-token-metadata'; // Metaplex 相关库
+import { Serializer } from '@metaplex-foundation/umi/serializers'; // Serializer 类型
+import { logger } from '../helpers'; // 自定义日志记录器
+
+// 创建 MutableFilter 类实现 Filter 接口
+export class MutableFilter implements Filter {
+  constructor(
+    private readonly connection: Connection, // Solana 连接
+    private readonly metadataSerializer: Serializer<MetadataAccountDataArgs, MetadataAccountData> // 元数据序列化器
+  ) {}
+
+  // 执行过滤器的方法
+  async execute(poolKeys: LiquidityPoolKeysV4): Promise<FilterResult> {
+    try {
+      // 获取与基础代币相关的元数据 PDA
+      const metadataPDA = getPdaMetadataKey(poolKeys.baseMint);
+      // 获取元数据账户信息
+      const metadataAccount = await this.connection.getAccountInfo(metadataPDA.publicKey);
+
+      // 检查账户数据是否存在
+      if (!metadataAccount?.data) {
+        return { ok: false, message: '可变性 -> 获取账户数据失败' }; // 返回错误信息
+      }
+
+      // 反序列化账户数据
+      const deserialize = this.metadataSerializer.deserialize(metadataAccount.data);
+      const mutable = deserialize[0].isMutable; // 检查元数据是否可变
+
+      // 返回结果
+      return { ok: !mutable, message: !mutable ? undefined : "可变性 -> 创建者可以更改元数据" };
+    } catch (e: any) {
+      // 记录错误日志
+      logger.error({ mint: poolKeys.baseMint }, `可变性 -> 检查元数据是否可变失败`);
+    }
+
+    return { ok: false, message: '可变性 -> 检查元数据是否可变失败' }; // 返回未通过的结果
+  }
+}
Index: Bot汉化/bot Solana Sniper Main/filters/pool-filters.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/filters/pool-filters.ts b/Bot汉化/bot Solana Sniper Main/filters/pool-filters.ts
new file mode 100644
--- /dev/null	(date 1727206610049)
+++ b/Bot汉化/bot Solana Sniper Main/filters/pool-filters.ts	(date 1727206610049)
@@ -0,0 +1,78 @@
+// 导入所需的模块和库
+import { Connection } from '@solana/web3.js'; // Solana 相关库
+import { LiquidityPoolKeysV4, Token, TokenAmount } from '@raydium-io/raydium-sdk'; // Raydium SDK
+import { getMetadataAccountDataSerializer } from '@metaplex-foundation/mpl-token-metadata'; // Metaplex 相关库
+import { BurnFilter } from './burn.filter'; // 引入销毁过滤器
+import { MutableFilter } from './mutable.filter'; // 引入可变性过滤器
+import { RenouncedFreezeFilter } from './renounced.filter'; // 引入放弃冻结过滤器
+import { PoolSizeFilter } from './pool-size.filter'; // 引入池大小过滤器
+import { CHECK_IF_BURNED, CHECK_IF_FREEZABLE, CHECK_IF_MINT_IS_RENOUNCED, CHECK_IF_MUTABLE, logger } from '../helpers'; // 引入辅助函数和常量
+
+// 过滤器接口
+export interface Filter {
+  execute(poolKeysV4: LiquidityPoolKeysV4): Promise<FilterResult>; // 执行过滤器的方法
+}
+
+// 过滤器结果接口
+export interface FilterResult {
+  ok: boolean; // 过滤器是否通过
+  message?: string; // 可选的消息
+}
+
+// 池过滤器参数接口
+export interface PoolFilterArgs {
+  minPoolSize: TokenAmount; // 最小池大小
+  maxPoolSize: TokenAmount; // 最大池大小
+  quoteToken: Token; // 报价代币
+}
+
+// 池过滤器类
+export class PoolFilters {
+  private readonly filters: Filter[] = []; // 存储过滤器数组
+
+  constructor(
+    readonly connection: Connection, // Solana 连接
+    readonly args: PoolFilterArgs, // 过滤器参数
+  ) {
+    // 根据配置条件添加相应的过滤器
+    if (CHECK_IF_BURNED) {
+      this.filters.push(new BurnFilter(connection)); // 添加销毁过滤器
+    }
+
+    if (CHECK_IF_MINT_IS_RENOUNCED || CHECK_IF_FREEZABLE) {
+      this.filters.push(new RenouncedFreezeFilter(connection, CHECK_IF_MINT_IS_RENOUNCED, CHECK_IF_FREEZABLE)); // 添加放弃冻结过滤器
+    }
+
+    if (CHECK_IF_MUTABLE) {
+      this.filters.push(new MutableFilter(connection, getMetadataAccountDataSerializer())); // 添加可变性过滤器
+    }
+
+    // 如果最小或最大池大小不为零，添加池大小过滤器
+    if (!args.minPoolSize.isZero() || !args.maxPoolSize.isZero()) {
+      this.filters.push(new PoolSizeFilter(connection, args.quoteToken, args.minPoolSize, args.maxPoolSize));
+    }
+  }
+
+  // 执行所有过滤器的方法
+  public async execute(poolKeys: LiquidityPoolKeysV4): Promise<boolean> {
+    // 如果没有过滤器，则通过
+    if (this.filters.length === 0) {
+      return true;
+    }
+
+    // 并行执行所有过滤器
+    const result = await Promise.all(this.filters.map((f) => f.execute(poolKeys)));
+    const pass = result.every((r) => r.ok); // 检查是否所有过滤器都通过
+
+    if (pass) {
+      return true; // 如果所有过滤器都通过，返回 true
+    }
+
+    // 记录未通过过滤器的消息
+    for (const filterResult of result.filter((r) => !r.ok)) {
+      logger.trace(filterResult.message);
+    }
+
+    return false; // 返回 false，表示未通过
+  }
+}
Index: Bot原版/Bot Solana Sniper Main/helpers/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/helpers/index.ts b/Bot原版/Bot Solana Sniper Main/helpers/index.ts
new file mode 100644
--- /dev/null	(date 1732301213621)
+++ b/Bot原版/Bot Solana Sniper Main/helpers/index.ts	(date 1732301213621)
@@ -0,0 +1,7 @@
+export * from './market';
+export * from './liquidity';
+export * from './logger';
+export * from './constants';
+export * from './token';
+export * from './wallet';
+export * from './promises'
Index: Bot汉化/bot Solana Sniper Main/filters/burn.filter.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/filters/burn.filter.ts b/Bot汉化/bot Solana Sniper Main/filters/burn.filter.ts
new file mode 100644
--- /dev/null	(date 1727206556947)
+++ b/Bot汉化/bot Solana Sniper Main/filters/burn.filter.ts	(date 1727206556947)
@@ -0,0 +1,30 @@
+// 导入所需的模块和库
+import { Filter, FilterResult } from './pool-filters'; // 过滤器接口和结果类型
+import { Connection } from '@solana/web3.js'; // Solana 相关库
+import { LiquidityPoolKeysV4 } from '@raydium-io/raydium-sdk'; // Raydium SDK 的流动性池密钥类型
+import { logger } from '../helpers'; // 自定义日志记录器
+
+// 创建 BurnFilter 类实现 Filter 接口
+export class BurnFilter implements Filter {
+  constructor(private readonly connection: Connection) {} // 构造函数，接受 Solana 连接
+
+  // 执行过滤器的方法
+  async execute(poolKeys: LiquidityPoolKeysV4): Promise<FilterResult> {
+    try {
+      // 获取流动性池的代币供应量
+      const amount = await this.connection.getTokenSupply(poolKeys.lpMint, this.connection.commitment);
+      const burned = amount.value.uiAmount === 0; // 判断 LP 是否已被销毁
+      return { ok: burned, message: burned ? undefined : "已销毁 -> 创建者未销毁 LP" }; // 返回结果
+    } catch (e: any) {
+      // 捕获错误，检查错误代码
+      if (e.code == -32602) {
+        return { ok: true }; // 如果是特定错误代码，返回 ok 为 true
+      }
+
+      // 记录错误日志
+      logger.error({ mint: poolKeys.baseMint }, `检查 LP 是否已销毁失败`);
+    }
+
+    return { ok: false, message: '检查 LP 是否已销毁失败' }; // 返回未通过的结果
+  }
+}
Index: Bot原版/Bot Solana Sniper Main/filters/pool-size.filter.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/filters/pool-size.filter.ts b/Bot原版/Bot Solana Sniper Main/filters/pool-size.filter.ts
new file mode 100644
--- /dev/null	(date 1732301213571)
+++ b/Bot原版/Bot Solana Sniper Main/filters/pool-size.filter.ts	(date 1732301213571)
@@ -0,0 +1,43 @@
+import { Filter, FilterResult } from './pool-filters';
+import { LiquidityPoolKeysV4, Token, TokenAmount } from '@raydium-io/raydium-sdk';
+import { Connection } from '@solana/web3.js';
+import { logger } from '../helpers';
+
+export class PoolSizeFilter implements Filter {
+  constructor(
+    private readonly connection: Connection,
+    private readonly quoteToken: Token,
+    private readonly minPoolSize: TokenAmount,
+    private readonly maxPoolSize: TokenAmount,
+  ) {}
+
+  async execute(poolKeys: LiquidityPoolKeysV4): Promise<FilterResult> {
+    try {
+      const response = await this.connection.getTokenAccountBalance(poolKeys.quoteVault, this.connection.commitment);
+      const poolSize = new TokenAmount(this.quoteToken, response.value.amount, true);
+      let inRange = true;
+
+      if (!this.maxPoolSize?.isZero()) {
+        inRange = poolSize.raw.lte(this.maxPoolSize.raw);
+
+        if (!inRange) {
+          return { ok: false, message: `PoolSize -> Pool size ${poolSize.toFixed()} > ${this.maxPoolSize.toFixed()}` };
+        }
+      }
+
+      if (!this.minPoolSize?.isZero()) {
+        inRange = poolSize.raw.gte(this.minPoolSize.raw);
+
+        if (!inRange) {
+          return { ok: false, message: `PoolSize -> Pool size ${poolSize.toFixed()} < ${this.minPoolSize.toFixed()}` };
+        }
+      }
+
+      return { ok: inRange };
+    } catch (error) {
+      logger.error({ mint: poolKeys.baseMint }, `Failed to check pool size`);
+    }
+
+    return { ok: false, message: 'PoolSize -> Failed to check pool size' };
+  }
+}
Index: Bot汉化/bot Solana Sniper Main/filters/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/filters/index.ts b/Bot汉化/bot Solana Sniper Main/filters/index.ts
new file mode 100644
--- /dev/null	(date 1727201869241)
+++ b/Bot汉化/bot Solana Sniper Main/filters/index.ts	(date 1727201869241)
@@ -0,0 +1,5 @@
+export * from './burn.filter';
+export * from './mutable.filter';
+export * from './pool-filters';
+export * from './pool-size.filter';
+export * from './renounced.filter';
Index: Bot原版/Bot Solana Sniper Main/filters/renounced.filter.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/filters/renounced.filter.ts b/Bot原版/Bot Solana Sniper Main/filters/renounced.filter.ts
new file mode 100644
--- /dev/null	(date 1732301213580)
+++ b/Bot原版/Bot Solana Sniper Main/filters/renounced.filter.ts	(date 1732301213580)
@@ -0,0 +1,32 @@
+import { Filter, FilterResult } from './pool-filters';
+import { MintLayout } from '@solana/spl-token';
+import { Connection } from '@solana/web3.js';
+import { LiquidityPoolKeysV4 } from '@raydium-io/raydium-sdk';
+import { logger } from '../helpers';
+
+export class RenouncedFreezeFilter implements Filter {
+  constructor(private readonly connection: Connection, private readonly checkRenounced: boolean, private readonly checkFreezable: boolean) {}
+
+  async execute(poolKeys: LiquidityPoolKeysV4): Promise<FilterResult> {
+    const errorMessage = [ this.checkRenounced ? 'mint' : undefined, this.checkFreezable ? 'freeze' : undefined ].filter((e) => e !== undefined);
+    try {
+      const accountInfo = await this.connection.getAccountInfo(poolKeys.baseMint, this.connection.commitment);
+      if (!accountInfo?.data) {
+        return { ok: false, message: 'RenouncedFreeze -> Failed to fetch account data' };
+      }
+
+      const deserialize = MintLayout.decode(accountInfo.data);
+      const renounced = !this.checkRenounced || deserialize.mintAuthorityOption === 0;
+      const freezable = !this.checkFreezable || deserialize.freezeAuthorityOption !== 0;
+
+      const message = [ renounced ? undefined : 'mint', !freezable ? undefined : 'freeze' ].filter((e) => e !== undefined);
+      const ok = renounced && !freezable;
+
+      return { ok: ok, message: ok ? undefined : `RenouncedFreeze -> Creator can ${message.join(' and ')} tokens` };
+    } catch (e) {
+      logger.error({ mint: poolKeys.baseMint }, `RenouncedFreeze -> Failed to check if creator can ${errorMessage.join(' and ')} tokens`);
+    }
+
+    return { ok: false, message: `RenouncedFreeze -> Failed to check if creator can ${errorMessage.join(' and ')} tokens` };
+  }
+}
Index: Bot汉化/bot Solana Sniper Main/helpers/constants.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/helpers/constants.ts b/Bot汉化/bot Solana Sniper Main/helpers/constants.ts
new file mode 100644
--- /dev/null	(date 1727206401016)
+++ b/Bot汉化/bot Solana Sniper Main/helpers/constants.ts	(date 1727206401016)
@@ -0,0 +1,67 @@
+// 导入所需的模块和库
+import { Logger } from 'pino'; // 日志记录库
+import dotenv from 'dotenv'; // 环境变量加载库
+import { Commitment } from '@solana/web3.js'; // Solana 相关库
+import { logger } from './logger'; // 自定义日志记录器
+
+// 加载环境变量
+dotenv.config();
+
+// 检索环境变量的函数
+const retrieveEnvVariable = (variableName: string, logger: Logger) => {
+  const variable = process.env[variableName] || ''; // 从环境变量中获取值
+  if (!variable) {
+    logger.error(`${variableName} 未设置`); // 记录错误日志
+    process.exit(1); // 退出程序
+  }
+  return variable; // 返回环境变量的值
+};
+
+// 钱包
+export const PRIVATE_KEY = retrieveEnvVariable('PRIVATE_KEY', logger); // 私钥
+
+// 连接配置
+export const NETWORK = 'mainnet-beta'; // 网络
+export const COMMITMENT_LEVEL: Commitment = retrieveEnvVariable('COMMITMENT_LEVEL', logger) as Commitment; // 提交级别
+export const RPC_ENDPOINT = retrieveEnvVariable('RPC_ENDPOINT', logger); // RPC 端点
+export const RPC_WEBSOCKET_ENDPOINT = retrieveEnvVariable('RPC_WEBSOCKET_ENDPOINT', logger); // RPC WebSocket 端点
+
+// 机器人配置
+export const LOG_LEVEL = retrieveEnvVariable('LOG_LEVEL', logger); // 日志级别
+export const ONE_TOKEN_AT_A_TIME = retrieveEnvVariable('ONE_TOKEN_AT_A_TIME', logger) === 'true'; // 一次处理一个代币
+export const COMPUTE_UNIT_LIMIT = Number(retrieveEnvVariable('COMPUTE_UNIT_LIMIT', logger)); // 计算单元限制
+export const COMPUTE_UNIT_PRICE = Number(retrieveEnvVariable('COMPUTE_UNIT_PRICE', logger)); // 计算单元价格
+export const PRE_LOAD_EXISTING_MARKETS = retrieveEnvVariable('PRE_LOAD_EXISTING_MARKETS', logger) === 'true'; // 预加载现有市场
+export const CACHE_NEW_MARKETS = retrieveEnvVariable('CACHE_NEW_MARKETS', logger) === 'true'; // 缓存新市场
+export const TRANSACTION_EXECUTOR = retrieveEnvVariable('TRANSACTION_EXECUTOR', logger); // 交易执行器类型
+export const CUSTOM_FEE = retrieveEnvVariable('CUSTOM_FEE', logger); // 自定义费用
+
+// 购买配置
+export const AUTO_BUY_DELAY = Number(retrieveEnvVariable('AUTO_BUY_DELAY', logger)); // 自动购买延迟
+export const QUOTE_MINT = retrieveEnvVariable('QUOTE_MINT', logger); // 报价代币的 mint
+export const QUOTE_AMOUNT = retrieveEnvVariable('QUOTE_AMOUNT', logger); // 报价金额
+export const MAX_BUY_RETRIES = Number(retrieveEnvVariable('MAX_BUY_RETRIES', logger)); // 最大购买重试次数
+export const BUY_SLIPPAGE = Number(retrieveEnvVariable('BUY_SLIPPAGE', logger)); // 购买滑点
+
+// 出售配置
+export const AUTO_SELL = retrieveEnvVariable('AUTO_SELL', logger) === 'true'; // 是否自动出售
+export const AUTO_SELL_DELAY = Number(retrieveEnvVariable('AUTO_SELL_DELAY', logger)); // 自动出售延迟
+export const MAX_SELL_RETRIES = Number(retrieveEnvVariable('MAX_SELL_RETRIES', logger)); // 最大出售重试次数
+export const TAKE_PROFIT = Number(retrieveEnvVariable('TAKE_PROFIT', logger)); // 止盈设置
+export const STOP_LOSS = Number(retrieveEnvVariable('STOP_LOSS', logger)); // 止损设置
+export const PRICE_CHECK_INTERVAL = Number(retrieveEnvVariable('PRICE_CHECK_INTERVAL', logger)); // 价格检查间隔
+export const PRICE_CHECK_DURATION = Number(retrieveEnvVariable('PRICE_CHECK_DURATION', logger)); // 价格检查持续时间
+export const SELL_SLIPPAGE = Number(retrieveEnvVariable('SELL_SLIPPAGE', logger)); // 出售滑点
+
+// 过滤器配置
+export const FILTER_CHECK_INTERVAL = Number(retrieveEnvVariable('FILTER_CHECK_INTERVAL', logger)); // 过滤器检查间隔
+export const FILTER_CHECK_DURATION = Number(retrieveEnvVariable('FILTER_CHECK_DURATION', logger)); // 过滤器检查持续时间
+export const CONSECUTIVE_FILTER_MATCHES = Number(retrieveEnvVariable('CONSECUTIVE_FILTER_MATCHES', logger)); // 连续过滤器匹配次数
+export const CHECK_IF_MUTABLE = retrieveEnvVariable('CHECK_IF_MUTABLE', logger) === 'true'; // 检查是否可变
+export const CHECK_IF_MINT_IS_RENOUNCED = retrieveEnvVariable('CHECK_IF_MINT_IS_RENOUNCED', logger) === 'true'; // 检查是否被放弃
+export const CHECK_IF_FREEZABLE = retrieveEnvVariable('CHECK_IF_FREEZABLE', logger) === 'true'; // 检查是否可冻结
+export const CHECK_IF_BURNED = retrieveEnvVariable('CHECK_IF_BURNED', logger) === 'true'; // 检查是否已销毁
+export const MIN_POOL_SIZE = retrieveEnvVariable('MIN_POOL_SIZE', logger); // 最小池大小
+export const MAX_POOL_SIZE = retrieveEnvVariable('MAX_POOL_SIZE', logger); // 最大池大小
+export const USE_SNIPE_LIST = retrieveEnvVariable('USE_SNIPE_LIST', logger) === 'true'; // 使用抢购列表
+export const SNIPE_LIST_REFRESH_INTERVAL = Number(retrieveEnvVariable('SNIPE_LIST_REFRESH_INTERVAL', logger)); // 抢购列表刷新间隔
Index: Bot原版/Bot Solana Sniper Main/helpers/market.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/helpers/market.ts b/Bot原版/Bot Solana Sniper Main/helpers/market.ts
new file mode 100644
--- /dev/null	(date 1732301213671)
+++ b/Bot原版/Bot Solana Sniper Main/helpers/market.ts	(date 1732301213671)
@@ -0,0 +1,22 @@
+import { Commitment, Connection, PublicKey } from '@solana/web3.js';
+import { GetStructureSchema, MARKET_STATE_LAYOUT_V3, publicKey, struct } from '@raydium-io/raydium-sdk';
+
+export const MINIMAL_MARKET_STATE_LAYOUT_V3 = struct([publicKey('eventQueue'), publicKey('bids'), publicKey('asks')]);
+export type MinimalMarketStateLayoutV3 = typeof MINIMAL_MARKET_STATE_LAYOUT_V3;
+export type MinimalMarketLayoutV3 = GetStructureSchema<MinimalMarketStateLayoutV3>;
+
+export async function getMinimalMarketV3(
+  connection: Connection,
+  marketId: PublicKey,
+  commitment?: Commitment,
+): Promise<MinimalMarketLayoutV3> {
+  const marketInfo = await connection.getAccountInfo(marketId, {
+    commitment,
+    dataSlice: {
+      offset: MARKET_STATE_LAYOUT_V3.offsetOf('eventQueue'),
+      length: 32 * 3,
+    },
+  });
+
+  return MINIMAL_MARKET_STATE_LAYOUT_V3.decode(marketInfo!.data);
+}
Index: Bot原版/Bot Solana Sniper Main/helpers/promises.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/helpers/promises.ts b/Bot原版/Bot Solana Sniper Main/helpers/promises.ts
new file mode 100644
--- /dev/null	(date 1732301213691)
+++ b/Bot原版/Bot Solana Sniper Main/helpers/promises.ts	(date 1732301213691)
@@ -0,0 +1,1 @@
+export const sleep = (ms = 0) => new Promise((resolve) => setTimeout(resolve, ms));
Index: Bot汉化/bot Solana Sniper Main/helpers/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/helpers/index.ts b/Bot汉化/bot Solana Sniper Main/helpers/index.ts
new file mode 100644
--- /dev/null	(date 1727201869357)
+++ b/Bot汉化/bot Solana Sniper Main/helpers/index.ts	(date 1727201869357)
@@ -0,0 +1,7 @@
+export * from './market';
+export * from './liquidity';
+export * from './logger';
+export * from './constants';
+export * from './token';
+export * from './wallet';
+export * from './promises'
Index: Bot汉化/bot Solana Sniper Main/filters/pool-size.filter.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/filters/pool-size.filter.ts b/Bot汉化/bot Solana Sniper Main/filters/pool-size.filter.ts
new file mode 100644
--- /dev/null	(date 1727206636194)
+++ b/Bot汉化/bot Solana Sniper Main/filters/pool-size.filter.ts	(date 1727206636194)
@@ -0,0 +1,50 @@
+// 导入所需的模块和库
+import { Filter, FilterResult } from './pool-filters'; // 过滤器接口和结果类型
+import { LiquidityPoolKeysV4, Token, TokenAmount } from '@raydium-io/raydium-sdk'; // Raydium SDK
+import { Connection } from '@solana/web3.js'; // Solana 相关库
+import { logger } from '../helpers'; // 自定义日志记录器
+
+// 创建 PoolSizeFilter 类实现 Filter 接口
+export class PoolSizeFilter implements Filter {
+  constructor(
+    private readonly connection: Connection, // Solana 连接
+    private readonly quoteToken: Token, // 报价代币
+    private readonly minPoolSize: TokenAmount, // 最小池大小
+    private readonly maxPoolSize: TokenAmount, // 最大池大小
+  ) {}
+
+  // 执行过滤器的方法
+  async execute(poolKeys: LiquidityPoolKeysV4): Promise<FilterResult> {
+    try {
+      // 获取报价库的账户余额
+      const response = await this.connection.getTokenAccountBalance(poolKeys.quoteVault, this.connection.commitment);
+      const poolSize = new TokenAmount(this.quoteToken, response.value.amount, true); // 创建池大小的 TokenAmount 实例
+      let inRange = true; // 默认池大小在范围内
+
+      // 检查最大池大小
+      if (!this.maxPoolSize?.isZero()) {
+        inRange = poolSize.raw.lte(this.maxPoolSize.raw); // 检查当前池大小是否小于等于最大池大小
+
+        if (!inRange) {
+          return { ok: false, message: `池大小 -> 池大小 ${poolSize.toFixed()} > ${this.maxPoolSize.toFixed()}` }; // 返回未通过的结果
+        }
+      }
+
+      // 检查最小池大小
+      if (!this.minPoolSize?.isZero()) {
+        inRange = poolSize.raw.gte(this.minPoolSize.raw); // 检查当前池大小是否大于等于最小池大小
+
+        if (!inRange) {
+          return { ok: false, message: `池大小 -> 池大小 ${poolSize.toFixed()} < ${this.minPoolSize.toFixed()}` }; // 返回未通过的结果
+        }
+      }
+
+      return { ok: inRange }; // 返回检查结果
+    } catch (error) {
+      // 记录错误日志
+      logger.error({ mint: poolKeys.baseMint }, `检查池大小失败`);
+    }
+
+    return { ok: false, message: '池大小 -> 检查池大小失败' }; // 返回未通过的结果
+  }
+}
Index: Bot原版/Bot Solana Sniper Main/helpers/liquidity.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/helpers/liquidity.ts b/Bot原版/Bot Solana Sniper Main/helpers/liquidity.ts
new file mode 100644
--- /dev/null	(date 1732301213641)
+++ b/Bot原版/Bot Solana Sniper Main/helpers/liquidity.ts	(date 1732301213641)
@@ -0,0 +1,43 @@
+import { PublicKey } from '@solana/web3.js';
+import { Liquidity, LiquidityPoolKeys, LiquidityStateV4, MAINNET_PROGRAM_ID, Market } from '@raydium-io/raydium-sdk';
+import { MinimalMarketLayoutV3 } from './market';
+
+export function createPoolKeys(
+  id: PublicKey,
+  accountData: LiquidityStateV4,
+  minimalMarketLayoutV3: MinimalMarketLayoutV3,
+): LiquidityPoolKeys {
+  return {
+    id,
+    baseMint: accountData.baseMint,
+    quoteMint: accountData.quoteMint,
+    lpMint: accountData.lpMint,
+    baseDecimals: accountData.baseDecimal.toNumber(),
+    quoteDecimals: accountData.quoteDecimal.toNumber(),
+    lpDecimals: 5,
+    version: 4,
+    programId: MAINNET_PROGRAM_ID.AmmV4,
+    authority: Liquidity.getAssociatedAuthority({
+      programId: MAINNET_PROGRAM_ID.AmmV4,
+    }).publicKey,
+    openOrders: accountData.openOrders,
+    targetOrders: accountData.targetOrders,
+    baseVault: accountData.baseVault,
+    quoteVault: accountData.quoteVault,
+    marketVersion: 3,
+    marketProgramId: accountData.marketProgramId,
+    marketId: accountData.marketId,
+    marketAuthority: Market.getAssociatedAuthority({
+      programId: accountData.marketProgramId,
+      marketId: accountData.marketId,
+    }).publicKey,
+    marketBaseVault: accountData.baseVault,
+    marketQuoteVault: accountData.quoteVault,
+    marketBids: minimalMarketLayoutV3.bids,
+    marketAsks: minimalMarketLayoutV3.asks,
+    marketEventQueue: minimalMarketLayoutV3.eventQueue,
+    withdrawQueue: accountData.withdrawQueue,
+    lpVault: accountData.lpVault,
+    lookupTableAccount: PublicKey.default,
+  };
+}
Index: Bot原版/Bot Solana Sniper Main/helpers/logger.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/helpers/logger.ts b/Bot原版/Bot Solana Sniper Main/helpers/logger.ts
new file mode 100644
--- /dev/null	(date 1732301213651)
+++ b/Bot原版/Bot Solana Sniper Main/helpers/logger.ts	(date 1732301213651)
@@ -0,0 +1,17 @@
+import pino from 'pino';
+
+const transport = pino.transport({
+  target: 'pino-pretty',
+});
+
+export const logger = pino(
+  {
+    level: 'info',
+    redact: ['poolKeys'],
+    serializers: {
+      error: pino.stdSerializers.err,
+    },
+    base: undefined,
+  },
+  transport,
+);
Index: Bot汉化/bot Solana Sniper Main/filters/renounced.filter.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/filters/renounced.filter.ts b/Bot汉化/bot Solana Sniper Main/filters/renounced.filter.ts
new file mode 100644
--- /dev/null	(date 1727206661656)
+++ b/Bot汉化/bot Solana Sniper Main/filters/renounced.filter.ts	(date 1727206661656)
@@ -0,0 +1,45 @@
+// 导入所需的模块和库
+import { Filter, FilterResult } from './pool-filters'; // 过滤器接口和结果类型
+import { MintLayout } from '@solana/spl-token'; // 代币布局
+import { Connection } from '@solana/web3.js'; // Solana 相关库
+import { LiquidityPoolKeysV4 } from '@raydium-io/raydium-sdk'; // Raydium SDK 的流动性池密钥类型
+import { logger } from '../helpers'; // 自定义日志记录器
+
+// 创建 RenouncedFreezeFilter 类实现 Filter 接口
+export class RenouncedFreezeFilter implements Filter {
+  constructor(
+    private readonly connection: Connection, // Solana 连接
+    private readonly checkRenounced: boolean, // 是否检查是否放弃
+    private readonly checkFreezable: boolean // 是否检查是否可冻结
+  ) {}
+
+  // 执行过滤器的方法
+  async execute(poolKeys: LiquidityPoolKeysV4): Promise<FilterResult> {
+    // 构建错误消息
+    const errorMessage = [this.checkRenounced ? 'mint' : undefined, this.checkFreezable ? 'freeze' : undefined].filter((e) => e !== undefined);
+
+    try {
+      // 获取基础代币的账户信息
+      const accountInfo = await this.connection.getAccountInfo(poolKeys.baseMint, this.connection.commitment);
+      if (!accountInfo?.data) {
+        return { ok: false, message: '放弃冻结 -> 获取账户数据失败' }; // 返回错误信息
+      }
+
+      // 解码代币账户信息
+      const deserialize = MintLayout.decode(accountInfo.data);
+      const renounced = !this.checkRenounced || deserialize.mintAuthorityOption === 0; // 检查是否放弃
+      const freezable = !this.checkFreezable || deserialize.freezeAuthorityOption !== 0; // 检查是否可冻结
+
+      // 构建返回消息
+      const message = [renounced ? undefined : 'mint', !freezable ? undefined : 'freeze'].filter((e) => e !== undefined);
+      const ok = renounced && !freezable; // 检查是否满足条件
+
+      return { ok: ok, message: ok ? undefined : `放弃冻结 -> 创建者可以 ${message.join(' 和 ')} 代币` }; // 返回结果
+    } catch (e) {
+      // 记录错误日志
+      logger.error({ mint: poolKeys.baseMint }, `放弃冻结 -> 检查创建者是否可以 ${errorMessage.join(' 和 ')} 代币失败`);
+    }
+
+    return { ok: false, message: `放弃冻结 -> 检查创建者是否可以 ${errorMessage.join(' 和 ')} 代币失败` }; // 返回未通过的结果
+  }
+}
Index: Bot汉化/bot Solana Sniper Main/transactions/jito-rpc-transaction-executor.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/transactions/jito-rpc-transaction-executor.ts b/Bot汉化/bot Solana Sniper Main/transactions/jito-rpc-transaction-executor.ts
new file mode 100644
--- /dev/null	(date 1727206255774)
+++ b/Bot汉化/bot Solana Sniper Main/transactions/jito-rpc-transaction-executor.ts	(date 1727206255774)
@@ -0,0 +1,138 @@
+// 导入所需的模块和库
+import {
+  BlockhashWithExpiryBlockHeight,
+  Keypair,
+  PublicKey,
+  SystemProgram,
+  Connection,
+  TransactionMessage,
+  VersionedTransaction,
+} from '@solana/web3.js'; // Solana 相关库
+import { TransactionExecutor } from './transaction-executor.interface'; // 交易执行器接口
+import { logger } from '../helpers'; // 日志记录器
+import axios, { AxiosError } from 'axios'; // Axios 库用于 HTTP 请求
+import bs58 from 'bs58'; // Base58 编码库
+import { Currency, CurrencyAmount } from '@raydium-io/raydium-sdk'; // Raydium SDK
+
+// Jito 交易执行器类
+export class JitoTransactionExecutor implements TransactionExecutor {
+  // Jito 提示账户列表
+  private jitpTipAccounts = [
+    'Cw8CFyM9FkoMi7K7Crf6HNQqf4uEMzpKw6QNghXLvLkY',
+    'DttWaMuVvTiduZRnguLF7jNxTgiMBZ1hyAumKUiL2KRL',
+    '96gYZGLnJYVFmbjzopPSU6QiEV5fGqZNyN9nmNhvrZU5',
+    '3AVi9Tg9Uo68tJfuvoKvqKNWKkC5wPdSSdeBnizKZ6jT',
+    'HFqU5x63VTqvQss8hp11i4wVV8bD44PvwucfZ2bU7gRe',
+    'ADaUMid9yfUytqMBgopwjb2DTLSokTSzL1zt6iGPaS49',
+    'ADuUkR4vqLUMWXxW9gh6D6L8pMSawimctcNZ5pGwDcEt',
+    'DfXygSm4jCyNCybVYYK6DwvWqjKee8pbDmJGcLWNDXjh',
+  ];
+
+  private JitoFeeWallet: PublicKey; // Jito 费用钱包
+
+  constructor(
+    private readonly jitoFee: string, // Jito 费用
+    private readonly connection: Connection, // Solana 连接
+  ) {
+    this.JitoFeeWallet = this.getRandomValidatorKey(); // 获取随机验证者密钥
+  }
+
+  // 获取随机验证者密钥
+  private getRandomValidatorKey(): PublicKey {
+    const randomValidator = this.jitpTipAccounts[Math.floor(Math.random() * this.jitpTipAccounts.length)];
+    return new PublicKey(randomValidator); // 返回随机选择的验证者密钥
+  }
+
+  // 执行并确认交易的公共方法
+  public async executeAndConfirm(
+    transaction: VersionedTransaction, // 版本化交易
+    payer: Keypair, // 付款方的密钥对
+    latestBlockhash: BlockhashWithExpiryBlockHeight, // 最新区块哈希和过期区块高度
+  ): Promise<{ confirmed: boolean; signature?: string }> {
+    logger.debug('开始 Jito 交易执行...'); // 记录交易执行开始日志
+    this.JitoFeeWallet = this.getRandomValidatorKey(); // 每次执行时更新钱包密钥
+    logger.trace(`选择的 Jito 费用钱包: ${this.JitoFeeWallet.toBase58()}`); // 记录选中的费用钱包
+
+    try {
+      const fee = new CurrencyAmount(Currency.SOL, this.jitoFee, false).raw.toNumber(); // 计算费用
+      logger.trace(`计算的费用: ${fee} lamports`); // 记录计算的费用
+
+      // 创建 Jito 提示交易消息
+      const jitTipTxFeeMessage = new TransactionMessage({
+        payerKey: payer.publicKey, // 付款方公钥
+        recentBlockhash: latestBlockhash.blockhash, // 最新区块哈希
+        instructions: [
+          SystemProgram.transfer({ // 转账指令
+            fromPubkey: payer.publicKey, // 付款方公钥
+            toPubkey: this.JitoFeeWallet, // 收款方公钥
+            lamports: fee, // 转账的 lamports 数量
+          }),
+        ],
+      }).compileToV0Message(); // 编译为 V0 消息
+
+      const jitoFeeTx = new VersionedTransaction(jitTipTxFeeMessage); // 创建版本化交易
+      jitoFeeTx.sign([payer]); // 签名交易
+
+      const jitoTxsignature = bs58.encode(jitoFeeTx.signatures[0]); // 获取签名并进行 Base58 编码
+
+      // 一次性序列化交易
+      const serializedjitoFeeTx = bs58.encode(jitoFeeTx.serialize()); // 序列化 Jito 费用交易
+      const serializedTransaction = bs58.encode(transaction.serialize()); // 序列化主交易
+      const serializedTransactions = [serializedjitoFeeTx, serializedTransaction]; // 组合交易
+
+      // Jito API 端点列表
+      const endpoints = [
+        'https://mainnet.block-engine.jito.wtf/api/v1/bundles',
+        'https://amsterdam.mainnet.block-engine.jito.wtf/api/v1/bundles',
+        'https://frankfurt.mainnet.block-engine.jito.wtf/api/v1/bundles',
+        'https://ny.mainnet.block-engine.jito.wtf/api/v1/bundles',
+        'https://tokyo.mainnet.block-engine.jito.wtf/api/v1/bundles',
+      ];
+
+      // 发送请求到所有端点
+      const requests = endpoints.map((url) =>
+        axios.post(url, {
+          jsonrpc: '2.0',
+          id: 1,
+          method: 'sendBundle',
+          params: [serializedTransactions], // 发送序列化的交易
+        }),
+      );
+
+      logger.trace('正在向端点发送交易...'); // 记录发送交易日志
+      const results = await Promise.all(requests.map((p) => p.catch((e) => e))); // 等待所有请求结果
+
+      const successfulResults = results.filter((result) => !(result instanceof Error)); // 筛选成功的结果
+
+      if (successfulResults.length > 0) { // 如果至少有一个成功的响应
+        logger.trace(`至少有一个成功的响应`); // 记录成功响应日志
+        logger.debug(`确认 Jito 交易...`); // 记录确认交易日志
+        return await this.confirm(jitoTxsignature, latestBlockhash); // 确认交易
+      } else {
+        logger.debug(`没有收到 Jito 的成功响应`); // 记录无成功响应日志
+      }
+
+      return { confirmed: false }; // 返回未确认
+    } catch (error) {
+      if (error instanceof AxiosError) {
+        logger.trace({ error: error.response?.data }, '执行 Jito 交易失败'); // 记录错误信息
+      }
+      logger.error('交易执行期间出错', error); // 记录错误日志
+      return { confirmed: false }; // 返回未确认
+    }
+  }
+
+  // 私有方法：确认交易
+  private async confirm(signature: string, latestBlockhash: BlockhashWithExpiryBlockHeight) {
+    const confirmation = await this.connection.confirmTransaction(
+      {
+        signature, // 交易签名
+        lastValidBlockHeight: latestBlockhash.lastValidBlockHeight, // 最后有效区块高度
+        blockhash: latestBlockhash.blockhash, // 区块哈希
+      },
+      this.connection.commitment, // 提交的确认级别
+    );
+
+    return { confirmed: !confirmation.value.err, signature }; // 返回确认结果
+  }
+}
Index: Bot汉化/bot Solana Sniper Main/transactions/transaction-executor.interface.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/transactions/transaction-executor.interface.ts b/Bot汉化/bot Solana Sniper Main/transactions/transaction-executor.interface.ts
new file mode 100644
--- /dev/null	(date 1727206368300)
+++ b/Bot汉化/bot Solana Sniper Main/transactions/transaction-executor.interface.ts	(date 1727206368300)
@@ -0,0 +1,12 @@
+// 导入所需的模块和库
+import { BlockhashWithExpiryBlockHeight, Keypair, VersionedTransaction } from '@solana/web3.js'; // Solana 相关库
+
+// 交易执行器接口
+export interface TransactionExecutor {
+  // 执行并确认交易的方法
+  executeAndConfirm(
+    transaction: VersionedTransaction, // 版本化交易
+    payer: Keypair, // 付款方的密钥对
+    latestBlockHash: BlockhashWithExpiryBlockHeight, // 最新区块哈希和过期区块高度
+  ): Promise<{ confirmed: boolean; signature?: string; error?: string }>; // 返回确认结果、交易签名和可能的错误信息
+}
Index: Bot原版/Bot Solana Sniper Main/transactions/warp-transaction-executor.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot原版/Bot Solana Sniper Main/transactions/warp-transaction-executor.ts b/Bot原版/Bot Solana Sniper Main/transactions/warp-transaction-executor.ts
new file mode 100644
--- /dev/null	(date 1732301213850)
+++ b/Bot原版/Bot Solana Sniper Main/transactions/warp-transaction-executor.ts	(date 1732301213850)
@@ -0,0 +1,64 @@
+import {
+  BlockhashWithExpiryBlockHeight,
+  Keypair,
+  PublicKey,
+  SystemProgram,
+  TransactionMessage,
+  VersionedTransaction,
+} from '@solana/web3.js';
+import { TransactionExecutor } from './transaction-executor.interface';
+import { logger } from '../helpers';
+import axios, { AxiosError } from 'axios';
+import bs58 from 'bs58';
+import { Currency, CurrencyAmount } from '@raydium-io/raydium-sdk';
+
+export class WarpTransactionExecutor implements TransactionExecutor {
+  private readonly warpFeeWallet = new PublicKey('AXSBTx227eh6ZtEu5kHrKCWviW6R1JJV7oDJ63tX9GiH');
+
+  constructor(private readonly warpFee: string) {}
+
+  public async executeAndConfirm(
+    transaction: VersionedTransaction,
+    payer: Keypair,
+    latestBlockhash: BlockhashWithExpiryBlockHeight,
+  ): Promise<{ confirmed: boolean; signature?: string }> {
+    logger.debug('Executing transaction...');
+
+    try {
+      const fee = new CurrencyAmount(Currency.SOL, this.warpFee, false).raw.toNumber();
+      const warpFeeMessage = new TransactionMessage({
+        payerKey: payer.publicKey,
+        recentBlockhash: latestBlockhash.blockhash,
+        instructions: [
+          SystemProgram.transfer({
+            fromPubkey: payer.publicKey,
+            toPubkey: this.warpFeeWallet,
+            lamports: fee,
+          }),
+        ],
+      }).compileToV0Message();
+
+      const warpFeeTx = new VersionedTransaction(warpFeeMessage);
+      warpFeeTx.sign([payer]);
+
+      const response = await axios.post<{ confirmed: boolean; signature: string, error?: string }>(
+        'https://tx.warp.id/transaction/execute',
+        {
+          transactions: [bs58.encode(warpFeeTx.serialize()), bs58.encode(transaction.serialize())],
+          latestBlockhash,
+        },
+        {
+          timeout: 100000,
+        },
+      );
+
+      return response.data;
+    } catch (error) {
+      if (error instanceof AxiosError) {
+        logger.trace({ error: error.response?.data }, 'Failed to execute warp transaction');
+      }
+    }
+
+    return { confirmed: false };
+  }
+}
Index: Bot汉化/bot Solana Sniper Main/transactions/default-transaction-executor.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/transactions/default-transaction-executor.ts b/Bot汉化/bot Solana Sniper Main/transactions/default-transaction-executor.ts
new file mode 100644
--- /dev/null	(date 1727206211098)
+++ b/Bot汉化/bot Solana Sniper Main/transactions/default-transaction-executor.ts	(date 1727206211098)
@@ -0,0 +1,49 @@
+// 导入所需的模块和库
+import {
+  BlockhashWithExpiryBlockHeight,
+  Connection,
+  Keypair,
+  Transaction,
+  VersionedTransaction,
+} from '@solana/web3.js'; // Solana 相关库
+import { TransactionExecutor } from './transaction-executor.interface'; // 交易执行器接口
+import { logger } from '../helpers'; // 日志记录器
+
+// 默认交易执行器类
+export class DefaultTransactionExecutor implements TransactionExecutor {
+  constructor(private readonly connection: Connection) {} // 初始化连接
+
+  // 执行并确认交易的公共方法
+  public async executeAndConfirm(
+    transaction: VersionedTransaction, // 版本化交易
+    payer: Keypair, // 付款方的密钥对
+    latestBlockhash: BlockhashWithExpiryBlockHeight, // 最新区块哈希和过期区块高度
+  ): Promise<{ confirmed: boolean; signature?: string }> {
+    logger.debug('正在执行交易...'); // 记录交易执行日志
+    const signature = await this.execute(transaction); // 执行交易并获取签名
+
+    logger.debug({ signature }, '正在确认交易...'); // 记录确认交易日志
+    return this.confirm(signature, latestBlockhash); // 确认交易并返回结果
+  }
+
+  // 私有方法：执行交易
+  private async execute(transaction: Transaction | VersionedTransaction) {
+    return this.connection.sendRawTransaction(transaction.serialize(), { // 发送序列化的交易
+      preflightCommitment: this.connection.commitment, // 提交前的确认级别
+    });
+  }
+
+  // 私有方法：确认交易
+  private async confirm(signature: string, latestBlockhash: BlockhashWithExpiryBlockHeight) {
+    const confirmation = await this.connection.confirmTransaction(
+      {
+        signature, // 交易签名
+        lastValidBlockHeight: latestBlockhash.lastValidBlockHeight, // 最后有效区块高度
+        blockhash: latestBlockhash.blockhash, // 区块哈希
+      },
+      this.connection.commitment, // 提交的确认级别
+    );
+
+    return { confirmed: !confirmation.value.err, signature }; // 返回确认结果
+  }
+}
Index: Bot汉化/bot Solana Sniper Main/transactions/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/transactions/index.ts b/Bot汉化/bot Solana Sniper Main/transactions/index.ts
new file mode 100644
--- /dev/null	(date 1727201869564)
+++ b/Bot汉化/bot Solana Sniper Main/transactions/index.ts	(date 1727201869564)
@@ -0,0 +1,2 @@
+export * from './default-transaction-executor';
+export * from './transaction-executor.interface';
Index: Bot汉化/bot Solana Sniper Main/transactions/warp-transaction-executor.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Bot汉化/bot Solana Sniper Main/transactions/warp-transaction-executor.ts b/Bot汉化/bot Solana Sniper Main/transactions/warp-transaction-executor.ts
new file mode 100644
--- /dev/null	(date 1727206292186)
+++ b/Bot汉化/bot Solana Sniper Main/transactions/warp-transaction-executor.ts	(date 1727206292186)
@@ -0,0 +1,70 @@
+// 导入所需的模块和库
+import {
+  BlockhashWithExpiryBlockHeight,
+  Keypair,
+  PublicKey,
+  SystemProgram,
+  TransactionMessage,
+  VersionedTransaction,
+} from '@solana/web3.js'; // Solana 相关库
+import { TransactionExecutor } from './transaction-executor.interface'; // 交易执行器接口
+import { logger } from '../helpers'; // 日志记录器
+import axios, { AxiosError } from 'axios'; // Axios 库用于 HTTP 请求
+import bs58 from 'bs58'; // Base58 编码库
+import { Currency, CurrencyAmount } from '@raydium-io/raydium-sdk'; // Raydium SDK
+
+// Warp 交易执行器类
+export class WarpTransactionExecutor implements TransactionExecutor {
+  private readonly warpFeeWallet = new PublicKey('AXSBTx227eh6ZtEu5kHrKCWviW6R1JJV7oDJ63tX9GiH'); // Warp 费用钱包地址
+
+  constructor(private readonly warpFee: string) {} // 初始化 Warp 费用
+
+  // 执行并确认交易的公共方法
+  public async executeAndConfirm(
+    transaction: VersionedTransaction, // 版本化交易
+    payer: Keypair, // 付款方的密钥对
+    latestBlockhash: BlockhashWithExpiryBlockHeight, // 最新区块哈希和过期区块高度
+  ): Promise<{ confirmed: boolean; signature?: string }> {
+    logger.debug('正在执行交易...'); // 记录执行交易日志
+
+    try {
+      // 计算费用
+      const fee = new CurrencyAmount(Currency.SOL, this.warpFee, false).raw.toNumber();
+      // 创建 Warp 费用交易消息
+      const warpFeeMessage = new TransactionMessage({
+        payerKey: payer.publicKey, // 付款方公钥
+        recentBlockhash: latestBlockhash.blockhash, // 最新区块哈希
+        instructions: [
+          SystemProgram.transfer({ // 转账指令
+            fromPubkey: payer.publicKey, // 付款方公钥
+            toPubkey: this.warpFeeWallet, // 收款方公钥
+            lamports: fee, // 转账的 lamports 数量
+          }),
+        ],
+      }).compileToV0Message(); // 编译为 V0 消息
+
+      const warpFeeTx = new VersionedTransaction(warpFeeMessage); // 创建版本化交易
+      warpFeeTx.sign([payer]); // 签名交易
+
+      // 发送请求到 Warp 交易执行 API
+      const response = await axios.post<{ confirmed: boolean; signature: string, error?: string }>(
+        'https://tx.warp.id/transaction/execute', // API 地址
+        {
+          transactions: [bs58.encode(warpFeeTx.serialize()), bs58.encode(transaction.serialize())], // 发送序列化的交易
+          latestBlockhash, // 最新区块哈希
+        },
+        {
+          timeout: 100000, // 请求超时时间
+        },
+      );
+
+      return response.data; // 返回响应数据
+    } catch (error) {
+      if (error instanceof AxiosError) {
+        logger.trace({ error: error.response?.data }, '执行 Warp 交易失败'); // 记录错误信息
+      }
+    }
+
+    return { confirmed: false }; // 返回未确认
+  }
+}
diff --git a/1 AxisBot Solana Sniper Main/snipe-list.txt b/1 AxisBot Solana Sniper Main/snipe-list.txt
deleted file mode 100644
diff --git a/Bot汉化/bot Solana Sniper Main/snipe-list.txt b/Bot汉化/bot Solana Sniper Main/snipe-list.txt
new file mode 100644
diff --git a/Bot原版/Bot Solana Sniper Main/snipe-list.txt b/Bot原版/Bot Solana Sniper Main/snipe-list.txt
new file mode 100644
